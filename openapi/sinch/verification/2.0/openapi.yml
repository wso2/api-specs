openapi: 3.0.0
info:
  title: Verification
  description: 
    This is a generated connector for [Sinch Verification API v2.0](https://www.sinch.com/) OpenAPI specification. 

    Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
  x-ballerina-init-description: 
    The connector initialization requires setting the API credentials.

    Create a [Sinch account](https://www.sinch.com/) and obtain tokens by following [this guide](https://developers.sinch.com/docs/verification/api-reference/authentication/).
  x-ballerina-display:
    label: sinch.verification
    iconPath: "icon.png"
  termsOfService: https://www.sinch.com/terms-of-service/
  license:
    name: MIT
    url: https://www.sinch.com/toc
  contact:
    name: Sinch
    url: https://www.sinch.com/contact-us/
    email: support@sinch.com
  version: '2.0'
servers:
  - url: https://verificationapi-v1.sinch.com
security:
  - Basic: []
x-webhooks:
  VerificationRequestEvent:
    operationId: VerificationRequestEvent
    summary: Verification Request Event
    post:
      security: []
      tags:
        - Verification callbacks
      summary: Verification Request Event
      description: >-
        This callback event is a POST request to the specified verification
        callback URL and is triggered when a new verification request is made
        from the SDK client or the Verification Request API. This callback event
        is only triggered when a verification callback URL is specified in your
        [dashboard](https://dashboard.sinch.com/verification/apps).
      requestBody:
        $ref: '#/components/requestBodies/VerificationRequestEventRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerificationRequestEventResponse'
  VerificationResultEvent:
    operationId: VerificationResultEvent
    summary: Verification Result Event
    post:
      security: []
      tags:
        - Verification callbacks
      summary: Verification Result Event
      description: >-
        This callback event is a POST request to the specified verification
        callback URL and triggered when a verification has been completed and
        the result is known. It's used to report the verification result to the
        developer's backend application. This callback event is only triggered
        when the verification callback URL is specified in your
        [dashboard](https://dashboard.sinch.com/verification/apps).
      requestBody:
        $ref: '#/components/requestBodies/VerificationResultEventRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerificationResultEventResponse'
paths:
  /verification/v1/verifications:
    post:
      tags:
        - Verifications
      summary: Start verification
      description: >-
        This method is used by the mobile and web Verification SDKs to start a
        verification. It can also be used to request a verification from your
        backend, by making an request.
      operationId: StartVerification
      requestBody:
        $ref: '#/components/requestBodies/StartVerificationRequest'
      responses:
        '200':
          $ref: '#/components/responses/StartVerificationResponse'
  /verification/v1/verifications/{type}/{endpoint}:
    parameters:
      - $ref: '#/components/parameters/type'
      - $ref: '#/components/parameters/endpoint'
    put:
      tags:
        - Verifications
      summary: Report back on a started verification
      description: >-
        Verify verification code by Identity. After the SMS or flashcall is
        received (and intercepted, in the case of Android), the client needs to
        report to the Sinch Verification service either the PIN (for SMS) or CLI
        (for flashCall).
      operationId: ReportVerificationByIdentity
      requestBody:
        $ref: '#/components/requestBodies/VerificationReportRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerificationReportResponse'
  /verification/v1/verifications/id/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      tags:
        - Verifications
      summary: Report back on a started verification
      description: Used to report OTP code.
      operationId: ReportVerificationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          x-position: 1
      requestBody:
        x-name: request
        description: Verification report request resource payload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationReportRequestResource'
        required: true
        x-position: 2
      responses:
        '200':
          description: 'A sucessful response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResponse'
    get:
      tags:
        - Verification queries
      summary: Get verification by ID
      description: >-
        Queries the verification result by sending the verification ID. With
        this query you can get the result of a verification.
      operationId: VerificationStatusById
      responses:
        '200':
          $ref: '#/components/responses/VerificationResult'
  /verification/v1/verifications/{method}/{type}/{endpoint}:
    parameters:
      - $ref: '#/components/parameters/type'
      - $ref: '#/components/parameters/endpoint'
      - $ref: '#/components/parameters/method'
    get:
      tags:
        - Verification queries
      summary: Get verification by Identity
      description: >-
        Queries the verification result by sending the verification Identity and
        its method. With this query you can get the result of a verification.
      operationId: VerificationStatusByIdentity
      responses:
        '200':
          $ref: '#/components/responses/VerificationResult'
  /verification/v1/verifications/reference/{reference}:
    parameters:
      - $ref: '#/components/parameters/reference'
    get:
      tags:
        - Verification queries
      summary: Get verification by Reference
      description: >-
        Queries the verification result by sending the verification Reference.
        With this query you can get the result of a verification.
      operationId: VerificationStatusByReference
      responses:
        '200':
          $ref: '#/components/responses/VerificationResult'
tags:
  - name: Verifications
    description: >-
      Start new verification requests and report on existing verification
      requests.
  - name: Verification queries
    description: Query existing verification requests.
  - name: Verification callbacks
    description: >-
      Callback events are used to authorize and manage your verification
      requests and return verification results.
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The ID of the verification.
      schema:
        type: string
    method:
      name: method
      in: path
      required: true
      description: The method of the verification.
      schema:
        type: string
    type:
      name: type
      in: path
      required: true
      description: Currently only `number` type is supported.
      schema:
        type: string
    endpoint:
      name: endpoint
      in: path
      required: true
      description: >-
        For `number` use a
        [E.164](https://community.sinch.com/t5/Glossary/E-164/ta-p/7537)-compatible
        phone number.
      schema:
        type: string
    reference:
      name: reference
      in: path
      required: true
      description: The custom reference of the verification.
      schema:
        type: string
  examples:
    verificationRequestFlashCall:
      summary: FlashCall
      value:
        identity:
          type: number
          endpoint: '+46700000000'
        method: flashCall
    verificationRequestFlashCallnoSDK:
      summary: FlashCall specifying CLI (no SDK scenario)
      value:
        identity:
          type: number
          endpoint: '+46700000000'
        method: flashCall
        flashCallOptions:
          dialTimeout: 10
    verificationRequestSMS:
      summary: SMS
      value:
        identity:
          type: number
          endpoint: '+46700000000'
        method: sms
    verificationRequestCallout:
      summary: Callout
      value:
        identity:
          type: number
          endpoint: '+46700000000'
        method: callout
    verificationRequestData:
      summary: Data (seamless)
      value:
        identity:
          type: number
          endpoint: '+46700000000'
        method: seamless
  responses:
    VerificationRequestEventResponse:
      description: A successful response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationRequestEventResponse'
    VerificationResultEventResponse:
      description: A successful response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationResultEventResponse'
    StartVerificationResponse:
      description: A successful response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InitiateVerificationResponse'
    VerificationReportResponse:
      description: A successful response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationResponse'
    VerificationResult:
      description: A sucessful response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationResponse'
  requestBodies:
    VerificationRequestEventRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationRequestEvent'
    VerificationResultEventRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationResultEvent'
    StartVerificationRequest:
      required: true
      description: Start verification request payload.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InitiateVerificationResource'
          examples:
            verificationRequestSMS:
              $ref: '#/components/examples/verificationRequestSMS'
            verificationRequestFlashCall:
              $ref: '#/components/examples/verificationRequestFlashCall'
            verificationRequestFlashCallnoSDK:
              $ref: '#/components/examples/verificationRequestFlashCallnoSDK'
            verificationRequestCallout:
              $ref: '#/components/examples/verificationRequestCallout'
            verificationRequestData:
              $ref: '#/components/examples/verificationRequestData'
    VerificationReportRequest:
      description: Verification report request payload.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationReportRequestResource'
      required: true
  schemas:
    VerificationRequestEvent:
      required:
        - id
        - event
        - method
        - identity
      type: object
      properties:
        id:
          type: string
          description: The ID of the verification request.
          example: '1234567890'
        event:
          type: string
          description: The type of the event.
          example: VerificationRequestEvent
        method:
          type: string
          description: The verification method.
          enum:
            - sms
            - flashCall
            - callout
          example: sms
        identity:
          $ref: '#/components/schemas/Identity'
        price:
          description: The amount of money and currency of the verification request.
          type: object
          properties:
            amount:
              type: integer
              description: The amount of money of the verification request.
              example: 10.5
            currencyId:
              type: string
              description: The currency of the price.
              example: USD
        reference:
          type: string
          description: >-
            Used to pass your own reference in the request for tracking
            purposes.
        custom:
          type: string
          description: Can be used to pass custom data in the request.
        acceptLanguage:
          type: array
          description: >-
            Allows you to set or override if provided in the API request, the
            SMS verification content language. Only used with the SMS
            verification method. The content language specified in the API
            request or in the callback can be overridden by carrier provider
            specific templates, due to compliance and legal requirements, such
            as [US shortcode requirements
            (pdf)](https://community.sinch.com/t5/SMS/Sinch-US-Short-Code-Onboarding-Overview/ta-p/7085).
          items:
            type: string
            example: es-ES
    VerificationRequestEventResponse:
      oneOf:
        - $ref: '#/components/schemas/SMSRequestEventResponse'
        - $ref: '#/components/schemas/FlashCallRequestEventResponse'
        - $ref: '#/components/schemas/CalloutRequestEventResponse'
    VerificationResultEventResponse:
      oneOf:
        - $ref: '#/components/schemas/SMSRequestEventResponse'
        - $ref: '#/components/schemas/FlashCallRequestEventResponse'
        - $ref: '#/components/schemas/CalloutRequestEventResponse'
    SMSRequestEventResponse:
      title: SMS Request Event Response
      type: object
      properties:
        action:
          type: string
          description: Determines whether the verification can be executed.
          enum:
            - allow
            - deny
          example: allow
        sms:
          type: object
          properties:
            code:
              type: string
              description: >-
                The SMS PIN that should be used. By default, the Sinch dashboard
                will automatically generate PIN codes for SMS verification. If
                you want to set your own PIN, you can specify it in the response
                to the Verification Request Event.
              example: '12345'
            acceptLanguage:
              type: array
              description: >-
                The SMS verification content language. Set in the verification
                request.
              items:
                type: string
                example: es-ES
    FlashCallRequestEventResponse:
      title: FlashCall Request Event Response
      type: object
      properties:
        action:
          type: string
          description: Determines whether the verification can be executed.
          enum:
            - allow
            - deny
          example: allow
        flashCall:
          type: object
          properties:
            cli:
              type: string
              description: >-
                The phone number that will be displayed to the user when the
                flashcall is received on the user's phone. By default, the Sinch
                dashboard will randomly select the CLI that will be displayed
                during a flashcall from a pool of numbers. If you want to set
                your own CLI, you can specify it in the response to the
                Verification Request Event.
            dialTimeout:
              type: integer
              description: >-
                The maximum time that a flashcall verification will be active
                and can be completed. If the phone number hasn't been verified
                successfully during this time, then the verification request
                will fail. By default, the Sinch dashboard will automatically
                optimize dial time out during a flashcall. If you want to set
                your own dial time out for the flashcall, you can specify it in
                the response to the Verification Request Event.
    CalloutRequestEventResponse:
      title: Callout Request Event Response
      type: object
      properties:
        action:
          type: string
          description: Determines whether the verification can be executed.
          enum:
            - allow
            - deny
          example: allow
        callout:
          type: object
          properties:
            locale:
              type: string
              description: >-
                Indicates the language that should be used for the
                text-to-speech message. Currently, only `en-US` is supported.
              example: en-US
            ttsMenu:
              type: string
              description: >-
                The message that can be played to the user when the phone call
                is picked up. The default value is: "To verify your phone
                number, please press {pin}. If you didnâ€™t request this call,
                please hang up."
              example: Please press 1 to verify your phone
            wavFile:
              type: string
              description: >-
                The `.wav` file that can be played to the user when the phone
                call is picked up.
            pin:
              type: string
              description: >-
                The digit that the user should press to verify the phone number.
                The default value is `1`.
              example: '3'
    VerificationResultEvent:
      required:
        - id
        - event
        - method
        - identity
        - status
      type: object
      properties:
        id:
          type: string
          description: The ID of the verification request.
          example: '1234567890'
        event:
          type: string
          description: The type of the event.
          example: VerificationResultEvent
        method:
          type: string
          description: The verification method.
          enum:
            - sms
            - flashCall
            - callout
            - seamless
          example: sms
        identity:
          $ref: '#/components/schemas/Identity'
        status:
          type: string
          description: The status of the verification request.
          example: PENDING
          x-enumDescriptions:
            PENDING: The verification is ongoing.
            SUCCESSFUL: The verification was successful.
            FAIL: The verification attempt was made, but the number wasn't verified.
            DENIED: The verification attempt was denied by Sinch or your backend.
            ABORTED: >-
              The verification attempt was aborted by requesting a new
              verification.
            ERROR: >-
              The verification couldn't be completed due to a network error or
              the number being unreachable.
        reason:
          type: string
          description: >-
            Displays the reason why a verification has `FAILED`, was `DENIED`,
            or was `ABORTED`.
          enum:
            - Not enough credit
            - Blocked
            - Denied by callback
            - Invalid callback
            - Internal error
            - Destination denied
            - Network error or number unreachable
            - Failed pending
            - SMS delivery failure
            - Invalid CLI
            - Invalid code
            - Expired
            - Hung up without entering valid code
        reference:
          type: string
          description: >-
            The reference ID that was optionally passed together with the
            verification request.
          example: '12345'
        source:
          type: string
          description: >-
            Free text that the client is sending, used to show if the call/SMS
            was intercepted or not.
          enum:
            - intercepted
            - manual
          example: intercept
        custom:
          type: string
          description: A custom string that can be provided during a verification request.
    SMSInitiateVerificationResponse:
      title: SMS Response
      type: object
      additionalProperties: false
      required:
        - id
        - sms
      properties:
        id:
          type: string
          description: Verification identifier used to query for status.
          example: '1234567890'
        sms:
          type: object
          description: >-
            The response contains the `template` of the SMS to be expected and
            intercepted.
          properties:
            template:
              type: string
              description: The expected SMS response.
              example: Your verfication code is {{CODE}}
    FlashCallInitiateVerificationResponse:
      title: FlashCall Response
      type: object
      required:
        - id
        - flashCall
      properties:
        id:
          type: string
          description: Verification identifier used to query for status.
          example: '1234567890'
        flashCall:
          description: >-
            The response contains the `cliFilter` and `interceptionTimeout`
            properties.
          required:
            - cliFilter
            - interceptionTimeout
          type: object
          properties:
            cliFilter:
              type: string
              description: >-
                Filter that should be applied for incoming calls to intercept
                the Flashcall.
              example: (.*)70123(.*)
            interceptionTimeout:
              type: integer
              description: Amount of seconds client should wait for the Flashcall.
              format: int32
              example: 120
    CalloutInitiateVerificationResponse:
      title: Callout Response
      type: object
      required:
        - id
        - callout
      properties:
        id:
          type: string
          description: Verification identifier used to query for status.
          example: '1234567890'
        callout:
          description: >-
            The response contains information for the client to poll for the
            verification result.
          type: object
          properties:
            startPollingAfter:
              type: integer
              description: >-
                The amount of time in seconds after the request is sent that the
                polling should start.
              example: 3
            stopPollingAfter:
              type: integer
              description: >-
                The amount of time in seconds after the request is sent that
                polling should stop.
              example: 30
            pollingInterval:
              type: integer
              description: The amount of time in seconds between each poll.
              example: 3
    DataInitiateVerificationResponse:
      title: Data Response
      type: object
      required:
        - id
        - callout
      properties:
        id:
          type: string
          description: Verification identifier used to query for status.
          example: '1234567890'
        seamless:
          description: The response contains the target URI.
          type: object
          properties:
            targetUri:
              type: string
              description: The target URI.
              example: https://targetURI.com
    InitiateVerificationResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SMSInitiateVerificationResponse'
        - $ref: '#/components/schemas/FlashCallInitiateVerificationResponse'
        - $ref: '#/components/schemas/CalloutInitiateVerificationResponse'
        - $ref: '#/components/schemas/DataInitiateVerificationResponse'
    VerificationMethod:
      type: string
      description: The type of the verification request.
      example: sms
      x-enumDescriptions:
        sms: Verification by SMS message with a PIN code.
        flashCall: >-
          Verification by placing a flashcall (missed call) and detecting the
          incoming calling number (CLI).
        callout: >-
          Verification by placing a PSTN call to the user's phone and playing an
          announcement, asking the user to press a particular digit to verify
          the phone number (only iOS).
        seamless: >-
          Data verification. Verification by accessing internal infrastrcuture
          of mobile carriers to verify if given verification attempt was
          originated from device with matching phone number.
    InitiateVerificationResource:
      type: object
      additionalProperties: false
      required:
        - identity
        - method
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        method:
          $ref: '#/components/schemas/VerificationMethod'
        reference:
          type: string
          description: >-
            Used to pass your own reference in the request for tracking
            purposes.
        custom:
          type: string
          description: Can be used to pass custom data in the request.
        flashCallOptions:
          type: object
          description: >-
            An optional object for flashCall verifications. It allows you to
            specify dial time out parameter for flashCall. FlashCallOptions
            object can be specified optionally, and only if the verification
            request was triggered from your backend (no SDK client) through an
            [Application signed
            request](/docs/voice/api-reference/authentication#application-signed-request).
          properties:
            dialTimeout:
              type: integer
              description: The dial timeout in seconds.
              maxLength: 120
              minLength: 5
    Identity:
      type: object
      description: >-
        Specifies the type of endpoint that will be verified and the particular
        endpoint. `number` is currently the only supported endpoint type.
      required:
        - type
        - endpoint
      properties:
        type:
          type: string
          description: Currently only `number` type is supported.
          enum:
            - number
        endpoint:
          type: string
          description: >-
            For `number` use an
            [E.164](https://community.sinch.com/t5/Glossary/E-164/ta-p/7537)-compatible
            phone number.
          example: '+11235551234'
    VerificationResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: Verification identifier used to query for status.
          example: '1234567890'
        method:
          $ref: '#/components/schemas/VerificationMethod'
        status:
          type: string
          description: The status of the verification request.
          example: FAIL
          x-enumDescriptions:
            PENDING: The verification is ongoing.
            SUCCESSFUL: The verification was successful.
            FAIL: The verification attempt was made, but the number wasn't verified.
            DENIED: The verification attempt was denied by Sinch or your backend.
            ABORTED: >-
              The verification attempt was aborted by requesting a new
              verification.
            ERROR: >-
              The verification couldn't be completed due to a network error or
              the number being unreachable.
        reason:
          type: string
          description: >-
            Displays the reason why a verification has `FAILED`, was `DENIED`,
            or was `ABORTED`.
          enum:
            - Not enough credit
            - Blocked
            - Denied by callback
            - Invalid callback
            - Internal error
            - Destination denied
            - Network error or number unreachable
            - Failed pending
            - SMS delivery failure
            - Invalid CLI
            - Invalid code
            - Expired
            - Hung up without entering valid code
        reference:
          type: string
          description: >-
            The reference ID that was optionally passed together with the
            verification request.
          example: '12345'
        source:
          type: string
          description: >-
            Free text that the client is sending, used to show if the call/SMS
            was intercepted or not.
          enum:
            - intercepted
            - manual
          example: intercept
    VerificationReportRequestResource:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SmsVerificationReportRequest'
        - $ref: '#/components/schemas/FlashcallVerificationReportRequest'
    SmsVerificationReportRequest:
      title: SMS Verification Report Request
      type: object
      required:
        - method
        - sms
      properties:
        method:
          type: string
          description: The type of verification.
          example: sms
        sms:
          required:
            - code
          description: Contains information about the SMS verification.
          type: object
          properties:
            code:
              type: string
              description: >-
                The code which was input by the user submitting the SMS
                verification.
              example: '123'
            cli:
              type: string
              description: The sender ID of the SMS.
              example: '+46000000000'
    FlashcallVerificationReportRequest:
      title: FlashCall Verification Report Request
      required:
        - method
        - flashCall
      properties:
        method:
          type: string
          description: The type of verification.
          example: flashCall
        flashCall:
          required:
            - cli
          description: Contains information about the FlashCall verification.
          type: object
          properties:
            cli:
              type: string
              description: The caller ID of the FlashCall.
              example: '+46000000000'
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: >-
        For more information about basic authentication, see [Basic
        Authentication](newdocs/docs/voice/api-reference/authentication.md#basic-authentication).
x-explorer-enabled: false
x-samples-languages:
  - curl
  - csharp
  - java
  - node
  - php
x-proxy-enabled: true
x-samples-enabled: true
