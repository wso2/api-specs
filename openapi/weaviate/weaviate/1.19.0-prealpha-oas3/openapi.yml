openapi: 3.0.0
externalDocs:
  url: https://github.com/weaviate/weaviate
info:
  x-ballerina-display:
    label: Weaviate
    iconPath: "icon.png"
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials.

    Create a Cluster using [Weaviate Cloud Service](https://weaviate.io/developers/weaviate/quickstart/installation#weaviate-cloud-services) or deploy using [Docker/Kubernetes](https://weaviate.io/developers/weaviate/quickstart/installation#running-weaviate-with-docker) and obtain the [OIDC Authentication key](https://weaviate.io/developers/weaviate/configuration/authentication).
  contact:
    email: hello@weaviate.io
    name: Weaviate
    url: https://github.com/weaviate
  description: 
    This is a generated connector for [Weaviate Vector Search Engine API](https://weaviate.io/developers/weaviate/api) OpenAPI specification. 
    
    Weaviate API provide access to the manipulations of weaviate schema, objects and search vectors based on various criterias.
  title: Weaviate
  version: 1.19.0-prealpha-oas3
paths:
  "/objects":
    get:
      description: >-
        Lists all Objects in reverse order of creation, owned by the user that
        belongs to the used token.
      operationId: objects.list
      x-serviceIds:
        - weaviate.local.query
      x-ballerina-display:
        label: List Objects
      parameters:
        - $ref: '#/components/parameters/CommonAfterParameterQuery'
        - $ref: '#/components/parameters/CommonOffsetParameterQuery'
        - $ref: '#/components/parameters/CommonLimitParameterQuery'
        - $ref: '#/components/parameters/CommonIncludeParameterQuery'
        - $ref: '#/components/parameters/CommonSortParameterQuery'
        - $ref: '#/components/parameters/CommonOrderParameterQuery'
        - $ref: '#/components/parameters/CommonClassParameterQuery'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsListResponse'
        '400':
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Successful query result but no resource was found.
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Get a list of Objects.
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
    post:
      description: >-
        Registers a new Object. Provided meta-data and schema values are
        validated.
      operationId: objects.create
      x-serviceIds:
        - weaviate.local.add
      x-ballerina-display:
        label: Insert Object
      parameters:
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      requestBody:
        $ref: '#/components/requestBodies/Object'
      responses:
        '200':
          description: Object created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '400':
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Create Objects between two Objects (object and subject).
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
  "/objects/{className}/{id}":
    get:
      description: Get a single data object
      operationId: objects.class.get
      x-serviceIds:
        - weaviate.local.query
      x-ballerina-display:
        label: Get Object by ID
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
        - description: Unique ID of the Object.
          in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CommonIncludeParameterQuery'
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
        - $ref: '#/components/parameters/CommonNodeNameParameterQuery'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '400':
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Successful query result but no resource was found.
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: >-
        Get a specific Object based on its class and UUID. Also available as
        Websocket bus.
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
    delete:
      description: Delete a single data object.
      operationId: objects.class.delete
      x-serviceIds:
        - weaviate.local.manipulate
      x-ballerina-display:
        label: Delete Object by ID
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
        - description: Unique ID of the Object.
          in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      responses:
        '204':
          description: Successfully deleted.
        '400':
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Successful query result but no resource was found.
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Delete object based on its class and UUID.
      tags:
        - objects
      x-available-in-mqtt: true
      x-available-in-websocket: true
    put:
      description: Update an individual data object based on its class and uuid.
      operationId: objects.class.put
      x-serviceIds:
        - weaviate.local.manipulate
      x-ballerina-display:
        label: Update Object by ID
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
        - description: The uuid of the data object to update.
          in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      requestBody:
        $ref: '#/components/requestBodies/Object'
      responses:
        '200':
          description: Successfully received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Successful query result but no resource was found.
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Update a class object based on its uuid
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
    patch:
      description: >-
        Update an individual data object based on its class and uuid. This
        method supports json-merge style patch semantics (RFC 7396). Provided
        meta-data and schema values are validated. LastUpdateTime is set to the
        time this function is called.
      operationId: objects.class.patch
      x-serviceIds:
        - weaviate.local.manipulate
      x-ballerina-display:
        label: Patch Object by ID
      parameters:
        - description: The class name as defined in the schema
          name: className
          in: path
          required: true
          schema:
            type: string
        - description: The uuid of the data object to update.
          in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      requestBody:
        $ref: '#/components/requestBodies/Object2'
      responses:
        '204':
          description: Successfully applied. No content provided.
        '400':
          description: The patch-JSON is malformed.
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Successful query result but no resource was found.
        '422':
          description: The patch-JSON is valid but unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Update an Object based on its UUID (using patch semantics).
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
    head:
      description: Checks if a data object exists without retrieving it.
      operationId: objects.class.head
      x-serviceIds:
        - weaviate.local.manipulate
      x-ballerina-display:
        label: Search Object by ID
      parameters:
        - description: The class name as defined in the schema
          name: className
          in: path
          required: true
          schema:
            type: string
        - description: The uuid of the data object
          in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      responses:
        '204':
          description: Object exists.
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object doesn't exist.
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Checks object's existence based on its class and uuid.
      tags:
        - objects
      x-available-in-mqtt: true
      x-available-in-websocket: true
  "/objects/validate":
    post:
      description: >-
        Validate an Object's schema and meta-data. It has to be based on a
        schema, which is related to the given Object to be accepted by this
        validation.
      operationId: objects.validate
      x-serviceIds:
        - weaviate.local.query.meta
      x-ballerina-display:
        label: Validate Object
      requestBody:
        $ref: '#/components/requestBodies/Object'
      responses:
        '200':
          description: Successfully validated.
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Validate an Object based on a schema.
      tags:
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
  "/batch/objects":
    post:
      description: >-
        Register new Objects in bulk. Provided meta-data and schema values are
        validated.
      operationId: batch.objects.create
      x-serviceIds:
        - weaviate.local.add
      x-ballerina-display:
        label: Insert Objects (Batch)
      parameters:
        - $ref: '#/components/parameters/CommonConsistencyLevelParameterQuery'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  description: >-
                    Define which fields need to be returned. Default value is
                    ALL
                  type: array
                  items:
                    type: string
                    default: ALL
                    enum:
                      - ALL
                      - class
                      - schema
                      - id
                      - creationTimeUnix
                objects:
                  type: array
                  items:
                    $ref: '#/components/schemas/Object'
        required: true
      responses:
        '200':
          description: >-
            Request succeeded, see response body to get detailed information
            about each batched item.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectsGetResponse'
        '400':
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Creates new Objects based on a Object template as a batch.
      tags:
        - batch
        - objects
      x-available-in-mqtt: false
      x-available-in-websocket: false
  "/graphql":
    post:
      description: Get an object based on GraphQL
      operationId: graphql.post
      x-serviceIds:
        - weaviate.local.query
        - weaviate.local.query.meta
        - weaviate.network.query
        - weaviate.network.query.meta
      x-ballerina-display:
        label: Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQLQuery'
        description: The GraphQL query request parameters.
        required: true
      responses:
        '200':
          description: Successful query (with select).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Get a response based on GraphQL
      tags:
        - graphql
      x-available-in-mqtt: false
      x-available-in-websocket: false
  "/graphql/batch":
    post:
      description: Perform a batched GraphQL query
      operationId: graphql.batch
      x-serviceIds:
        - weaviate.local.query
        - weaviate.local.query.meta
        - weaviate.network.query
        - weaviate.network.query.meta
      x-ballerina-display:
        label: Batch Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQLQueries'
        description: The GraphQL queries.
        required: true
      responses:
        '200':
          description: Successful query (with select).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLResponses'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Request body is well-formed (i.e., syntactically correct), but
            semantically erroneous. Are you sure the class is defined in the
            configuration file?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Get a response based on GraphQL.
      tags:
        - graphql
      x-available-in-mqtt: false
      x-available-in-websocket: false
  "/schema":
    get:
      summary: Dump the current the database schema.
      operationId: schema.dump
      x-serviceIds:
        - weaviate.local.query.meta
      x-ballerina-display:
        label: Dump DB Schema
      tags:
        - schema
      responses:
        '200':
          description: Successfully dumped the database schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new Object class in the schema.
      operationId: schema.objects.create
      x-serviceIds:
        - weaviate.local.add.meta
      x-ballerina-display:
        label: Create Class
      tags:
        - schema
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        '200':
          description: Added the new Object class to the schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid Object class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  "/schema/{className}":
    get:
      summary: Get a single class from the schema
      operationId: schema.objects.get
      x-serviceIds:
        - weaviate.local.get.meta
      x-ballerina-display:
        label: Get Class
      tags:
        - schema
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found the Class, returned as body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: This class does not exist
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Remove an Object class (and all data in the instances) from the schema.
      operationId: schema.objects.delete
      x-serviceIds:
        - weaviate.local.manipulate.meta
      x-ballerina-display:
        label: Delete Class
      tags:
        - schema
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Removed the Object class from the schema.
        '400':
          description: Could not delete the Object class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update settings of an existing schema class
      description: >-
        Use this endpoint to alter an existing class in the schema. Note that
        not all settings are mutable. If an error about immutable fields is
        returned and you still need to update this particular setting, you will
        have to delete the class (and the underlying data) and recreate. This
        endpoint cannot be used to modify properties. Instead use POST
        /v1/schema/{className}/properties. A typical use case for this endpoint
        is to update configuration, such as the vectorIndexConfig. Note that
        even in mutable sections, such as vectorIndexConfig, some fields may be
        immutable.
      operationId: schema.objects.update
      x-serviceIds:
        - weaviate.local.manipulate.meta
      x-ballerina-display:
        label: Update Class
      tags:
        - schema
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        '200':
          description: Class was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Class to be updated does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid update attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schema/{className}/properties:
    post:
      summary: Add a property to an Object class.
      operationId: schema.objects.properties.add
      x-serviceIds:
        - weaviate.local.manipulate.meta
      x-ballerina-display:
        label: Add Property
      tags:
        - schema
      parameters:
        - name: className
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        '200':
          description: Added the property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized or invalid credentials.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            An error has occurred while trying to fulfill the request. Most
            likely the ErrorResponse will contain more information about the
            error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
security:
  - {}
  - oidc: []
tags:
  - name: objects
  - name: batch
    description: >-
      These operations allow to execute batch requests for Objects and Objects.
      Mostly used for importing large datasets.
  - name: graphql
  - name: meta
  - name: P2P
  - name: contextionary-API
    description: All functions related to the Contextionary.
  - name: schema
    description: These operations enable manipulation of the schema in Weaviate schema.
servers:
  - url: /v1
components:
  parameters:
    CommonAfterParameterQuery:
      description: The starting ID of the result window.
      in: query
      name: after
      required: false
      schema:
        type: string
    CommonOffsetParameterQuery:
      description: The starting index of the result window. Default value is 0.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        format: int64
        default: 0
    CommonLimitParameterQuery:
      description: >-
        The maximum number of items to be returned per page. Default value is
        set in Weaviate config.
      in: query
      name: limit
      required: false
      schema:
        type: integer
        format: int64
    CommonIncludeParameterQuery:
      description: >-
        Include additional information, such as classification infos. Allowed
        values include: classification, vector, interpretation
      in: query
      name: include
      required: false
      schema:
        type: string
    CommonConsistencyLevelParameterQuery:
      description: >-
        Determines how many replicas must acknowledge a request before it is
        considered successful
      in: query
      name: consistency_level
      required: false
      schema:
        type: string
    CommonNodeNameParameterQuery:
      description: The target node which should fulfill the request
      in: query
      name: node_name
      required: false
      schema:
        type: string
    CommonSortParameterQuery:
      description: Sort parameter to pass an information about the names of the sort fields
      in: query
      name: sort
      required: false
      schema:
        type: string
    CommonOrderParameterQuery:
      description: >-
        Order parameter to tell how to order (asc or desc) data within given
        field
      in: query
      name: order
      required: false
      schema:
        type: string
    CommonClassParameterQuery:
      description: Class parameter specifies the class from which to query objects
      in: query
      name: class
      required: false
      schema:
        type: string
  requestBodies:
    MultipleRef:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MultipleRef'
      required: true
    Class:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Class'
      required: true
    SingleRef:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SingleRef'
      required: true
    Object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Object'
      required: true
    Object2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Object'
      description: >-
        RFC 7396-style patch, the body contains the object to merge into the
        existing object.
  securitySchemes:
    oidc:
      type: oauth2
      description: OIDC (OpenConnect ID - based on OAuth2)
      flows:
        implicit:
          authorizationUrl: http://to-be-configured-in-the-application-config
          scopes: {}
  schemas:
    C11yVector:
      description: A Vector in the Contextionary
      type: array
      items:
        type: number
        format: float
    Deprecation:
      type: object
      properties:
        id:
          type: string
          description: >-
            The id that uniquely identifies this particular deprecations (mostly
            used internally)
        status:
          type: string
          description: >-
            Whether the problematic API functionality is deprecated (planned to
            be removed) or already removed
        apiType:
          type: string
          description: 'Describes which API is effected, usually one of: REST, GraphQL'
        msg:
          type: string
          description: What this deprecation is about
        mitigation:
          type: string
          description: User-required object to not be affected by the (planned) removal
        sinceVersion:
          type: string
          description: The deprecation was introduced in this version
        plannedRemovalVersion:
          type: string
          description: >-
            A best-effort guess of which upcoming version will remove the
            feature entirely
        removedIn:
          type: string
          description: >-
            If the feature has already been removed, it was removed in this
            version
          nullable: true
        removedTime:
          type: string
          format: date-time
          description: >-
            If the feature has already been removed, it was removed at this
            timestamp
          nullable: true
        sinceTime:
          type: string
          format: date-time
          description: The deprecation was introduced in this version
        locations:
          type: array
          description: The locations within the specified API affected by this deprecation
          items:
            type: string
    ErrorResponse:
      description: An error response given by Weaviate end-points.
      properties:
        error:
          items:
            properties:
              message:
                type: string
            type: object
          type: array
          description: List of errors
      type: object
    GraphQLError:
      description: An error response caused by a GraphQL query.
      properties:
        locations:
          items:
            properties:
              column:
                format: int64
                type: integer
              line:
                format: int64
                type: integer
            type: object
          type: array
          description: Location of the graphQL query
        message:
          type: string
          description: error message give by the graphQL query
        path:
          items:
            type: string
          type: array
          description: paths in the schema
          nullable: true
    GraphQLQuery:
      description: 'GraphQL query based on: http://facebook.github.io/graphql/.'
      properties:
        operationName:
          description: The name of the operation if multiple exist in the query.
          type: string
        query:
          description: Query based on GraphQL syntax.
          type: string
        variables:
          description: Additional variables for the query.
          type: object
      type: object
    GraphQLQueries:
      description: A list of GraphQL queries.
      items:
        $ref: '#/components/schemas/GraphQLQuery'
      type: array
    GraphQLResponse:
      description: 'GraphQL based response: http://facebook.github.io/graphql/.'
      properties:
        data:
          additionalProperties:
            $ref: '#/components/schemas/JsonObject'
          description: GraphQL data object.
          type: object
        errors:
          description: Array with errors.
          items:
            $ref: '#/components/schemas/GraphQLError'
          x-omitempty: true
          type: array
          nullable: true
    GraphQLResponses:
      description: A list of GraphQL responses.
      items:
        $ref: '#/components/schemas/GraphQLResponse'
      type: array
    InvertedIndexConfig:
      description: Configure the inverted index built into Weaviate
      properties:
        cleanupIntervalSeconds:
          description: Asynchronous index clean up happens every n seconds
          format: int64
          type: integer
        bm25:
          $ref: '#/components/schemas/BM25Config'
          nullable: true
        stopwords:
          $ref: '#/components/schemas/StopwordConfig'
          nullable: true
        indexTimestamps:
          description: Index each object by its internal timestamps
          type: boolean
        indexNullState:
          description: Index each object with the null state
          type: boolean
        indexPropertyLength:
          description: Index length of properties
          type: boolean
      type: object
    ReplicationConfig:
      description: Configure how replication is executed in a cluster
      properties:
        factor:
          description: Number of times a class is replicated
          type: integer
      type: object
    BM25Config:
      description: tuning parameters for the BM25 algorithm
      properties:
        k1:
          description: >-
            calibrates term-weight scaling based on the term frequency within a
            document
          format: float
          type: number
        b:
          description: calibrates term-weight scaling based on the document length
          format: float
          type: number
      type: object
    StopwordConfig:
      description: fine-grained control over stopword list usage
      properties:
        preset:
          description: pre-existing list of common words by language
          type: string
        additions:
          description: stopwords to be considered additionally
          type: array
          items:
            type: string
          nullable: true
        removals:
          description: stopwords to be removed from consideration
          type: array
          items:
            type: string
          nullable: true
      type: object
    JsonObject:
      description: JSON object value.
      type: object
    MultipleRef:
      description: Multiple instances of references to other objects.
      items:
        $ref: '#/components/schemas/SingleRef'
      type: array
    VectorWeights:
      description: >-
        Allow custom overrides of vector weights as math expressions. E.g.
        "pancake": "7" will set the weight for the word pancake to 7 in the
        vectorization, whereas "w * 3" would triple the originally calculated
        word. This is an open object, with OpenAPI Specification 3.0 this will
        be more detailed. See Weaviate docs for more info. In the future this
        will become a key/value (string/string) object.
      type: object
      nullable: true
    PropertySchema:
      description: >-
        This is an open object, with OpenAPI Specification 3.0 this will be more
        detailed. See Weaviate docs for more info. In the future this will
        become a key/value OR a SingleRef definition.
      type: object
    Schema:
      description: >-
        Definitions of semantic schemas (also see:
        https://github.com/weaviate/weaviate-semantic-schemas).
      properties:
        classes:
          description: Semantic classes that are available.
          items:
            $ref: '#/components/schemas/Class'
          type: array
          nullable: true
        maintainer:
          description: Email of the maintainer.
          format: email
          type: string
          nullable: true
        name:
          description: Name of the schema.
          type: string
          nullable: true
      type: object
    Class:
      properties:
        class:
          description: Name of the class as URI relative to the schema URL.
          type: string
        vectorIndexType:
          description: Name of the vector index to use, eg. (HNSW)
          type: string
          nullable: true
        vectorIndexConfig:
          description: >-
            Vector-index config, that is specific to the type of index selected
            in vectorIndexType
          type: object
          nullable: true
        shardingConfig:
          description: >-
            Manage how the index should be sharded and distributed in the
            cluster
          type: object
          nullable: true
        replicationConfig:
          $ref: '#/components/schemas/ReplicationConfig'
          nullable: true
        invertedIndexConfig:
          $ref: '#/components/schemas/InvertedIndexConfig'
          nullable: true
        vectorizer:
          description: >-
            Specify how the vectors for this class should be determined. The
            options are either 'none' - this means you have to import a vector
            with each object yourself - or the name of a module that provides
            vectorization capabilities, such as 'text2vec-contextionary'. If
            left empty, it will use the globally configured default which can
            itself either be 'none' or a specific module.
          type: string
          nullable: true
        moduleConfig:
          description: >-
            Configuration specific to modules this Weaviate instance has
            installed
          type: object
          nullable: true
        description:
          description: Description of the class.
          type: string
          nullable: true
        properties:
          description: The properties of the class.
          items:
            $ref: '#/components/schemas/Property'
          type: array
          nullable: true
      type: object
    Property:
      properties:
        dataType:
          description: >-
            Can be a reference to another type when it starts with a capital
            (for example Person), otherwise "string" or "int".
          items:
            type: string
          type: array
        description:
          description: Description of the property.
          type: string
        moduleConfig:
          description: >-
            Configuration specific to modules this Weaviate instance has
            installed
          type: object
        name:
          description: Name of the property as URI relative to the schema URL.
          type: string
        indexInverted:
          description: >-
            Optional. Should this property be indexed in the inverted index.
            Defaults to true. If you choose false, you will not be able to use
            this property in where filters. This property has no affect on
            vectorization decisions done by modules
          type: boolean
          nullable: true
        tokenization:
          description: >-
            Determines tokenization of the property as separate words or whole
            field. Optional. Applies to string, string[], text and text[] data
            types. Allowed values are `word` (default) and `field` for string
            and string[], `word` (default) for text and text[]. Not supported
            for remaining data types
          type: string
          enum:
            - word
            - field
      type: object
    SingleRef:
      description: >-
        Either set beacon (direct reference) or set class and schema (concept
        reference)
      properties:
        class:
          description: >-
            If using a concept reference (rather than a direct reference),
            specify the desired class name here
          format: uri
          type: string
        schema:
          $ref: '#/components/schemas/PropertySchema'
        beacon:
          description: >-
            If using a direct reference, specify the URI to point to the
            cross-ref here. Should be in the form of weaviate://localhost/<uuid>
            for the example of a local cross-ref to an object
          format: uri
          type: string
        href:
          description: >-
            If using a direct reference, this read-only fields provides a link
            to the referenced resource. If 'origin' is globally configured, an
            absolute URI is shown - a relative URI otherwise.
          format: uri
          type: string
        classification:
          $ref: '#/components/schemas/ReferenceMetaClassification'
    AdditionalProperties:
      description: Additional Meta information about a single object object.
      type: object
      additionalProperties:
        type: object
    ReferenceMetaClassification:
      description: >-
        This meta field contains additional info about the classified reference
        property
      properties:
        overallCount:
          description: >-
            overall neighbors checked as part of the classification. In most
            cases this will equal k, but could be lower than k - for example if
            not enough data was present
          type: integer
          format: int64
        winningCount:
          description: size of the winning group, a number between 1..k
          type: integer
          format: int64
        losingCount:
          description: >-
            size of the losing group, can be 0 if the winning group size euqals
            k
          type: integer
          format: int64
        closestOverallDistance:
          description: >-
            The lowest distance of any neighbor, regardless of whether they were
            in the winning or losing group
          type: number
          format: float
        winningDistance:
          description: deprecated - do not use, to be removed in 0.23.0
          type: number
          format: float
        meanWinningDistance:
          description: Mean distance of all neighbors from the winning group
          type: number
          format: float
        closestWinningDistance:
          description: Closest distance of a neighbor from the winning group
          type: number
          format: float
        closestLosingDistance:
          description: >-
            The lowest distance of a neighbor in the losing group. Optional. If
            k equals the size of the winning group, there is no losing group
          type: number
          format: float
          nullable: true
        losingDistance:
          description: deprecated - do not use, to be removed in 0.23.0
          type: number
          format: float
          nullable: true
        meanLosingDistance:
          description: >-
            Mean distance of all neighbors from the losing group. Optional. If k
            equals the size of the winning group, there is no losing group.
          type: number
          format: float
          nullable: true
    GeoCoordinates:
      description: GeoCoodinates based on longitute and latitude
      properties:
        latitude:
          description: The latitude of the point on earth in decimal form
          format: float
          type: number
          nullable: true
        longitude:
          description: The longitude of the point on earth in decimal form
          format: float
          type: number
          nullable: true
    Object:
      properties:
        class:
          description: Class of the Object, defined in the schema.
          type: string
        vectorWeights:
          $ref: '#/components/schemas/VectorWeights'
        properties:
          $ref: '#/components/schemas/PropertySchema'
        id:
          description: ID of the Object.
          format: uuid
          type: string
        creationTimeUnix:
          description: >-
            Timestamp of creation of this Object in milliseconds since epoch
            UTC.
          format: int64
          type: integer
        lastUpdateTimeUnix:
          description: Timestamp of the last Object update in milliseconds since epoch UTC.
          format: int64
          type: integer
        vector:
          $ref: '#/components/schemas/C11yVector'
        additional:
          $ref: '#/components/schemas/AdditionalProperties'
      type: object
    ObjectsGetResponse:
      allOf:
        - $ref: '#/components/schemas/Object'
        - properties:
            deprecations:
              type: array
              items:
                $ref: '#/components/schemas/Deprecation'
              nullable: true
        - properties:
            result:
              description: Results for this specific Object.
              format: object
              properties:
                status:
                  type: string
                  default: SUCCESS
                  enum:
                    - SUCCESS
                    - PENDING
                    - FAILED
                  description: Object processing status
                errors:
                  $ref: '#/components/schemas/ErrorResponse'
      type: object
    BatchDelete:
      type: object
      properties:
        match:
          description: Outlines how to find the objects to be deleted.
          type: object
          properties:
            class:
              description: Class (name) which objects will be deleted.
              type: string
              example: City
            where:
              $ref: '#/components/schemas/WhereFilter'
        output:
          description: >-
            Controls the verbosity of the output, possible values are:
            "minimal", "verbose". Defaults to "minimal".
          type: string
          default: minimal
        dryRun:
          description: >-
            If true, objects will not be deleted yet, but merely listed.
            Defaults to false.
          type: boolean
          default: false
    BatchDeleteResponse:
      description: Delete Objects response.
      type: object
      properties:
        match:
          description: Outlines how to find the objects to be deleted.
          type: object
          properties:
            class:
              description: Class (name) which objects will be deleted.
              type: string
              example: City
            where:
              $ref: '#/components/schemas/WhereFilter'
              nullable: true
        output:
          description: >-
            Controls the verbosity of the output, possible values are:
            "minimal", "verbose". Defaults to "minimal".
          type: string
          default: minimal
        dryRun:
          description: >-
            If true, objects will not be deleted yet, but merely listed.
            Defaults to false.
          type: boolean
          default: false
        results:
          type: object
          properties:
            matches:
              description: How many objects were matched by the filter.
              type: integer
              format: int64
              x-omitempty: false
            limit:
              description: >-
                The most amount of objects that can be deleted in a single
                query, equals QUERY_MAXIMUM_RESULTS.
              type: integer
              format: int64
              x-omitempty: false
            successful:
              description: How many objects were successfully deleted in this round.
              type: integer
              format: int64
              x-omitempty: false
            failed:
              description: >-
                How many objects should have been deleted but could not be
                deleted.
              type: integer
              format: int64
              x-omitempty: false
            objects:
              description: >-
                With output set to "minimal" only objects with error occurred
                will the be described. Successfully deleted objects would be
                omitted. Output set to "verbose" will list all of the objets
                with their respective statuses.
              type: array
              nullable: true
              items:
                description: Results for this specific Object.
                format: object
                properties:
                  id:
                    description: ID of the Object.
                    format: uuid
                    type: string
                  status:
                    type: string
                    default: SUCCESS
                    enum:
                      - SUCCESS
                      - DRYRUN
                      - FAILED
                    description: Object processing status
                  errors:
                    $ref: '#/components/schemas/ErrorResponse'
                    nullable: true
          description: Results due to the deletion operation
    ObjectsListResponse:
      description: List of Objects.
      properties:
        objects:
          description: The actual list of Objects.
          items:
            $ref: '#/components/schemas/Object'
          type: array
        deprecations:
          type: array
          items:
            $ref: '#/components/schemas/Deprecation'
          nullable: true
          description: deprecations 
        totalResults:
          description: >-
            The total number of Objects for the query. The number of items in a
            response may be smaller due to paging.
          format: int64
          type: integer
      type: object
    WhereFilter:
      description: Filter search results using a where filter
      properties:
        operands:
          description: combine multiple where filters, requires 'And' or 'Or' operator
          type: array
          items:
            $ref: '#/components/schemas/WhereFilter'
          nullable: true
        operator:
          description: operator to use
          type: string
          enum:
            - And
            - Or
            - Equal
            - Like
            - Not
            - NotEqual
            - GreaterThan
            - GreaterThanEqual
            - LessThan
            - LessThanEqual
            - WithinGeoRange
            - IsNull
          example: GreaterThanEqual
          nullable: true
        path:
          description: path to the property currently being filtered
          type: array
          items:
            type: string
          example:
            - inCity
            - City
            - name
          nullable: true
        valueInt:
          description: value as integer
          type: integer
          format: int64
          example: 2000
          nullable: true
        valueNumber:
          description: value as number/float
          type: number
          format: float
          example: 3.14
          nullable: true
        valueBoolean:
          description: value as boolean
          type: boolean
          example: false
          nullable: true
        valueString:
          description: value as string
          type: string
          example: my search term
          nullable: true
        valueText:
          description: value as text (on text props)
          type: string
          example: my search term
          nullable: true
        valueDate:
          description: value as date (as string)
          type: string
          example: TODO
          nullable: true
        valueGeoRange:
          $ref: '#/components/schemas/WhereFilterGeoRange'
      type: object
    WhereFilterGeoRange:
      type: object
      description: filter within a distance of a georange
      properties:
        geoCoordinates:
          $ref: '#/components/schemas/GeoCoordinates'
        distance:
          type: object
          properties:
            max:
              type: number
              format: float
              description: max distance 
          description: distace based on geoCoordinates
           