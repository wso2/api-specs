openapi: 3.0.1
info:
  x-ballerina-display:
    label: Bitbucket
    iconPath: "icon.png"
  title: Bitbucket API
  description: >-
    This is a generated connector for [Bitbucket API v2.0](https://developer.atlassian.com/bitbucket/api/2/reference/) OpenAPI Specification.

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, 
    or even add custom UI add-ons into Bitbucket itself using the Connect framework.
  x-ballerina-init-description: >- 
    The connector initialization requires setting the API credentials.

    Create an [Bitbucket account](https://bitbucket.org/product/) and obtain tokens following 
    [this guide](https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication).
  termsOfService: https://www.atlassian.com/legal/customer-agreement
  contact:
    name: Bitbucket Support
    url: https://support.atlassian.com/bitbucket-cloud/
    email: support@bitbucket.org
  version: "2.0"
servers:
  - url: https://api.bitbucket.org/2.0
tags:
  - name: Addon
    description: |
      The addon resource is intended to use used by Bitbucket Cloud Connect
      Apps, and only supports JWT authentication.
  - name: Branch restrictions
    description: |
      Repository owners and administrators can set branch management
      rules on a repository that control what can be pushed by whom.
      Through these rules, you can enforce a project or team
      workflow. For example, owners or administrators can:

      * Limit push powers
      * Prevent branch deletion
      * Prevent history re-writes (Git only)
  - name: Branching model
    description: |
      The branching model resource is used to modify the branching model
      for a repository.

      You can use the branching model to define a branch based workflow
      for your repositories. When you map your workflow to branch types,
      you can ensure that branches are named consistently by configuring
      which branch types to make available.
  - name: Commit statuses
    description: |
      Commit statuses provide a way to tag commits with meta data,
      like automated build results.
  - name: Commits
    description: |
      These are the repository's commits. They are paginated and returned in
      reverse chronological order, similar to the output of git log.
  - name: Deployments
    description: |
      Teams are deploying code faster than ever, thanks to continuous
      delivery practices and tools like Bitbucket Pipelines. Bitbucket
      Deployments gives teams visibility into their deployment
      environments and helps teams to track how far changes have
      progressed in their deployment pipeline.
  - name: Downloads
    description: Access the list of download links associated with the repository.
  - name: Issue tracker
    description: |
      The issue resources provide functionality for getting information on
      issues in an issue tracker, creating new issues, updating them and deleting
      them.

      You can access public issues without authentication, but you can't gain access
      to private repositories' issues. By authenticating, you will get the ability
      to create issues, as well as access to updating data or deleting issues you
      have access to.
  - name: Pipelines
    description: |
      Bitbucket Pipelines brings continuous delivery to Bitbucket
      Cloud, empowering teams with full branching to deployment
      visibility and faster feedback loops.
  - name: Projects
    description: |
      Bitbucket Cloud projects make it easier for teams to focus on
      a goal, product, or process by organizing their repositories.
  - name: Pullrequests
    description: |
      Pull requests are a feature that makes it easier for developers
      to collaborate using Bitbucket. They provide a user-friendly web
      interface for discussing proposed changes before integrating them
      into the official project.
  - name: Refs
    description: |
      The refs resource allows you access branches and tags in a repository.
      By default, results will be in the order the underlying source control
      system returns them and identical to the ordering one sees when running
      "$ git show-ref". Note that this follows simple lexical ordering of the
       ref names.
  - name: Reports
    description: |
      Code insights provides reports, annotations, and metrics to help you
      and your team improve code quality in pull requests throughout the code
      review process. Some of the available code insights are static analysis
      reports, security scan results, artifact links, unit tests, and build
      status.
  - name: Repositories
    description: |
      A Git repository is a virtual storage of your project. It
      allows you to save versions of your code, which you can access
      when needed. The repo resource allows you to access public repos,
      or repos that belong to a specific workspace.
  - name: Snippets
    description: |
      Snippets allow you share code segments or files with yourself, members of
      your workspace, or the world.

      Like pull requests, repositories and workspaces, the full set of snippets
      is defined by what the current user has access to. This includes all
      snippets owned by any of the workspaces the user is a member of, or
      snippets by other users that the current user is either watching or has
       collaborated on (for instance by commenting on it).
  - name: Source
    description: |-
      Browse the source code in the repository and
                                    create new commits by uploading.
  - name: Ssh
    description: |
      The SSH resource allows you to manage SSH keys.
  - name: Teams
    description: |
      The teams resource has been deprecated, and the workspaces
      endpoint should be used instead.

      The teams resource returns all the teams that the authenticated
      user is associated with.
  - name: Users
    description: |
      The users resource allows you to access public information
      associated with a user account. Most resources in the users
      endpoint have been deprecated in favor of workspaces.
  - name: Webhooks
    description: |
      Webhooks provide a way to configure Bitbucket Cloud to make requests to
      your server (or another external service) whenever certain events occur in
      Bitbucket Cloud.

      A webhook consists of:

      * A subject -- The resource that generates the events. Currently, this resource
      is the repository, user account, or team where you create the webhook.
      * One or more event -- The default event is a repository push, but you can
      select multiple events that can trigger the webhook.
      * A URL -- The endpoint where you want Bitbucket to send the event payloads
      when a matching event happens.

      There are two parts to getting a webhook to work: creating the webhook and
      triggering the webhook. After you create a webhook for an event, every time
      that event occurs, Bitbucket sends a payload request that describes the event
      to the specified URL. Thus, you can think of webhooks as a kind of
      notification system.

      Use webhooks to integrate applications with Bitbucket Cloud. The following
      use cases provides examples of when you would want to use webhooks:

      * Every time a user pushes commits in a repository, you may want to notify
      your CI server to start a build.
      * Every time a user pushes commits or creates a pull request, you may want to
      display a notification in your application.
  - name: Wiki
    description: |
      The wiki is a simple place to keep documents. Some people use it
      as their project home page. The wiki is a Git repository, so you
      can clone it and edit it like any other source files.
  - name: Workspaces
    description: |
      A workspace is where you create repositories, collaborate on
      your code, and organize different streams of work in your Bitbucket
      Cloud account. Workspaces replace the use of teams and users in API
      calls.
paths:
  /repositories/{workspace}:
    get:
      tags:
      - Repositories
      operationId: listWorkspaces
      summary: Returns a list of all repositories
      description: |-
        Returns a paginated list of all repositories owned by the specified
        account or UUID.

        The result can be narrowed down based on the authenticated user's role.

        E.g. with `?role=contributor`, only those repositories that the
        authenticated user has write access to are returned (this includes any
        repo the user is an admin on, as that implies write access).

        This endpoint also supports filtering and sorting of the results. See
        [filtering and sorting](../../meta/filtering) for more details.
      parameters:
      - name: workspace
        in: path
        description: |
          This can either be the workspace ID (slug) or the workspace UUID
          surrounded by curly-braces, for example: `{workspace UUID}`.
        required: true
        schema:
          type: string
      - name: role
        in: query
        description: Filters the result based on the authenticated user's role on each repository. member-returns repositories to which the user has explicit read access. contributor- returns repositories to which the user has explicit write access. admin- returns repositories to which the user has explicit administrator access. owner-returns all repositories owned by the current user
        schema:
          type: string
          enum:
          - admin
          - contributor
          - member
          - owner
      - name: q
        in: query
        description: Query string to narrow down the response as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering
        schema:
          type: string
      - name: sort
        in: query
        description: Field by which the results should be sorted as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering
        schema:
          type: string
      responses:
        200:
          description: The repositories owned by the specified account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_repositories'
        404:
          description: If the specified account does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        410:
          description: If the specified account marked as spam.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - oauth2:
        - repository
  /repositories/{workspace}/{repo_slug}/pullrequests:
    get:
      tags:
      - Pullrequests
      operationId: listPullrequets
      summary: Returns all pull requests
      description: Returns all pull requests on the specified repository. By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.
      parameters:
      - name: repo_slug
        in: path
        description: |
          This can either be the repository slug or the UUID of the repository,
          surrounded by curly-braces, for example: `{repository UUID}`.
        required: true
        schema:
          type: string
      - name: workspace
        in: path
        description: |
          This can either be the workspace ID (slug) or the workspace UUID
          surrounded by curly-braces, for example: `{workspace UUID}`.
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: Only return pull requests that are in this state. This parameter
          can be repeated.
        schema:
          type: string
          enum:
          - MERGED
          - SUPERSEDED
          - OPEN
          - DECLINED
      responses:
        200:
          description: All pull requests on the specified repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_pullrequests'
        401:
          description: If the repository is private and the request was not authenticated.
          content: {}
        404:
          description: If the specified repository does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - oauth2:
        - pullrequest
  /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}:
    get:
      tags:
        - Pullrequests
      summary: Returns the specified pull request
      operationId: getPullRequestByID
      parameters:
        - name: pull_request_id
          in: path
          description: The id of the pull request
          required: true
          schema:
            type: integer
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        200:
          description: The pull request object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pullrequest"
              example:
                type: pullrequest
                description: Everything is awesome!
                links:
                  decline:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline
                  commits:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits
                  self:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1
                  comments:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments
                  merge:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge
                  html:
                    href: https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1
                  activity:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity
                  diff:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff
                  approve:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve
                  statuses:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses
                author:
                  username: example-username
                  display_name: Example Username
                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10
                  links:
                    self:
                      href: https://api.bitbucket.org/2.0/users/example-username
                    html:
                      href: https://bitbucket.org/example-username/
                    avatar:
                      href: https://bitbucket.org/account/example-username/avatar/
                  nickname: example-username
                  type: user
                  uuid: "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                close_source_branch: true
                reviewers: []
                id: 1
                destination:
                  commit:
                    type: commit
                    hash: 230269fdfabd
                    links:
                      self:
                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd
                      html:
                        href: https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd
                  branch:
                    name: master
                  repository:
                    full_name: example-username/bits_and_bobs
                    type: repository
                    name: bits_and_bobs
                    links:
                      self:
                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs
                      html:
                        href: https://bitbucket.org/example-username/bits_and_bobs
                      avatar:
                        href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python
                    uuid: "{7708d810-964c-403f-aa6d-4e949280d614}"
                comment_count: 0
                summary:
                  raw: Everything is awesome!
                  markup: markdown
                  html: <p>Everything is awesome!</p>
                  type: rendered
                source:
                  commit:
                    type: commit
                    hash: c184aab5708b
                    links:
                      self:
                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b
                      html:
                        href: https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b
                  branch:
                    name: branch_magnificent_internet
                  repository:
                    full_name: example-username/bits_and_bobs
                    type: repository
                    name: bits_and_bobs
                    links:
                      self:
                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs
                      html:
                        href: https://bitbucket.org/example-username/bits_and_bobs
                      avatar:
                        href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python
                    uuid: "{7708d810-964c-403f-aa6d-4e949280d614}"
                participants: []
                state: OPEN
                task_count: 0
                created_on: 2018-06-20T23:17:33.616037+00:00
                updated_on: 2018-06-20T23:17:33.616037+00:00
                reason: ""
                title: Change a cooperative standard to a smiling disease
        401:
          description: If the repository is private and the request was not authenticated.
          content: {}
        404:
          description: If the repository or pull request does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - pullrequest
  /repositories/{workspace}/{repo_slug}:
    get:
      tags:
        - Repositories
      summary: Returns the object describing this repository
      operationId: GetRepositoryDetail
      parameters:
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: {repository UUID}
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: {workspace UUID}
          required: true
          schema:
            type: string
      responses:
        200:
          description: The repository object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/repository"
              example:
                scm: git
                website: www.example.com
                has_wiki: false
                description: A repository for my bits and bobs
                language: python
                fork_policy: allow_forks
                links:
                  clone:
                    - href: https://bitbucket.org/example-username/bits_and_bobs.git
                      name: https
                    - href: git@bitbucket.org:example-username/bits_and_bobs.git
                      name: ssh
                  watchers:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers
                  branches:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches
                  tags:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags
                  commits:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits
                  downloads:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads
                  source:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src
                  html:
                    href: https://bitbucket.org/example-username/bits_and_bobs
                  avatar:
                    href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python
                  forks:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks
                  self:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs
                  pullrequests:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests
                name: bits_and_bobs
                created_on: 2018-06-20T23:17:33.616037+00:00
                mainbranch:
                  type: branch
                  name: master
                full_name: example-username/bits_and_bobs
                has_issues: false
                owner:
                  username: example-username
                  display_name: Example Username
                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10
                  links:
                    self:
                      href: https://api.bitbucket.org/2.0/users/example-username
                    html:
                      href: https://bitbucket.org/example-username/
                    avatar:
                      href: https://bitbucket.org/account/example-username/avatar/
                  nickname: example-username
                  type: user
                  uuid: "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                updated_on: 2018-06-20T23:17:33.616037+00:00
                size: 33348
                type: repository
                slug: bits_and_bobs
                is_private: true
                uuid: "{7708d810-964c-403f-aa6d-4e949280d614}"
        403:
          description:
            If the repository is private and the authenticated user does
            not have access to it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: If no repository exists at this location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - repository
    post:
      tags:
        - Repositories
      summary: Creates a new repository
      description: |-
        Creates a new repository.

        Note: In order to set the project for the newly created repository,
        pass in either the project key or the project UUID as part of the
        request body as shown in the examples below:

        ```
        $ curl -X POST -H "Content-Type: application/json" -d '{
            "scm": "git",
            "project": {
                "key": "MARS"
            }
        }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
        ```

        or

        ```
        $ curl -X POST -H "Content-Type: application/json" -d '{
            "scm": "git",
            "project": {
                "key": "{ba516952-992a-4c2d-acbd-17d502922f96}"
            }
        }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
        ```

        The project must be assigned for all repositories. If the project is not provided,
        the repository is automatically assigned to the oldest project in the workspace.

        Note: In the examples above, the workspace ID `teamsinspace`,
        and/or the repository name `hablanding` can be replaced by UUIDs.
      operationId: CreateNewRepository
      parameters:
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      requestBody:
        description: The repository that is to be created. Note that most object elements are optional. Elements "owner" and "full_name" are ignored as the URL implies them
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/repository"
        required: false
      responses:
        200:
          description: The newly created repository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/repository"
              example:
                scm: git
                website: www.example.com
                has_wiki: false
                description: A repository for my bits and bobs
                language: python
                fork_policy: allow_forks
                links:
                  clone:
                    - href: https://bitbucket.org/example-username/bits_and_bobs.git
                      name: https
                    - href: git@bitbucket.org:example-username/bits_and_bobs.git
                      name: ssh
                  watchers:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers
                  branches:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches
                  tags:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags
                  commits:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits
                  downloads:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads
                  source:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src
                  html:
                    href: https://bitbucket.org/example-username/bits_and_bobs
                  avatar:
                    href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python
                  forks:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks
                  self:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs
                  pullrequests:
                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests
                name: bits_and_bobs
                created_on: 2018-06-20T23:17:33.616037+00:00
                mainbranch:
                  type: branch
                  name: master
                full_name: example-username/bits_and_bobs
                has_issues: false
                owner:
                  username: example-username
                  display_name: Example Username
                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10
                  links:
                    self:
                      href: https://api.bitbucket.org/2.0/users/example-username
                    html:
                      href: https://bitbucket.org/example-username/
                    avatar:
                      href: https://bitbucket.org/account/example-username/avatar/
                  nickname: example-username
                  type: user
                  uuid: "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                updated_on: 2018-06-20T23:17:33.616037+00:00
                size: 33348
                type: repository
                slug: bits_and_bobs
                is_private: true
                uuid: "{7708d810-964c-403f-aa6d-4e949280d614}"
        400:
          description:
            If the input document was invalid, or if the caller lacks the
            privilege to create repositories under the targeted account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: If the request was not authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - repository:admin
      x-codegen-request-body-name: _body
    delete:
      tags:
        - Repositories
      summary: Deletes the repository
      description: |-
        Deletes the repository. This is an irreversible operation

        This does not affect its forks.
      operationId: DeleteRepository
      parameters:
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        204:
          description: Indicates successful deletion
        403:
          description: If the caller either does not have admin access to the repository or the repository is set to read-only.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: If the repository does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - repository:delete
  /repositories/{workspace}/{repo_slug}/issues/{issue_id}:
    get:
      tags:
        - Issue tracker
      summary: Returns the specified issue
      operationId: getIssueByID
      parameters:
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        200:
          description: The issue object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/issue"
        403:
          description: When the authenticated user isn't authorized to access the issue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: The specified repository or issue does not exist or does not have the issue tracker enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        410:
          description: The specified issue is unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue
    delete:
      tags:
        - Issue tracker
      summary: Deletes the specified issue
      description: |-
        Deletes the specified issue. This requires write access to the repository
      operationId: DeleteIssue
      parameters:
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        200:
          description: The issue object
        403:
          description: When the authenticated user isn't authorized to delete the issue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: The specified repository or issue does not exist or does not have the issue tracker enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue:write
  /repositories/{workspace}/{repo_slug}/issues:
    get:
      tags:
        - Issue tracker
      summary: Returns the issues in the issue tracker
      operationId: ListIssues
      parameters:
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: Query string to narrow down the response as  https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering
          schema:
            type: string
        - name: sort
          in: query
          description: Field by which the results should be sorted as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering
          schema:
            type: string
      responses:
        200:
          description: A paginated list of the issues matching any filter criteria that were provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated_issues"
        404:
          description: The specified repository does not exist or does not have the issue tracker enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue
    post:
      tags:
        - Issue tracker
      summary: Creates a new issue
      description: |-
        Creates a new issue.

        This call requires authentication. Private repositories or private
        issue trackers require the caller to authenticate with an account that
        has appropriate authorization.

        The authenticated user is used for the issue's `reporter` field.
      operationId: CreateIssue
      parameters:
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      requestBody:
        description: The new issue. The only required element is `title`. All other elements can be omitted from the body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/issue"
        required: true
      responses:
        201:
          description: The newly created issue
          headers:
            Location:
              description: The (absolute) URL of the newly created issue
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/issue"
        401:
          description: When the request wasn't authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        403:
          description: When the authenticated user isn't authorized to create the issue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: The specified repository does not exist or does not have the issue tracker enabled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue:write
      x-codegen-request-body-name: _body
  /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments:
    get:
      tags:
        - Issue tracker
      summary: Returns a list of all comments on an issue
      description: |-
        Returns a paginated list of all comments that were made on the
        specified issue.

        The default sorting is oldest to newest and can be overridden with
        the `sort` query parameter.
      operationId: listComments
      parameters:
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        200:
          description: A paginated list of issue comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paginated_issue_comments"
      security:
        - oauth2:
            - issue
    post:
      tags:
        - Issue tracker
      summary: Creates a new issue comment
      description: |-
        Creates a new issue comment.

        ```
        $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \
          -X POST -u evzijst \
          -H 'Content-Type: application/json' \
          -d '{"content": {"raw": "Lorem ipsum."}}'
        ```
      operationId: CreateNewIssueComment
      parameters:
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      requestBody:
        description: The new issue comment object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/issue_comment"
        required: true
      responses:
        201:
          description: The newly created comment
          headers:
            Location:
              description: The location of the newly issue comment
              schema:
                type: string
        400:
          description:
            "If the input was invalid, or if the comment being created
            is detected as spam "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue:write
      x-codegen-request-body-name: _body
  /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}:
    get:
      tags:
        - Issue tracker
      summary: Returns the specified issue comment object
      operationId: getCommentByID
      parameters:
        - name: comment_id
          in: path
          description: The id of the comment
          required: true
          schema:
            type: integer
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        200:
          description: The issue comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/issue_comment"
      security:
        - oauth2:
            - issue
    put:
      tags:
        - Issue tracker
      summary: Updates the content of the specified issue comment
      description: |-
        Updates the content of the specified issue comment. Note that only
        the `content.raw` field can be modified.

        ```
        $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \
          -X PUT -u evzijst \
          -H 'Content-Type: application/json' \
          -d '{"content": {"raw": "Lorem ipsum."}'
        ```
      operationId: UpdateComment
      parameters:
        - name: comment_id
          in: path
          description: The id of the comment
          required: true
          schema:
            type: integer
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      requestBody:
        description: The updated comment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/issue_comment"
        required: true
      responses:
        200:
          description: The updated issue comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/issue_comment"
        400:
          description:
            "If the input was invalid, or if the update to the comment
            is detected as spam "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - issue:write
      x-codegen-request-body-name: _body
    delete:
      tags:
        - Issue tracker
      summary: Deletes the specified comment
      operationId: DeleteComment
      parameters:
        - name: comment_id
          in: path
          description: The id of the comment
          required: true
          schema:
            type: integer
        - name: issue_id
          in: path
          description: The issue id
          required: true
          schema:
            type: string
        - name: repo_slug
          in: path
          description: |
            This can either be the repository slug or the UUID of the repository
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID
          required: true
          schema:
            type: string
      responses:
        204:
          description: Indicates successful deletion
      security:
        - oauth2:
            - issue:write
      x-codegen-request-body-name: _body
  /workspaces/{workspace}:
    get:
      tags:
        - Workspaces
      summary: Returns the requested workspace
      operationId: getWorkSpaceByID
      parameters:
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID
          required: true
          schema:
            type: string
      responses:
        200:
          description: The workspace.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workspace"
        404:
          description: If no workspace exists for the specified name or UUID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2: []
  /workspaces/{workspace}/projects/{project_key}:
    get:
      tags:
        - Projects
        - Workspaces
      summary: Returns the requested project
      operationId: getProjectByProjectKey
      parameters:
        - name: project_key
          in: path
          description: |
            The project in question. This is the actual `key` assigned to the project
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID
          required: true
          schema:
            type: string
      responses:
        200:
          description: The project that is part of a workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        401:
          description: The request wasn't authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        403:
          description: The requesting user isn't authorized to access the project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: A project isn't hosted at this location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - project
    put:
      tags:
        - Projects
      summary: Creates or Updates a project
      description: |-
        Since this endpoint can be used to both update and to create a
        project, the request body depends on the intent.

        ### Creation

        See the POST documentation for the project collection for an
        example of the request body.

        Note: The `key` should not be specified in the body of request
        (since it is already present in the URL). The `name` is required,
        everything else is optional.

        ### Update

        See the POST documentation for the project collection for an
        example of the request body.

        Note: The key is not required in the body (since it is already in
        the URL). The key may be specified in the body, if the intent is
        to change the key itself. In such a scenario, the location of the
        project is changed and is returned in the `Location` header of the
        response.
      operationId: createOrUpdateProject
      parameters:
        - name: project_key
          in: path
          description: |
            The project in question. This is the actual `key` assigned to the project.
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID
          required: true
          schema:
            type: string
      requestBody:
        description: The project object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/project"
        required: true
      responses:
        200:
          description: The existing project is has been updated
          headers:
            Location:
              description: |-
                The location of the project. This header is only provided when the project key is updated
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        201:
          description: A new project has been created
          headers:
            Location:
              description: The location of the newly created project
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        403:
          description:
            The requesting user isn't authorized to update or create the
            project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description:
            A workspace doesn't exist at the location. Note that the project's
            absence from this location doesn't raise a 404, since a PUT at a non-existent
            location can be used to create a new project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - project:write
      x-codegen-request-body-name: _body
    delete:
      tags:
        - Projects
      summary: Deletes a project.
      description: |-
        Deletes this project. This is an irreversible operation.

        You cannot delete a project that still contains repositories.
        To delete the project, [delete](../../../repositories/%7Bworkspace%7D/%7Brepo_slug%7D#delete)
        or transfer the repositories first.

        Example:
        ```
        $ curl -X DELETE https://api.bitbucket.org/2.0/bbworkspace1/PROJ
        ```
      operationId: deleteProject
      parameters:
        - name: project_key
          in: path
          description: |
            The project in question. This is the actual `key` assigned
            to the project.
          required: true
          schema:
            type: string
        - name: workspace
          in: path
          description: |
            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful deletion.
        403:
          description:
            The requesting user isn't authorized to delete the project
            or the project isn't empty.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: A project isn't hosted at this location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - oauth2:
            - project:write
components:
  schemas:
    paginated_repositories:
      title: Paginated Repositories
      type: object
      properties:
        size:
          minimum: 0
          type: integer
          description: Total number of objects in the response. This is an optional
            element that is not provided in all responses, as it can be expensive
            to compute.
        page:
          minimum: 1
          type: integer
          description: Page number of the current results. This is an optional element that is not provided in all responses.
        pagelen:
          minimum: 1
          type: integer
          description: Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
        next:
          type: string
          description: Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
          format: uri
        previous:
          type: string
          description: Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
          format: uri
        values:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/repository'
      description: A paginated list of repositories.
    comment:
      allOf:
        - title: Comment
          type: object
          properties:
            id:
              type: integer
              description: The ID of the comment
            created_on:
              type: string
              format: date-time
              description: The created date of the comment
            updated_on:
              type: string
              format: date-time
              nullable: true
              description: The updated date of the comment
            content:
              $ref: "#/components/schemas/content"
            user:
              $ref: "#/components/schemas/user"
            deleted:
              type: boolean
              description: Indicates whether the comment is deleted
            parent:
              $ref: "#/components/schemas/comment"
            inline:
              $ref: "#/components/schemas/inline"
            links:
              $ref: "#/components/schemas/links"
          description:
            The base type for all comments. This type should be considered abstract. Each of the "commentable" resources defines its own subtypes (e.g.`issue_comment`).
    pullrequest_commit:
      title: Pull Request Commit
      type: object
      properties:
        hash:
          pattern: "[0-9a-f]{7,}?"
          type: string
    inline:
      description: The comment's anchor line detail
      required:
        - path
      type: object
      properties:
        to:
          minimum: 1
          type: integer
          description: The comment's anchor line in the new version of the file.
            If the 'from' line is also provided, this value will be removed.
        from:
          minimum: 1
          type: integer
          description: The comment's anchor line in the old version of the file.
        path:
          type: string
          description: The path of the file this comment is anchored to.
    link:
      title: Link
      type: object
      properties:
        href:
          type: string
          format: uri
        name:
          type: string
      description: A link to a resource related to this object.
    clone:
      type: array
      items:
        $ref: "#/components/schemas/link"
    pullrequest_branch:
      title: Pull Request Branch
      type: object
      properties:
        name:
          type: string
        merge_strategies:
          type: array
          description:
            Available merge strategies, when this endpoint is the destination
            of the pull request
          items:
            type: string
            enum:
              - merge_commit
              - squash
              - fast_forward
        default_merge_strategy:
          type: string
          description:
            The default merge strategy, when this endpoint is the destination
            of the pull request
    links:
      title: Links
      type: object
      description: links to a resource related to comment object.
      properties:
        self:
          $ref: "#/components/schemas/link"
        html:
          $ref: "#/components/schemas/link"
        code:
          $ref: "#/components/schemas/link"
        commits:
          $ref: "#/components/schemas/link"
        approve:
          $ref: "#/components/schemas/link"
        diff:
          $ref: "#/components/schemas/link"
        diffstat:
          $ref: "#/components/schemas/link"
        comments:
          $ref: "#/components/schemas/link"
        activity:
          $ref: "#/components/schemas/link"
        merge:
          $ref: "#/components/schemas/link"
        decline:
          $ref: "#/components/schemas/link"
        name:
          type: string
        avatar:
          $ref: "#/components/schemas/link"
        followers:
          $ref: "#/components/schemas/link"
        following:
          $ref: "#/components/schemas/link"
        repositories:
          $ref: "#/components/schemas/link"
        pullrequests:
          $ref: "#/components/schemas/link"
        forks:
          $ref: "#/components/schemas/link"
        watchers:
          $ref: "#/components/schemas/link"
        downloads:
          $ref: "#/components/schemas/link"
        clone:
          $ref: "#/components/schemas/clone"
        hooks:
          $ref: "#/components/schemas/link"
        attachments:
          $ref: "#/components/schemas/link"
        watch:
          $ref: "#/components/schemas/link"
        vote:
          $ref: "#/components/schemas/link"
        members:
          $ref: "#/components/schemas/link"
        owners:
          $ref: "#/components/schemas/link"
        projects:
          $ref: "#/components/schemas/link"
        snippets:
          $ref: "#/components/schemas/link"
    title:
      type: object
      properties:
        raw:
          type: string
          description: The text as it was typed by a user
        markup:
          type: string
          description: The type of markup language the raw content is to be interpreted in
          enum:
            - markdown
            - creole
            - plaintext
        html:
          type: string
          description: The user's content rendered as HTML
    description:
      type: object
      properties:
        raw:
          type: string
          description: The text as it was typed by a user
        markup:
          type: string
          description: The type of markup language the raw content is to be interpreted in.
          enum:
            - markdown
            - creole
            - plaintext
        html:
          type: string
          description: The user's content rendered as HTML
    reason:
      type: object
      properties:
        raw:
          type: string
          description: The text as it was typed by a user
        markup:
          type: string
          description: The type of markup language the raw content is to be interpreted in.
          enum:
            - markdown
            - creole
            - plaintext
        html:
          type: string
          description: The user's content rendered as HTML
    rendered:
      title: Rendered Pull Request Markup
      type: object
      properties:
        title:
          $ref: "#/components/schemas/title"
        description:
          $ref: "#/components/schemas/description"
        reason:
          $ref: "#/components/schemas/reason"
      description: User provided pull request text, interpreted in a markup language and rendered in HTML
    summary:
      type: object
      description: The summary of the pull request
      properties:
        raw:
          type: string
          description: The text as it was typed by a user
        markup:
          type: string
          description: The type of markup language the raw content is to be interpreted in.
          enum:
            - markdown
            - creole
            - plaintext
        html:
          type: string
          description: The user's content rendered as HTML
    merge_commit:
      title: Pull Request Commit
      type: object
      description: The pull request commit
      properties:
        hash:
          pattern: "[0-9a-f]{7,}?"
          type: string
    issue_comment:
      allOf:
        - $ref: "#/components/schemas/comment"
        - title: Issue Comment
          type: object
          properties:
            issue:
              $ref: "#/components/schemas/issue"
          description: A issue comment.
    paginated_issue_comments:
      title: Paginated Issue Comments
      type: object
      properties:
        size:
          minimum: 0
          type: integer
          description:
            Total number of objects in the response. This is an optional
            element that is not provided in all responses, as it can be expensive
            to compute
        page:
          minimum: 1
          type: integer
          description:
            Page number of the current results. This is an optional element
            that is not provided in all responses
        pagelen:
          minimum: 1
          type: integer
          description:
            Current number of objects on the existing page. The default
            value is 10 with 100 being the maximum allowed value. Individual APIs
            may enforce different values
        next:
          type: string
          description:
            Link to the next page if it exists. The last page of a collection
            does not have this value. Use this link to navigate the result set and
            refrain from constructing your own URLs
          format: uri
        previous:
          type: string
          description:
            Link to previous page if it exists. A collections first page
            does not have this value. This is an optional element that is not provided
            in all responses. Some result sets strictly support forward navigation
            and never provide previous links. Clients must anticipate that backwards
            navigation is not always available. Use this link to navigate the result
            set and refrain from constructing your own URLs
          format: uri
        values:
          description: An array of issue comment objects returned by the operation
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/issue_comment"
      description: A paginated list of issue comments
    workspace:
      allOf:
        - title: Workspace
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            uuid:
              type: string
              description: The workspace's immutable ID
            name:
              type: string
              description: The name of the workspace
            slug:
              type: string
              description: The short label that identifies this workspace
            is_private:
              type: boolean
              description: |-
                Indicates whether the workspace is publicly accessible, or whether it is
                private to the members and consequently only visible to members.
                Note that private workspaces cannot contain public repositories
            created_on:
              type: string
              format: date-time
              description: The created date/time of the workspace
            updated_on:
              type: string
              format: date-time
              description: The last updated date/time of the workspace
          description: |-
            A Bitbucket workspace.
                        Workspaces are used to organize repositories
    pullrequest_endpoint:
      title: Pull Request Endpoint
      type: object
      properties:
        repository:
          $ref: "#/components/schemas/repository"
        branch:
          $ref: "#/components/schemas/pullrequest_branch"
        commit:
          $ref: "#/components/schemas/pullrequest_commit"
    pullrequest:
      allOf:
        - title: Pull Request
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            id:
              type: integer
              description: The pull request's unique ID. Note that pull request IDs are only unique within their associated repository
            title:
              type: string
              description: Title of the pull request
            rendered:
              $ref: "#/components/schemas/rendered"
            summary:
              $ref: "#/components/schemas/summary"
            state:
              type: string
              description: The pull request's current status
              enum:
                - MERGED
                - SUPERSEDED
                - OPEN
                - DECLINED
            author:
              $ref: "#/components/schemas/account"
            source:
              $ref: "#/components/schemas/pullrequest_endpoint"
            destination:
              $ref: "#/components/schemas/pullrequest_endpoint"
            merge_commit:
              $ref: "#/components/schemas/merge_commit"
            comment_count:
              minimum: 0
              type: integer
              description: The number of comments for a specific pull request
            task_count:
              minimum: 0
              type: integer
              description: The number of open tasks for a specific pull request
            close_source_branch:
              type: boolean
              description: A boolean flag indicating if merging the pull request closes the source branch
            closed_by:
              $ref: "#/components/schemas/account"
            reason:
              type: string
              description: Explains why a pull request was declined. This field is only applicable to pull requests in rejected state
            created_on:
              type: string
              description: The ISO8601 timestamp the request was created
              format: date-time
            updated_on:
              type: string
              description: The ISO8601 timestamp the request was last updated
              format: date-time
            reviewers:
              type: array
              description:
                The list of users that were added as reviewers on this pull request when it was created.
                For performance reasons, the API only includes this list on a pull request's `self` URL.
              items:
                $ref: "#/components/schemas/account"
            participants:
              type: array
              description: The list of users that are collaborating on this
              items:
                $ref: "#/components/schemas/participant"
          description: A pull request object
    component:
      allOf:
        - title: Component
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            name:
              type: string
              description: The name of the component
            id:
              type: integer
              description: The ID of the component
          description: A component as defined in a repository's issue tracker
    version:
      allOf:
        - title: Version
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            name:
              type: string
              description: The name of the version
            id:
              type: integer
              description: The ID of the version
          description: A version as defined in a repository's issue tracker
    milestone:
      allOf:
        - title: Milestone
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            name:
              type: string
              description: The name of the milestone
            id:
              type: integer
              description: The ID of the milestone
          description: A milestone as defined in a repository's issue tracker
    user:
      allOf:
        - $ref: "#/components/schemas/account"
        - title: User
          type: object
          properties:
            is_staff:
              type: boolean
              description: Indicates whether the user represents staff
            account_id:
              type: string
              description: The user's Atlassian account ID
          description: A user object
    participant:
      allOf:
        - title: Participant
          type: object
          properties:
            user:
              $ref: "#/components/schemas/user"
            role:
              type: string
              description: The type of the participant
              enum:
                - PARTICIPANT
                - REVIEWER
            approved:
              type: boolean
              description: Indicates whether participant is approved
            state:
              type: string
              description: The state of the participant
              enum:
                - approved
                - changes_requested
            participated_on:
              type: string
              description:
                The ISO8601 timestamp of the participant's action. For approvers,
                this is the time of their approval. For commenters and pull request
                reviewers who are not approvers, this is the time they last commented,
                or null if they have not commented.
              format: date-time
          description:
            Object describing a user's role on resources like commits or
            pull requests.
    author:
      allOf:
        - title: Author
          type: object
          properties:
            raw:
              type: string
              description:
                The raw author value from the repository. This may be the
                only value available if the author does not match a user in Bitbucket
            user:
              $ref: "#/components/schemas/account"
          description: The author of a change in a repository
    base_commit:
      allOf:
        - title: Base Commit
          type: object
          properties:
            hash:
              pattern: "[0-9a-f]{7,}?"
              type: string
              description: The hash value of the base commit
            date:
              type: string
              format: date-time
              description: The date of the base commit
            author:
              $ref: "#/components/schemas/author"
            message:
              type: string
              description: The message of the base commit
            summary:
              $ref: "#/components/schemas/summary"
            parents:
              minItems: 0
              type: array
              description: The parent base commit
              items:
                $ref: "#/components/schemas/base_commit"
          description: The common base type for both repository and snippet commits
    commit:
      allOf:
        - $ref: "#/components/schemas/base_commit"
        - title: Commit
          type: object
          properties:
            repository:
              $ref: "#/components/schemas/repository"
            participants:
              minItems: 0
              type: array
              description: The participants of the commit
              items:
                $ref: "#/components/schemas/participant"
          description: A repository commit object.
    ref:
      title: Ref
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the ref object
        links:
          $ref: "#/components/schemas/links"
        name:
          type: string
          description: The name of the ref.
        target:
          $ref: "#/components/schemas/commit"
      description: A ref object, representing a branch or tag in a repository
    branch:
      allOf:
        - $ref: "#/components/schemas/ref"
        - title: Branch
          type: object
          properties:
            merge_strategies:
              type: array
              description: Available merge strategies for pull requests targeting this branch.
              items:
                type: string
                enum:
                  - merge_commit
                  - squash
                  - fast_forward
            default_merge_strategy:
              type: string
              description: The default merge strategy for pull requests targeting this branch.
          description: A branch object, representing a branch in a repository
    team:
      allOf:
        - $ref: "#/components/schemas/account"
        - title: Team
          type: object
          description: A team object.
      description: A team object.
    project:
      allOf:
        - title: Project
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            uuid:
              type: string
              description: The project's immutable id
            key:
              type: string
              description: The project's key.
            owner:
              $ref: "#/components/schemas/team"
            name:
              type: string
              description: The name of the project
            description:
              type: string
              description: The project description
            is_private:
              type: boolean
              description: Indicates whether the project is publicly accessible, or whether it is private to the team and consequently only visible to team members. Note that private projects cannot contain public repositories.
            created_on:
              type: string
              format: date-time
              description: The created date/time of the project
            updated_on:
              type: string
              format: date-time
              description: The last updated date/time of the project
          description: |-
            A Bitbucket project.
                        Projects are used by teams to organize repositories
    account:
      allOf:
        - title: Account
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            username:
              pattern: ^[a-zA-Z0-9_\-]+$
              type: string
              description: Username of the account
            nickname:
              type: string
              description:
                Account name defined by the owner. Should be used instead
                of the "username" field. Note that "nickname" cannot be used in place
                of "username" in URLs and queries, as "nickname" is not guaranteed to
                be unique.
            account_status:
              type: string
              description:
                The status of the account. Currently the only possible value
                is "active", but more values may be added in the future
            display_name:
              type: string
              description: Display name of the account
            website:
              type: string
              description: Website of the account
            created_on:
              type: string
              format: date-time
              description: The created date of the account
            uuid:
              type: string
              description: The UUID of the account
            has_2fa_enabled:
              type: boolean
              description: Indicates whether two factor authentication is on
          description: An account object.
    repository:
      allOf:
        - title: Repository
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            uuid:
              type: string
              description:
                The repository's immutable id. This can be used as a substitute
                for the slug segment in URLs. Doing this guarantees your URLs will survive
                renaming of the repository by its owner, or even transfer of the repository
                to a different user
            full_name:
              type: string
              description:
                The concatenation of the repository owner's username and
                the slugified name, e.g. "evzijst/interruptingcow". This is the same
                string used in Bitbucket URLs
            is_private:
              type: boolean
              description: Indicates whether the repository is private
            parent:
              $ref: "#/components/schemas/repository"
            scm:
              type: string
              description: source control
              enum:
                - git
            owner:
              $ref: "#/components/schemas/account"
            name:
              type: string
              description: The name of the repository
            description:
              type: string
              description: The description of the repository
            created_on:
              type: string
              format: date-time
              description: The created data/time of the repository
            updated_on:
              type: string
              format: date-time
              description: The last updated date/time of the repository
            size:
              type: integer
              description: The size of the repository
            language:
              type: string
              description: The language of the repository
            has_issues:
              type: boolean
              description: Indicates whether repository includes issues
            has_wiki:
              type: boolean
              description: Indicates whether repository has a wiki
            fork_policy:
              type: string
              description: Controls the rules for forking this repository. ()allow_forks)-unrestricted forking (no_public_forks) - restrict forking to private forks (forks cannot be made public later) (no_forks) -deny all forking
              enum:
                - allow_forks
                - no_public_forks
                - no_forks
            project:
              $ref: "#/components/schemas/project"
            mainbranch:
              $ref: "#/components/schemas/branch"
          description: A Bitbucket repository
    paginated_pullrequests:
      title: Paginated Pull Requests
      type: object
      properties:
        size:
          minimum: 0
          type: integer
          description: Total number of objects in the response. This is an optional
            element that is not provided in all responses, as it can be expensive
            to compute.
        page:
          minimum: 1
          type: integer
          description: Page number of the current results. This is an optional element
            that is not provided in all responses.
        pagelen:
          minimum: 1
          type: integer
          description: Current number of objects on the existing page. The default
            value is 10 with 100 being the maximum allowed value. Individual APIs
            may enforce different values.
        next:
          type: string
          description: Link to the next page if it exists. The last page of a collection
            does not have this value. Use this link to navigate the result set and
            refrain from constructing your own URLs.
          format: uri
        previous:
          type: string
          description: Link to previous page if it exists. A collections first page
            does not have this value. This is an optional element that is not provided
            in all responses. Some result sets strictly support forward navigation
            and never provide previous links. Clients must anticipate that backwards
            navigation is not always available. Use this link to navigate the result
            set and refrain from constructing your own URLs.
          format: uri
        values:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/pullrequest'
      description: A paginated list of pullrequests.
    issue:
      allOf:
        - title: Issue
          type: object
          properties:
            links:
              $ref: "#/components/schemas/links"
            id:
              type: integer
              description: The ID of the issue
            repository:
              $ref: "#/components/schemas/repository"
            title:
              type: string
              description: The title of the issue
            reporter:
              $ref: "#/components/schemas/user"
            assignee:
              $ref: "#/components/schemas/user"
            created_on:
              type: string
              format: date-time
              description: The created date/time of the issue
            updated_on:
              type: string
              format: date-time
              nullable: true
              description: The last updated date/time of the issue
            edited_on:
              type: string
              format: date-time
              description: The last edited date/time of the issue
              nullable: true
            state:
              type: string
              description: The state of the issue
              enum:
                - new
                - open
                - resolved
                - on hold
                - invalid
                - duplicate
                - wontfix
                - closed
            kind:
              type: string
              description: The kind of the issue
              enum:
                - bug
                - enhancement
                - proposal
                - task
            priority:
              type: string
              description: The priority level of the issue
              enum:
                - trivial
                - minor
                - major
                - critical
                - blocker
            milestone:
              $ref: "#/components/schemas/milestone"
            version:
              $ref: "#/components/schemas/version"
            component:
              $ref: "#/components/schemas/component"
            votes:
              type: integer
              description: The number of votes
            content:
              $ref: "#/components/schemas/content"
          description: An issue.
    content:
      type: object
      description: The content of the issue
      properties:
        raw:
          type: string
          description: The text as it was typed by a user.
        markup:
          type: string
          description: The type of markup language the raw content is to be interpreted in.
          enum:
            - markdown
            - creole
            - plaintext
        html:
          type: string
          description: The user's content rendered as HTML
    errorDetail:
      required:
        - message
      type: object
      description: The error detail
      properties:
        message:
          type: string
        detail:
          type: string
    error:
      title: Error
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the error
        error:
          $ref: "#/components/schemas/errorDetail"
      description:
        Base type for most resource objects. It defines the common `type`
        element that identifies an object's type. It also identifies the element as
        Swagger's `discriminator`.
    paginated_issues:
      title: Paginated Issues
      type: object
      properties:
        size:
          minimum: 0
          type: integer
          description:
            Total number of objects in the response. This is an optional
            element that is not provided in all responses, as it can be expensive
            to compute
        page:
          minimum: 1
          type: integer
          description:
            Page number of the current results. This is an optional element
            that is not provided in all responses
        pagelen:
          minimum: 1
          type: integer
          description:
            Current number of objects on the existing page. The default
            value is 10 with 100 being the maximum allowed value. Individual APIs
            may enforce different values
        next:
          type: string
          description:
            Link to the next page if it exists. The last page of a collection
            does not have this value. Use this link to navigate the result set and
            refrain from constructing your own URLs
          format: uri
        previous:
          type: string
          description:
            Link to previous page if it exists. A collections first page
            does not have this value. This is an optional element that is not provided
            in all responses. Some result sets strictly support forward navigation
            and never provide previous links. Clients must anticipate that backwards
            navigation is not always available. Use this link to navigate the result
            set and refrain from constructing your own URLs
          format: uri
        values:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/issue"
          description: An array of issues
      description: A paginated list of issues.
  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth 2 as per [RFC-6749](https://tools.ietf.org/html/rfc6749).
      flows:
        authorizationCode:
          authorizationUrl: https://bitbucket.org/site/oauth2/authorize
          tokenUrl: https://bitbucket.org/site/oauth2/access_token
          scopes:
            wiki: Read and modify your repositories' wikis
            pullrequest:write: Read and modify your repositories and their pull requests
            pipeline:variable:
              Access your repositories' build pipelines and configure
              their variables
            project:write:
              Read and modify your workspace's project settings, and
              read and transfer repositories within your workspace's projects
            pipeline:write: Access and rerun your repositories' build pipelines
            snippet: Read your snippets
            repository:delete: Delete your repositories
            repository:write: Read and modify your repositories
            issue: Read your repositories' issues
            email: Read your account's primary email address
            repository: Read your repositories
            issue:write: Read and modify your repositories' issues
            webhook: Read and modify your repositories' webhooks
            pipeline: Access your repositories' build pipelines
            snippet:write: Read and modify your snippets
            account: Read your account information
            repository:admin: Administer your repositories
            pullrequest: Read your repositories and their pull requests
            project:
              Read your workspace's project settings and read repositories
              contained within your workspace's projects
            team: Read your team membership information
            team:write: Read and modify your team membership information
            account:write: Read and modify your account information
