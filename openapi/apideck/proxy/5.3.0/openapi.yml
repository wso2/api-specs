openapi: 3.0.3
servers:
  - description: Production server
    url: https://unify.apideck.com
info:
  x-ballerina-display:
    label: Apideck Proxy
    iconPath: "icon.png"
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: >
    This is a generated connector from [Apideck Proxy API v5.3.0](https://developers.apideck.com/apis/proxy/reference) OpenAPI specification.

    You can use this API to access all Proxy API endpoints.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials.

    Unify API accounts have sandbox mode and live mode API keys. To change modes just use the appropriate key to get a live or test object. 

    You can find your API keys on the unify settings of your Apideck app.Your Apideck application_id can also be found on the same page.

    Obtain API keys following [this guide](https://developers.apideck.com/apis/proxy/reference#section/Authorization).
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Proxy API
  version: 5.3.0
  x-apideck-api: proxy
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/proxy.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: proxy
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
    applicationId: []
tags:
  - description: ""
    name: Execute
paths:
  /proxy:
    delete:
      description: |
        Proxies a downstream DELETE request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: deleteProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: DELETE
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    get:
      description: |
        Proxies a downstream GET request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: getProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: GET
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    patch:
      description: |
        Proxies a downstream PATCH request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: patchProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          application/json:
            schema:
              example:
                addresses:
                  - address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    country: US
                    label: business
                    state: CA
                    zipcode: "94103"
                contacts:
                  - emails:
                      - email: gob@example.com
                        type: office
                    name: Gob
                    phones:
                      - phone: "8004445555"
                        type: office
                    title: Sr. Vice President
                description: Best. Show. Ever.
                name: Bluth Company
                url: http://thebluthcompany.tumblr.com/
              properties: {}
              type: object
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: PATCH
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    post:
      description: |
        Proxies a downstream POST request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: postProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          application/json:
            schema:
              example:
                addresses:
                  - address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    country: US
                    label: business
                    state: CA
                    zipcode: "94103"
                contacts:
                  - emails:
                      - email: gob@example.com
                        type: office
                    name: Gob
                    phones:
                      - phone: "8004445555"
                        type: office
                    title: Sr. Vice President
                description: Best. Show. Ever.
                name: Bluth Company
                url: http://thebluthcompany.tumblr.com/
              properties: {}
              type: object
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: POST
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
    put:
      description: |
        Proxies a downstream PUT request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      operationId: putProxy
      parameters:
        - $ref: "#/components/parameters/x-apideck-consumer-id"
        - $ref: "#/components/parameters/x-apideck-app-id"
        - $ref: "#/components/parameters/x-apideck-service-id"
        - $ref: "#/components/parameters/x-apideck-downstream-url"
        - $ref: "#/components/parameters/x-apideck-downstream-authorization"
      requestBody:
        content:
          application/json:
            schema:
              example:
                addresses:
                  - address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    country: US
                    label: business
                    state: CA
                    zipcode: "94103"
                contacts:
                  - emails:
                      - email: gob@example.com
                        type: office
                    name: Gob
                    phones:
                      - phone: "8004445555"
                        type: office
                    title: Sr. Vice President
                description: Best. Show. Ever.
                name: Rich Company
                url: http://therichcompany.tumblr.com/
              properties: {}
              type: object
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ProxyError"
      security:
        - apiKey: []
      summary: PUT
      tags:
        - Execute
      x-graphql-exclude: true
      x-sdk-exclude: true
components:
  parameters:
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: true
        type: boolean
    x-apideck-app-id:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    x-apideck-consumer-id:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    x-apideck-downstream-authorization:
      description: Downstream authorization header. This will skip the Vault token injection.
      example: Bearer XXXXXXXXXXXXXXXXX
      in: header
      name: x-apideck-downstream-authorization
      required: false
      schema:
        type: string
    x-apideck-downstream-method:
      description: Downstream method. If not provided the upstream method will be inherited,
      example: GET
      in: header
      name: x-apideck-downstream-method
      required: false
      schema:
        type: string
    x-apideck-downstream-url:
      description: Downstream URL
      example: https://api.close.com/api/v1/lead
      in: header
      name: x-apideck-downstream-url
      required: true
      schema:
        type: string
    x-apideck-service-id:
      description: Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.
      example: close
      in: header
      name: x-apideck-service-id
      required: true
      schema:
        type: string
  responses:
    Ok:
      content:
        application/json:
          example: {}
          schema: {}
      description: Ok
    ProxyError:
      content:
        application/json:
          schema: {}
      description: Proxy error
      headers:
        x-apideck-downstream-error:
          schema:
            description: Indicates if the error returned in the body is from the downstream
            type: boolean
    Unauthorized:
      content:
        application/json:
          schema:
            properties:
              detail:
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: Failed to generate valid JWT Session. Verify applicationId is correct
                type: string
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unauthorized
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Unauthorized Request
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#unauthorizederror
                type: string
              status_code:
                description: HTTP status code
                example: 401
                type: number
              type_name:
                description: The type of error returned
                example: UnauthorizedError
                type: string
      description: Unauthorized
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      x-ballerina-apikey-description: "Provide your API key as `Authorization`. Eg: `{\"Authorization\" : \"<API key>\"}`"
      type: apiKey
    # applicationId:
    #   description: The ID of your Unify application
    #   in: header
    #   name: x-apideck-app-id
    #   type: apiKey
