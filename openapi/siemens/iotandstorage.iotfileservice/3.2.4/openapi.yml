openapi: 3.0.1
info:
  title: IoT File API
  description: >
    This is a generated connector from [Siemens IoT File Service API](https://developer.mindsphere.io/apis/core-identitymanagement/api-identitymanagement-overview.html) OpenAPI Specification.
    
    The IoT File API enables storing and retrieving files for asset (entity) instances.
  version: 3.2.4
  x-visibility: external
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials. 

    Create a [Siemens MindSphere](https://siemens.mindsphere.io/en) account and
    obtain tokens by following [this
    guide](https://developer.mindsphere.io/concepts/concept-roles-scopes.html#iot-file-service)
  x-ballerina-display:
    label: Siemens IoT And Storage File Service
    iconPath: icon.png
paths:
  /files/{entityId}/{filepath}:
    get:
      tags:
        - File Service
      summary: read a file
      description: Read a file for the specified asset (entity) and path
      operationId: getFile
      parameters:
        - name: entityId
          in: path
          description: Id to instance of asset (entity)
          required: true
          schema:
            maxLength: 32
            minLength: 32
            pattern: '[a-f0-9]{32}'
            type: string
        - name: filepath
          in: path
          description: path of the file along with filename
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: etag of the latest version (not supported in this release)
          schema:
            type: integer
        - name: range
          in: header
          description: Part of a file to return in Bytes, eg bytes=200-600
          schema:
            maxLength: 32
            minLength: 1
            type: string
      responses:
        '200':
          description: file content
          headers:
            description:
              description: description of the file
              schema:
                type: string
            etag:
              description: etag of the file
              schema:
                type: integer
            timestamp:
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        '206':
          description: Partial Content of the file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        '304':
          description: not modfied
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/notmodified'
            application/json:
              schema:
                $ref: '#/components/schemas/notmodified'
        '401':
          description: unauthorized
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/unauthorized'
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: not found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/notfound'
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '416':
          description: Range Not Satisfiable
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/rangenotsatisfiable'
            application/json:
              schema:
                $ref: '#/components/schemas/rangenotsatisfiable'
        default:
          description: unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - fileservice:
            - iot.fil.r
    # put:
    #   tags:
    #     - File Service
    #   summary: write a file
    #   description: >
    #     Create or update a file for the specified asset (entity) and path, with
    #     the provided content.
    #   operationId: putFile
    #   parameters:
    #     - name: entityId
    #       in: path
    #       description: unique identifier of the asset (entity)
    #       required: true
    #       schema:
    #         maxLength: 32
    #         minLength: 32
    #         pattern: '[a-f0-9]{32}'
    #         type: string
    #     - name: filepath
    #       in: path
    #       description: url path of the file along with filename
    #       required: true
    #       schema:
    #         type: string
    #     - name: part
    #       in: query
    #       description: Part number to upload
    #       schema:
    #         maximum: 1000
    #         minimum: 1
    #         type: integer
    #     - name: upload
    #       in: query
    #       description: upload status to start, complete, and abort multi-part uploads
    #       schema:
    #         type: string
    #         enum:
    #           - start
    #           - complete
    #           - abort
    #     - name: If-Match
    #       in: header
    #       description: etag of the latest version for optimistic locking
    #       schema:
    #         type: integer
    #     - name: timestamp
    #       in: header
    #       description: file timestamp
    #       schema:
    #         type: string
    #         format: date-time
    #     - name: description
    #       in: header
    #       description: description of the file
    #       schema:
    #         maxLength: 100
    #         minLength: 1
    #         type: string
    #     - name: type
    #       in: header
    #       description: type of the file
    #       schema:
    #         maxLength: 191
    #         minLength: 1
    #         type: string
    #   requestBody:
    #     description: the file attached content
    #     content:
    #       application/octet-stream:
    #         schema:
    #           type: string
    #           format: binary
    #     required: true
    #   responses:
    #     '201':
    #       description: created
    #       headers:
    #         etag:
    #           description: etag of the file
    #           schema:
    #             type: integer
    #         Location:
    #           description: URL of the file
    #           schema:
    #             type: string
    #       content: {}
    #     '204':
    #       description: updated
    #       headers:
    #         etag:
    #           description: etag of the file
    #           schema:
    #             type: integer
    #         Location:
    #           description: URL of the file
    #           schema:
    #             type: string
    #       content: {}
    #     '400':
    #       description: bad request
    #       content:
    #         '*/*':
    #           schema:
    #             $ref: '#/components/schemas/badrequest'
    #     '401':
    #       description: unauthorized
    #       content:
    #         '*/*':
    #           schema:
    #             $ref: '#/components/schemas/unauthorized'
    #     '404':
    #       description: not found
    #       content:
    #         '*/*':
    #           schema:
    #             $ref: '#/components/schemas/notfound'
    #     '409':
    #       description: conflict
    #       content:
    #         '*/*':
    #           schema:
    #             $ref: '#/components/schemas/conflict'
    #     default:
    #       description: Unexpected error
    #       content:
    #         '*/*':
    #           schema:
    #             $ref: '#/components/schemas/error'
    #   security:
    #     - fileservice:
    #         - iot.fil.w
    #   x-codegen-request-body-name: file
    delete:
      tags:
        - File Service
      summary: delete a file
      description: Delete a file for the specified asset (entity) and path.
      operationId: deleteFile
      parameters:
        - name: entityId
          in: path
          description: unique identifier of the asset (entity)
          required: true
          schema:
            maxLength: 32
            minLength: 32
            pattern: '[a-f0-9]{32}'
            type: string
        - name: filepath
          in: path
          description: unique identifier of the file
          required: true
          schema:
            maxLength: 100
            minLength: 1
            type: string
      responses:
        '204':
          description: deleted
          content: {}
        '401':
          description: unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notfound'
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/error'
      security:
        - fileservice:
            - iot.fil.d
  /files/{entityId}:
    get:
      tags:
        - File Service
      summary: search files
      description: Search files for the specified asset (entity).
      operationId: searchFiles
      parameters:
        - name: entityId
          in: path
          description: asset (entity) instance id
          required: true
          schema:
            maxLength: 32
            minLength: 32
            pattern: '[a-f0-9]{32}'
            type: string
        - name: offset
          in: query
          description: number of files to skip
          schema:
            minimum: 0
            type: number
            format: integer
        - name: limit
          in: query
          description: maximum number of files to return (max 200)
          schema:
            maximum: 200
            minimum: 1
            type: integer
        - name: count
          in: query
          description: return total number of matching files
          schema:
            type: boolean
        - name: order
          in: query
          description: >-
            sort based on supported fields - see order syntax for more details
            (name, path, type, size, timestamp, created, updated)
          schema:
            type: string
        - name: filter
          in: query
          description: >-
            filter based on supported fields - see filter syntax for more
            details (name, path, type, size, timestamp, created, updated)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Total-Count:
              description: number of files matching the filter criteria
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/file'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - fileservice:
            - iot.fil.r
  /fileslist/{entityId}/{filepath}:
    get:
      tags:
        - File Service
      summary: list multi part uploads
      description: List multi part uploads
      operationId: getFileList
      parameters:
        - name: entityId
          in: path
          description: Id to instance of asset (entity)
          required: true
          schema:
            maxLength: 32
            minLength: 32
            pattern: '[a-f0-9]{32}'
            type: string
        - name: filepath
          in: path
          description: path of the file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: multi part list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/fileslist'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - fileservice:
            - iot.fil.r
  /files/deleteJobs:
    get:
      tags:
        - File Bulk Delete Jobs
      summary: get all bulk delete jobs
      description: get all bulk delete jobs submitted by tenant
      operationId: getDeleteJobs
      responses:
        '200':
          description: >
            return all bulk delete jobs submitted by the tenant

            1. <b>id</b>: Job Id created when bulk delete job is accepted

            2. <b>timestamp</b>: Timestamp when the job was created

            3. <b>status</b>: current status of the job. Possible values can be
            <br><b>[IN_PROGRESS, COMPLETED_WITH_ERRORS, COMPLETED, FAILED]</b>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteJobsResponse'
        '401':
          description: |
            <b>unauthorized</b>: Not Authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '429':
          description: |
            <b>TooManyRequests</b>: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
      security:
        - fileservice:
            - iot.fil.d
    post:
      tags:
        - File Bulk Delete Jobs
      summary: initiate job to delete all files for the given asset identifier
      description: >
        1. Delete all the files for a given asset identifier

        2. Files created or updated before the job submission are considered for
        delete operation.

        3. Supports single asset

        4. There can be only one job with status "IN_PROGRESS" for a given
        asset. HTTP Error 409 (duplicate request) will be thrown if more jobs
        are submitted for the same asset with IN_PROGRESS status.

        5. <i>timeFrom</i> and <i>timeTo</i> window should not exceed 90 days.

        6. If time range is provided, files are deleted whose updated time falls
        in between <i>timeFrom</i> and <i>timeTo</i> range. Time range is
        granular to second with format "yyyy-MM-dd'T'HH:mm:ss.SSS" => Time
        fields i.e. <i>timeFrom</i> & <i>timeTo</i> supports second level
        granularity with format "yyyy-MM-dd'T'HH:mm:ss.SSS"

        7. If time range is not provided, all the files created before 90 days
        of submission of delete job for given asset will be deleted.

        <br/>

        <b>**Using <i>timeFrom</i> and <i>timeTo</i> fields</b>

        - <i>timeFrom</i> values should be less than (<) <i>timeTo</i> values
        and <i>timeTo</i> values should be less than equal to (<=) deleteJob
        submission time

        - If only <i>timeFrom</i> is provided, files created within 90 days
        after that time are considered in delete job.

        - If only <i>timeTo</i> is provided, all the files created on or before
        90 days of that time are considered for deletion.

        - If <i>timeFrom</i> and <i>timeTo</i> is provided, then files created
        between the two are considered for deletion.

        - <i>timeFrom</i> and <i>timeTo</i> are inclusive
      operationId: submitDeleteJob
      requestBody:
        description: bulk delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkDeleteRequest'
        required: true
      responses:
        '202':
          description: bulk delete request has been accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkDeleteResponse'
        '400':
          description: |
            Bad request. Possible errors:
            <br>
            <table>
              <colgroup>
                <col span="1" style="width: 30%;">
                <col span="1" style="width: 70%;">
              </colgroup>
              <tr>
                <th align="left">Code Suffix</th>
                <th align="left">Message (parametrized)</th>
              </tr>
              <tr>
                <td>assetIdNullOrEmpty</td>
                <td>Asset id cannot be null or empty.</td>
              </tr>
              <tr>
                <td>invalidTimeRange</td>
                <td>timeFrom cannot be graeter than timeTo parameter</td>
              </tr>
              <tr>
                <td>timeRangeExceeded</td>
                <td>Time range greater than 90 days is not allowed</td>
              </tr>
              <tr>
                <td>futureDateNowAllowed</td>
                <td>timeFrom and timeTo parameter cannot be greater than current time.</td>
              </tr>
            </table>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '401':
          description: |
            <b>unauthorized</b>: Not Authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '409':
          description: |
            <b>duplicate request</b>: Request is already submitted for asset id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '429':
          description: |
            <b>TooManyRequests</b>: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
      security:
        - fileservice:
            - iot.fil.d
      x-codegen-request-body-name: bulk delete request
  /files/deleteJobs/{id}:
    get:
      tags:
        - File Bulk Delete Jobs
      summary: get the job status of bulk delete operation
      description: >
        1. Fetch the status of bulk delete jobs

        2. timeFrom and timeTo will be part of response if provided in request
        body while submitting the job.

        3. Status is provide for each asset

        4. Total files to be deleted is mapped against filesToBeDeleted

        5. Total files deleted successfully is mapped against filesDeleted

        6. Files in progress and failed are mapped against filesRemaining.

        7. Files in progress and failed can be differentiated by status.i.e, if
        status is IN_PROGRESS and filesRemaining is not zero then deletion is in
        progress for those files and if status is FAILED and filesRemaining in
        not zero that deletion if failed for those files.

        8. error field will be part of response only if there is some error
        while deleting the files.

        9. If path is not provided in delete jobs request then path value is
        considered as root by default and return value is going to be '/'.
      operationId: getDeleteJobStatus
      parameters:
        - name: id
          in: path
          description: Job Id of bulk delete operation
          required: true
          schema:
            maxLength: 32
            minLength: 32
            pattern: '[a-f0-9]{32}'
            type: string
      responses:
        '200':
          description: >
            return bulk delete job by job id submitted by the tenant

            1. <b>id</B>: Job Id created when bulk delete job is accepted

            2. <b>timestamp</b>: Timestamp when the job was created

            3. <b>status</b>: current status of the job. Possible values can
            be<br><b>[IN_PROGRESS, COMPLETED_WITH_ERRORS, COMPLETED, FAILED]</b>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkDeleteJobResponse'
        '401':
          description: |
            <b>unauthorized</b>: Not Authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '404':
          description: |
            <b>id not found</b>: specified JobId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
        '429':
          description: |
            <b>TooManyRequests</b>: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iotFileError'
      security:
        - fileservice:
            - iot.fil.d
components:
  schemas:
    unauthorized:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: Not authorized to access this resource.
    badrequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: The request is not valid.
    rangenotsatisfiable:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: Requested range not satisfiable
    notmodified:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: Resource not modified.
    notfound:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: Resource not found.
    conflict:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
          example: A newer resource version is available.
    error:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
    file:
      type: object
      properties:
        name:
          type: string
          example: filename
        path:
          type: string
          example: directory1
        type:
          type: string
          example: image
        size:
          type: integer
          format: int64
          example: 1048576
        timestamp:
          type: string
          format: date-time
          example: 2017-10-01T00:00:00.001Z
        created:
          type: string
          format: date-time
          example: 2017-10-01T00:00:00.001Z
        updated:
          type: string
          format: date-time
          example: 2017-10-01T00:00:00.001Z
        createdBy:
          type: string
          example: user ID
        updatedBy:
          type: string
          example: user ID
        description:
          type: string
          example: some description
        etag:
          type: integer
          example: 1
    fileslist:
      type: object
      properties:
        objectKey:
          type: string
          example: aznfriot/fdf4cc6a51e0411389020dcf8a9936c5/xyz1
        partNo:
          type: integer
          example: 1
        created:
          type: string
          format: date-time
          example: 2017-10-01T00:00:00.001Z
    bulkDeleteRequest:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/bulkDeleteAssetsArray'
    bulkDeleteAssetsArray:
      maxItems: 1
      minItems: 1
      type: array
      items:
        $ref: '#/components/schemas/bulkDeleteAsset'
    bulkDeleteAsset:
      required:
        - id
      type: object
      properties:
        id:
          maxLength: 32
          minLength: 32
          pattern: '[0-9a-f]+'
          type: string
          description: Unique identifier for asset instance
          example: 089336872ce342aba1a847f53d515dc7
        timeFrom:
          type: string
          description: >
            files created after this time are considered for deletion, If not
            provided, all the files created before submittion of job get
            deleted.

            UTC aligned date-time with ISO date format is supported.

            "2020-03-01Z"

            "2020-03-01T09Z"

            "2020-03-01T09:12Z"

            "2020-03-01T09:12:28Z"

            "2020-03-01T09:12:28.110Z"
          format: date-time
          example: 2020-03-01T09:12:28.110Z
        timeTo:
          type: string
          description: >
            files created before this time are considered for deletion, If not
            provided, all the files created before submittion of job get
            deleted. UTC aligned date-time with ISO date format is supported.

            UTC aligned date-time with ISO date format is supported.

            "2020-06-01Z"

            "2020-06-01T09Z"

            "2020-06-01T09:12Z"

            "2020-06-01T09:12:28Z"

            "2020-06-01T09:12:28.110Z"
          format: date-time
          example: 2020-06-01T09:12:28.110Z
    bulkDeleteResponse:
      required:
        - id
        - status
        - timestamp
      type: object
      properties:
        id:
          type: string
          description: unique Identifier for the delete job
          example: a87d8d68-9d6d-42f8-9eb9-8899fa90bb3f
        timestamp:
          type: string
          description: time when the delete job submitted
          format: date-time
          example: 2020-06-08T09:12:28.000Z
        status:
          type: string
          description: overall status of delete job
          enum:
            - IN_PROGRESS
            - COMPLETED_WITH_ERRORS
            - COMPLETED
            - FAILED
    deleteJobsResponse:
      type: object
      properties:
        deleteJobs:
          $ref: '#/components/schemas/bulkDeleteResponseArray'
    bulkDeleteResponseArray:
      type: array
      items:
        $ref: '#/components/schemas/bulkDeleteResponse'
    iotFileError:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/errorBody'
    errorBody:
      type: object
      properties:
        code:
          type: string
          example: mdsp.iot.iotfile.error
        logref:
          type: string
          example: 22f316b4-81c6-4658-aad1-96d2dae494a3
        message:
          type: string
          example: error message
    bulkDeleteJobResponse:
      required:
        - assets
        - id
        - status
        - timestamp
      type: object
      properties:
        id:
          type: string
          description: unique Identifier for delete job
          example: a87d8d68-9d6d-42f8-9eb9-8899fa90bb3f
        timestamp:
          type: string
          description: time when the delete job submitted
          format: date-time
          example: 2020-06-08T09:12:28.000Z
        status:
          type: string
          description: overall status of the job
          enum:
            - COMPLETED_WITH_ERRORS
            - IN_PROGRESS
            - COMPLETED
            - FAILED
        assets:
          maxItems: 1
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/assetStatus'
    assetStatus:
      required:
        - filesDeleted
        - filesRemaining
        - filesToBeDeleted
        - id
        - path
        - status
      type: object
      properties:
        id:
          type: string
          description: asset id
          example: 089336872ce342aba1a847f53d515dc7
        path:
          type: string
          description: >-
            path from which the files are getting deleted. Default value is '/'
            considered as root path.
          example: /
          default: /
        timeFrom:
          type: string
          description: files created after this time are considered for deletion
          format: date-time
          example: 2020-03-01T09:12:28.110Z
        timeTo:
          type: string
          description: files created before this time are considered for deletion
          format: date-time
          example: 2020-06-01T09:12:28.110Z
        status:
          type: string
          description: status of file deletion for this asset id
          enum:
            - FAILED
            - COMPLETED_WITH_ERRORS
            - COMPLETED
            - IN_PROGRESS
        filesToBeDeleted:
          type: integer
          description: total number of files to be deleted
          example: 500
        filesDeleted:
          type: integer
          description: total files delete
          example: 400
        filesRemaining:
          type: integer
          description: >-
            total files remaining for deletion due to either the job is still in
            progress or job failed due to some error
          example: 100
        error:
          type: string
          description: >-
            error due to which file deletion failed for this asset id. if files
            deletion is successful then this field will be null.
          example: Something went wrong while deleting some files
  securitySchemes:
    fileservice:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.simple.api/authorization
          tokenUrl: https://oauth.simple.api/token
          scopes:
            iot.fil.r: read files
            iot.fil.w: write files
            iot.fil.d: delete files
