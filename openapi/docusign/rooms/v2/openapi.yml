openapi: 3.0.1
info:
  title: DocuSign Rooms API - v2
  description: >-
    This is a generated connector for [DocuSign Rooms API](https://developers.docusign.com/docs/rooms-api/) OpenAPI specification. 
    DocuSign Rooms streamlines real estate and mortgage workflows by connecting all parties in a digital, secure, and central workspace. With the DocuSign Rooms API, itâ€™s easy to integrate Rooms functionality into your own solutions.
  termsOfService: https://www.docusign.com/company/terms-and-conditions/web
  contact:
    name: DocuSign Developer Center
    url: https://developers.docusign.com
    email: devcenter@docusign.com
  version: v2
  x-ballerina-init-description: 
    The connector initialization requires setting the API credentials.

    Create a [DocuSign account](https://www.docusign.com/) and obtain tokens by following [this guide](https://developers.docusign.com/docs/rooms-api/rooms101/auth/).
  x-ballerina-display:
    label: DocuSign Rooms
    iconPath: "icon.png"
externalDocs:
  description: Rooms API Reference
  url: https://developers.docusign.com/docs/rooms-api/reference/
servers:
- url: https://rooms.docusign.com/restapi
security:
- Bearer: []
tags:
- name: FormDetails
  description: |+
    This section shows you how to retrieve a form's details.

- name: Accounts
  description: Information about accounts.
- name: Documents
  description: Methods to grant access, delete, and get information, including contents,
    to a document.
- name: ESignPermissionProfiles
  description: This resource provides a method that returns a list of the  eSignature
    permission profiles that the current user can assign to a new member.
- name: Fields
  description: Information about field sets.
- name: ExternalFormFillSessions
  description: ""
- name: FormGroups
  description: With the appropriate permissions, form administrators at your company
    can create form groups, or curated set of forms gathered from the association
    **form libraries** to which DocuSign provides access. Form groups enable agents
    to know which forms to add to rooms based on the type of transaction they are
    working on. When creating groups, administrators can make certain forms required,
    ensuring compliance. If you don't create groups, agents will have to choose forms
    they need from a list of association forms.
- name: FormLibraries
  description: ""
- name: ClosingStatuses
  description: ""
- name: ContactSides
  description: ""
- name: Countries
  description: ""
- name: Currencies
  description: ""
- name: FinancingTypes
  description: ""
- name: OriginsOfLeads
  description: In the console, these are the values that can appear on a room's **Details**
    tab in the **Origin of lead** field.
- name: PropertyTypes
  description: In the console, these are the values that can appear on a room's **Details**
    tab in the **Property type** field.
- name: RoomContactTypes
  description: ""
- name: SellerDecisionTypes
  description: ""
- name: SpecialCircumstanceTypes
  description: ""
- name: States
  description: ""
- name: TaskDateTypes
  description: Task date types are the options that appear in the **Due Date** drop-down
    list when you create a task by using the console.
- name: TaskResponsibilityTypes
  description: ""
- name: TaskStatuses
  description: ""
- name: TimeZones
  description: ""
- name: TransactionSides
  description: ""
- name: Offices
  description: The `Offices` resource enables you to create and manage offices for
    your company. You can also retrieve the number and type of objects that reference
    an office.
- name: Regions
  description: ""
- name: Roles
  description: |-
    Each role is associated with specific permissions. Each new member is assigned a role when you create them, automatically granting them the permissions associated with that role.

    Roles use the following permission types to control the actions that users can perform:

    - Room
    - Room Details
    - Documents
    - Envelopes
    - Member Management
    - Company Settings

    ## Roles in Rooms v5

    Rooms v5 has three predefined roles:

    - **Admin**: This role can manage all members and company settings.
    - **Manager**: This role is designed to manage rooms in one or more offices or regions. Depending on the permissions that you set for the individual member in the `ClassicManagerPermissions`, managers can also perform additional tasks, such as managing member accounts and company account information.
    - **Agent**: This role is for contributors who only have access to rooms that they create or that are created for them. Agents cannot manage company settings or other members.

    However, you can reconfigure the `permissions` for these roles in the `Members` object.

    [members]: ./Members. h t m l Fix this when we can link to objects.
    [ClassicMemberPermissions]: ./definition/ClassicManagerPermissions. h t m l

    ## Roles in Rooms v6

    Rooms v6 enables you to fully configure custom roles containing permissions that make sense for your company. Because each new member is assigned a role, you must set up these roles before you can invite members to join your account.
    In Rooms v6, permissions for roles are tied to the `roleId` property and not yet exposed. You can learn more about these permission types and configure them in the console.

    ### Internal and External Roles

    In Rooms v6, a role can be either internal or external. You assign internal roles to people inside your company. You assign external roles to people outside your company when you invite them to a room.

    Each member inside your company has a default company role. However, they can also be assigned additional roles with different permissions on a per-room basis. Regardless of the member's default company role, what they can do in a room is entirely controlled by their role in that particular room.
- name: Rooms
  description: A room can hold documents, envelopes, a list of tasks comprising a
    workflow, and other related information. You can invite others to this space and
    assign them permissions on a per-room basis.
- name: RoomFolders
  description: ""
- name: RoomTemplates
  description: You can use a room template to set the transaction side and task lists
    for rooms. For example, a broker can create a room template for agents to use.
    You can enable the room template for all regions and offices, or just for specific
    ones. You create room templates and the task templates that room templates use
    in the console.
- name: TaskLists
  description: ""
- name: TaskListTemplates
  description: If your administrator created room templates, those room templates
    may include task lists for you to use.
- name: Users
  description: |-
    A new user is created when an account administrator or another authorized user sends an invitation to an email address. After the invitation is sent, the user's status is `pending`. When the recipient accepts the invitation, their user status switches to `active`.

    ## Inviting a user to a room

    To invite a user to a room, use the [Rooms_InviteUser][RoomsInviteUser] method. You can invite anyone to join a room by specifying their email address.

    **Note**: In Rooms Version 6, you must have the `canAddUsersToRooms` permission set to **true** to invite a user to a room.

    ## Adding a user to a company Rooms account

    This section describes how to add users in each version of the Rooms product, as well as the permissions required to perform this action.

    ### Rooms Version 5

    To invite users to a company in Rooms Version 5, you must either be an Admin or have a Manager role for which the `canManageCompanyMembers` permission is set to `true`.

    In Rooms Version 5, you use the `inviteClassicAdmin`, `inviteClassicAgent`, and `inviteClassicManager` methods.

    ### Rooms Version 6

    To invite users to a company in Rooms Version 6, you must be either an account administrator (In Rooms Version 6, this is the Default Admin) or another authorized user who is assigned a company role that has one of the following `userPermissions` set to **true**:

    - `canAddMemberAndSetRoleLowerAccessLevel`: Users can add other users who have a lower access level than their own and set those users' roles (in offices or regions that they oversee).
    - `canAddMemberAndSetRoleSameAccessLevel`: Users can add other users who have the same access level as their own and set those users' roles (in offices or regions that they oversee or belong to).

    In Rooms Version 6, you use the [Users_inviteUser][UsersInviteUser] method.

    **Note**: Before you invite users in the Rooms Version 6, we strongly recommend that you set up custom roles for your company. For more information, see [Roles][Roles].

    [Roles]:  https://developers.docusign.com/docs/rooms-api/reference/Roles/Roles/


    ## Using the API to invite a user

    The Rooms API method that you use to invite a user depends on the version of Rooms that you are using.

    ### Rooms Version 5

    Rooms Version 5 offers the following API methods, which enable you to invite users by predefined role:

    - [InviteClassicAdmin][InviteClassicAdmin]
    - [InviteClassicAgent][InviteClassicAgent]
    - [InviteClassicManager][InviteClassicManager]

    [InviteClassicAdmin]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicAdmin/
    [InviteClassicAgent]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicAgent/
    [InviteClassicManager]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicManager/

    ### Rooms Version 6

    If you are using Rooms Version 6, you can use a single API method to invite users and assign them to custom roles:

    [InviteUser][InviteUser]

    [InviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteUser/
    [RoomsInviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Rooms/Rooms/InviteUser/
    [UsersInviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteUser/
paths:
  /v2/accounts/{accountId}:
    get:
      tags:
      - Accounts
      summary: Gets account information.
      description: Returns details about a company account.
      operationId: Get Account Information
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Account information successfully retrieved
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountSummary'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountSummary'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetAccountInformation
      x-ds-method: GetAccountInformation
      x-ds-service: Accounts
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/documents/{documentId}:
    get:
      tags:
      - Documents
      summary: Gets information about or the contents of a document.
      description: |-
        Returns information about a document in a room. You can optionally request the contents of the document, which is returned in base64-encoded format.

        To find the `documentId` of the document that you want to retrieve, use the Rooms::GetDocuments method.
      operationId: Get Document
      parameters:
      - name: documentId
        in: path
        description: (Required) The id of the document.
        required: true
        schema:
          type: integer
          format: int32
      - name: includeContents
        in: query
        description: (Optional) When set to **true**, includes the contents of the
          document in the `base64Contents` property of the response. The default value
          is **false**.
        schema:
          type: boolean
          default: false
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Document successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetDocument
      x-ds-method: GetDocument
      x-ds-service: Documents
      x-ds-in-sdk: true
    delete:
      tags:
      - Documents
      summary: Deletes a specified document.
      description: |-
        Permanently deletes a document. To find the `documentId` of a document that you want to delete, use the Rooms::GetDocuments method.

        If the document is deleted successfully, the HTTP response code is 204 (No Content), so the response body is empty.
      operationId: Delete Document
      parameters:
      - name: documentId
        in: path
        description: The ID of the document.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Document has been successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteDocument
      x-ds-method: DeleteDocument
      x-ds-service: Documents
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/documents/{documentId}/users:
    post:
      tags:
      - Documents
      summary: Grants a user access to a document.
      description: Grants a user access to a document. You specify the user's `userId`
        in the request body. The response is an object that specifies the access the
        user has.
      operationId: Create User Access to Document
      parameters:
      - name: documentId
        in: path
        description: The ID of the document.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: "User information to grant access"
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DocumentUserForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUserForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/DocumentUserForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DocumentUserForCreate'
        required: false
      responses:
        201:
          description: User successfully granted access to document.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentUser'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUser'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentUser'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateDocumentUser
      x-ds-method: CreateDocumentUser
      x-ds-service: Documents
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/esign_permission_profiles:
    get:
      tags:
      - ESignPermissionProfiles
      summary: Gets eSignature Permission Profiles.
      description: When you create or invite a new member in Rooms, the system creates
        an eSignature account for the member at the same time. This method returns
        a list of the eSignature permission profiles that the current user may be
        able to assign to a new member. The current user may not assign a permission
        higher than their own permission.
      operationId: Get ESign Permission Profiles
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Permission profiles successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ESignPermissionProfileList'
            application/json:
              schema:
                $ref: '#/components/schemas/ESignPermissionProfileList'
            text/json:
              schema:
                $ref: '#/components/schemas/ESignPermissionProfileList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetESignPermissionProfiles
      x-ds-method: GetESignPermissionProfiles
      x-ds-service: ESignPermissionProfiles
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/external_form_fill_sessions:
    post:
      tags:
      - ExternalFormFillSessions
      summary: Creates an external form fill session.
      description: Returns a URL for a new external form fill session, based on the
        `roomId` and `formId` that you specify in the `formFillSessionForCreate` request
        body.
      operationId: Create External Form Fill Session
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details required to create a form fill session.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExternalFormFillSessionForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalFormFillSessionForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/ExternalFormFillSessionForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExternalFormFillSessionForCreate'
        required: false
      responses:
        201:
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalFormFillSession'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalFormFillSession'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalFormFillSession'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateExternalFormFillSession
      x-ds-method: CreateExternalFormFillSession
      x-ds-service: ExternalFormFillSessions
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/field_sets/{fieldSetId}:
    get:
      tags:
      - Fields
      summary: Gets a field set.
      description: Returns a field set. This is a set of fields that can appear on
        a room's Details tab in the console, such as `contactName` and `phone`.
      operationId: Get Field Set
      parameters:
      - name: fieldSetId
        in: path
        description: |
          (Required) The id of the field set.

          Example: `4aef602b-xxxx-xxxx-xxxx-08d76696f678`
        required: true
        schema:
          type: string
          format: uuid
      - name: fieldsCustomDataFilters
        in: query
        description: |
          (Optional) An comma-separated list that limits the fields to return:

          - `IsRequiredOnCreate`: include fields that are required in room creation.
          - `IsRequiredOnSubmit`: include fields that are required when submitting a room for review.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - None
            - IsRequiredOnCreate
            - IsRequiredOnSubmit
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: FieldSet successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldSet'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldSet'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldSet'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFieldSet
      x-ds-method: GetFieldSet
      x-ds-service: Fields
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_groups:
    get:
      tags:
      - FormGroups
      summary: Gets form groups.
      description: "Returns the company form groups to which the current user has\
        \ access.\n\n## Permissions \n\n**Rooms Version 5**: You must be Admin to\
        \ use this method.\n\n**Rooms Version 6**: You must have a role for which\
        \ the `canManageFormGroups` permission is set to **true**.\n"
      operationId: Get Form Groups
      parameters:
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the results
          set. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved Form Groups.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormGroupSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/FormGroupSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/FormGroupSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFormGroups
      x-ds-method: GetFormGroups
      x-ds-service: FormGroups
      x-ds-in-sdk: true
    post:
      tags:
      - FormGroups
      summary: Creates a form group.
      description: |
        Creates a new form group with the name given in the `name` property of the request body.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Create Form Group
      parameters:
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Request object for FormGroup::CreateFormGroup.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FormGroupForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/FormGroupForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/FormGroupForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FormGroupForCreate'
        required: false
      responses:
        201:
          description: Successfully created form group.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormGroup'
            application/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
            text/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateFormGroup
      x-ds-method: CreateFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/form_groups/{formGroupId}:
    get:
      tags:
      - FormGroups
      summary: Gets a form group.
      description: |
        Get the specified form group.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Get Form Group
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved form group.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormGroup'
            application/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
            text/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFormGroup
      x-ds-method: GetFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
    put:
      tags:
      - FormGroups
      summary: Renames a form group.
      description: |
        Renames the specified form group with the name given in the `name` property of the request.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Rename Form Group
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about a form group
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FormGroupForUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/FormGroupForUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/FormGroupForUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FormGroupForUpdate'
        required: false
      responses:
        200:
          description: Successfully updated form group.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormGroup'
            application/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
            text/json:
              schema:
                $ref: '#/components/schemas/FormGroup'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RenameFormGroup
      x-ds-method: RenameFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
    delete:
      tags:
      - FormGroups
      summary: Deletes a form group.
      description: |
        Deletes the specified form group.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Delete FormGroup
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successfully deleted form group.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteFormGroup
      x-ds-method: DeleteFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_groups/{formGroupId}/unassign_form/{formId}:
    post:
      tags:
      - FormGroups
      summary: Removes a form from a form group.
      description: |
        Removes the form `formId` from the form group `formGroupId`.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Remove Form in Form Group 
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: formId
        in: path
        description: |
          The id of the form.

          Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Form was successfully removed from the form group
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RemoveFormGroupForm
      x-ds-method: RemoveFormGroupForm
      x-ds-service: FormGroups
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_groups/{formGroupId}/assign_form:
    post:
      tags:
      - FormGroups
      summary: Assigns a form to a form group.
      description: |
        Assigns the form specified in the `formId` property of the request to the form group `formGroupId`. Set the `isRequired` property in the request body to **true** if this is a required form.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Assign Form to Form Group
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: "Group information to assign form"
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FormGroupFormToAssign'
          application/json:
            schema:
              $ref: '#/components/schemas/FormGroupFormToAssign'
          text/json:
            schema:
              $ref: '#/components/schemas/FormGroupFormToAssign'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FormGroupFormToAssign'
        required: false
      responses:
        204:
          description: Successfully assigned form to form group.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormGroupFormToAssign'
            application/json:
              schema:
                $ref: '#/components/schemas/FormGroupFormToAssign'
            text/json:
              schema:
                $ref: '#/components/schemas/FormGroupFormToAssign'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AssignFormGroupForm
      x-ds-method: AssignFormGroupForm
      x-ds-service: FormGroups
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/form_groups/{formGroupId}/grant_office_access/{officeId}:
    post:
      tags:
      - FormGroups
      summary: Grants an office access to a form group.
      description: |
        Grants the office `officeId` access to the form group `formGroupId`.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Grant Office Access To Form Group
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: officeId
        in: path
        description: The id of the office. This is the id that the system generated
          when you created the office.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Office was successfully assigned to the form group
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GrantOfficeAccessToFormGroup
      x-ds-method: GrantOfficeAccessToFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_groups/{formGroupId}/revoke_office_access/{officeId}:
    post:
      tags:
      - FormGroups
      summary: Revoke an office's access to a form group.
      description: |
        Revoke access to the form group `formGroupId` from the office `officeId`.

        ## Permissions

        To use this method, you must have the following permissions set to **true**:

        - Rooms Version 5: Admin
        - Rooms Version 6: Manage Form Groups (`canManageFormGroups`)
      operationId: Revoke Office Access From Form Group
      parameters:
      - name: formGroupId
        in: path
        description: |
          The ID of the form group.

          Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
        required: true
        schema:
          type: string
          format: uuid
      - name: officeId
        in: path
        description: The id of the office. This is the id that the system generated
          when you created the office.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Office was successfully removed from the form group
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RevokeOfficeAccessFromFormGroup
      x-ds-method: RevokeOfficeAccessFromFormGroup
      x-ds-service: FormGroups
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_libraries:
    get:
      tags:
      - FormLibraries
      summary: Gets form libraries.
      description: |-
        Returns a list of form libraries to which the current user has access.

        ## Permissions

        All users can use this method, but the results will differ based on whether the company has asked DocuSign to enable **RequireOfficeLibraryAssignments** functionality. If this functionality is enabled for the account, then the list is filtered based on the offices that the user is in and the libraries that are assigned to those offices. If **RequireOfficeLibraryAssignments**  is not enabled, the API returns all results.
      operationId: Get Form Libraries
      parameters:
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the results
          set. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved Form Libraries.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormLibrarySummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/FormLibrarySummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/FormLibrarySummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFormLibraries
      x-ds-method: GetFormLibraries
      x-ds-service: FormLibraries
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/form_libraries/{formLibraryId}/forms:
    get:
      tags:
      - FormLibraries
      summary: Gets the forms in a form library.
      description: Returns a list of forms  to which the current user has access in
        the specified form library.
      operationId: Get Forms in Form Library Forms
      parameters:
      - name: formLibraryId
        in: path
        description: |
          (Required) The id of the form library.

          Example: `402c6e2f-xxxx-xxxx-xxxx-ff3f249f6da9`
        required: true
        schema:
          type: string
          format: uuid
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the results
          set. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'Successfully retrieved library '
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/FormSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/FormSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFormLibraryForms
      x-ds-method: GetFormLibraryForms
      x-ds-service: FormLibraries
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/forms/{formId}/details:
    get:
      tags:
      - FormDetails
      summary: Gets form details.
      description: Returns details about a specific form, such as the date it was
        created and last updated, the number of pages, the form owner, and other information.
      operationId: Get Form Details
      parameters:
      - name: formId
        in: path
        description: (Required) The id of the form.
        required: true
        schema:
          type: string
          format: uuid
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Form based on FormId
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FormDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/FormDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/FormDetails'
        400:
          description: Unable to Find Form based on FormId
          content: {}
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFormDetails
      x-ds-method: GetFormDetails
      x-ds-service: FormDetails
      x-ds-in-sdk: true
  /v2/countries:
    get:
      tags:
      - Countries
      summary: Gets countries.
      description: |-
        Returns a list of countries that the API supports. This is a list of countries in which you can create an office.

        You do not specify an `accountId` or any other parameters with this method.

        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Countries
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalCountries'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalCountries'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalCountries'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetCountries
      x-ds-method: GetCountries
      x-ds-service: Countries
      x-ds-in-sdk: true
  /v2/closing_statuses:
    get:
      tags:
      - ClosingStatuses
      summary: Gets closing statuses.
      description: |-
        Returns a list of closing statuses, or valid reasons for closing a room.

        You do not specify an `accountId` or any other parameters with this method.

        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Closing Statuses
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalClosingStatuses'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalClosingStatuses'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalClosingStatuses'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetClosingStatuses
      x-ds-method: GetClosingStatuses
      x-ds-service: ClosingStatuses
      x-ds-in-sdk: true
  /v2/contact_sides:
    get:
      tags:
      - ContactSides
      summary: Gets contact sides.
      description: |-
        Return a list of valid values for transaction contact sides.

        **Note**: You do not specify an `accountId` or any other parameters with this method.

        ## Permissions

        Any user who has a valid access token can use this method.
      operationId: Get Contact Sides
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalContactSides'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalContactSides'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalContactSides'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetContactSides
      x-ds-method: GetContactSides
      x-ds-service: ContactSides
      x-ds-in-sdk: true
  /v2/financing_types:
    get:
      tags:
      - FinancingTypes
      summary: Gets financing types.
      description: |-
        Returns a list of possible financing types.


        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Financing Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalFinancingTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalFinancingTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalFinancingTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetFinancingTypes
      x-ds-method: GetFinancingTypes
      x-ds-service: FinancingTypes
      x-ds-in-sdk: true
  /v2/origins_of_leads:
    get:
      tags:
      - OriginsOfLeads
      summary: Gets origins of leads.
      description: |-
        Returns a list of origins of leads (such as Trulia or Zillow) that you can specify for rooms.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get Origins Of Leads
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalOriginsOfLeads'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalOriginsOfLeads'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalOriginsOfLeads'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetOriginsOfLeads
      x-ds-method: GetOriginsOfLeads
      x-ds-service: OriginsOfLeads
      x-ds-in-sdk: true
  /v2/property_types:
    get:
      tags:
      - PropertyTypes
      summary: Gets property types.
      description: |-
        Returns a list of property types.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get Property Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalPropertyTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalPropertyTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalPropertyTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetPropertyTypes
      x-ds-method: GetPropertyTypes
      x-ds-service: PropertyTypes
      x-ds-in-sdk: true
  /v2/room_contact_types:
    get:
      tags:
      - RoomContactTypes
      summary: Gets room contact types.
      description: |-
        Returns a list of room contact types, such as Buyer, Seller, and Listing Agent.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get Room Contact Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalRoomContactTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalRoomContactTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalRoomContactTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoomContactTypes
      x-ds-method: GetRoomContactTypes
      x-ds-service: RoomContactTypes
      x-ds-in-sdk: true
  /v2/seller_decision_types:
    get:
      tags:
      - SellerDecisionTypes
      summary: Gets seller decision types.
      description: |-
        Returns a list of possible seller decision types regarding offers, such as `Countered` or `Rejected`.

        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Seller Decision Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalSellerDecisionTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSellerDecisionTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalSellerDecisionTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetSellerDecisionTypes
      x-ds-method: GetSellerDecisionTypes
      x-ds-service: SellerDecisionTypes
      x-ds-in-sdk: true
  /v2/special_circumstance_types:
    get:
      tags:
      - SpecialCircumstanceTypes
      summary: Gets special circumstance types.
      description: |-
        Returns a list of special circumstance types, such as `Short Sale` and `Foreclosure`. These are the values that you can select for the **Special circumstances** field that appears on the **Room Details** page.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get Special Circumstance Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalSpecialCircumstanceTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSpecialCircumstanceTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalSpecialCircumstanceTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetSpecialCircumstanceTypes
      x-ds-method: GetSpecialCircumstanceTypes
      x-ds-service: SpecialCircumstanceTypes
      x-ds-in-sdk: true
  /v2/task_date_types:
    get:
      tags:
      - TaskDateTypes
      summary: Gets task date types.
      description: |-
        Returns a list of date types that you can use with tasks, such as `Actual Close Date` and `Task Due Date`. These are the options that appear in the **Due Date** drop-down list when you create a task by using the console.

        **Note**: You do not enter an `accountId` with this method.

        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Task Date Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalTaskDateTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskDateTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskDateTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTaskDateTypes
      x-ds-method: GetTaskDateTypes
      x-ds-service: TaskDateTypes
      x-ds-in-sdk: true
  /v2/task_responsibility_types:
    get:
      tags:
      - TaskResponsibilityTypes
      summary: Gets task responsibility types.
      description: "Returns a list of responsibility types that you can assign to\
        \ users when you add them to a task. \n\n**Note**: You do not specify an `accountId`\
        \ with this method.\n\n## Permissions\n\nAny user with a valid access token\
        \ can call this method."
      operationId: Get Task Responsibility Types
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalTaskResponsibilityTypes'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskResponsibilityTypes'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskResponsibilityTypes'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTaskResponsibilityTypes
      x-ds-method: GetTaskResponsibilityTypes
      x-ds-service: TaskResponsibilityTypes
      x-ds-in-sdk: true
  /v2/task_statuses:
    get:
      tags:
      - TaskStatuses
      summary: Retrieves the list of valid task statuses.
      operationId: Get Task Statuses
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalTaskStatuses'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskStatuses'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalTaskStatuses'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTaskStatuses
      x-ds-method: GetTaskStatuses
      x-ds-service: TaskStatuses
      x-ds-in-sdk: true
  /v2/transaction_sides:
    get:
      tags:
      - TransactionSides
      summary: Gets transaction sides.
      description: "Returns a list of real estate transaction sides. \n\n## Permissions\n\
        \nAny user with a valid access token can use this method."
      operationId: Get Transaction Sides
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalTransactionSides'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTransactionSides'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalTransactionSides'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTransactionSides
      x-ds-method: GetTransactionSides
      x-ds-service: TransactionSides
      x-ds-in-sdk: true
  /v2/states:
    get:
      tags:
      - States
      summary: Gets states.
      description: |-
        Returns a list of states.

        **Note**: You do not enter an `accountId` with this method.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get States
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalStates'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalStates'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalStates'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetStates
      x-ds-method: GetStates
      x-ds-service: States
      x-ds-in-sdk: true
  /v2/currencies:
    get:
      tags:
      - Currencies
      summary: Gets valid currencies.
      description: |-
        Returns a list of valid values for the currencies that you can use for listing, offer, and loan amounts.

        **Note**: You do not specify an `accountId` with this method.

        ## Permissions

        Any user with a valid access token can use this method.
      operationId: Get Currencies
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalCurrencies'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalCurrencies'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalCurrencies'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetCurrencies
      x-ds-method: GetCurrencies
      x-ds-service: Currencies
      x-ds-in-sdk: true
  /v2/time_zones:
    get:
      tags:
      - TimeZones
      summary: Gets time zones.
      description: |-
        Gets a list of time zones that you can assign to an office.

        **Note**: You do not specify an `accountId` with this method.

        ## Permissions

        Anyone with a valid access token can call this method.
      operationId: Get Time Zones
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalTimeZones'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalTimeZones'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalTimeZones'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTimeZones
      x-ds-method: GetTimeZones
      x-ds-service: TimeZones
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/offices:
    get:
      tags:
      - Offices
      summary: Gets offices.
      description: This method returns a list of offices associated with an account.
      operationId: Get Offices
      parameters:
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the results
          set from which to begin returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: onlyAccessible
        in: query
        description: (Optional) When set to **true**, the response only includes the
          offices that are accessible to the current user.
        schema:
          type: boolean
          default: false
      - name: search
        in: query
        description: (Optional) Filters returned records by the specified string.
          The response only includes records containing this string in the office
          `name` field.
        schema:
          type: string
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Offices successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OfficeSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/OfficeSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/OfficeSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetOffices
      x-ds-method: GetOffices
      x-ds-service: Offices
      x-ds-in-sdk: true
    post:
      tags:
      - Offices
      summary: Creates an office.
      description: |-
        This method creates an office in a Rooms account. You can configure the following information for the new office:

        - Office name
        - Region
        - Address
        - Country ID and time zone
        - Phone number

        When you create an office, the Rooms API service assigns it an ID (`officeId`) and timestamp (`createdDate`), which are returned in the response along with the above data elements you specified. See the `Offices` object for descriptions of these data elements.

        Use the [Users::AddUserToOffice](https://developers.docusign.com/docs/rooms-api/reference/users/users/addusertooffice/)
        method to add users to the office.
      operationId: Create Office
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the office that you want to create.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/OfficeForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/OfficeForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/OfficeForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OfficeForCreate'
        required: false
      responses:
        201:
          description: Office successfully created.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Office'
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
            text/json:
              schema:
                $ref: '#/components/schemas/Office'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateOffice
      x-ds-method: CreateOffice
      x-ds-service: Offices
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/offices/{officeId}:
    get:
      tags:
      - Offices
      summary: Gets information about an office.
      description: This method returns information about an office.
      operationId: Get Office
      parameters:
      - name: officeId
        in: path
        description: (Required) The id of the office.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Office successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Office'
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
            text/json:
              schema:
                $ref: '#/components/schemas/Office'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetOffice
      x-ds-method: GetOffice
      x-ds-service: Offices
      x-ds-in-sdk: true
    delete:
      tags:
      - Offices
      summary: Deletes an office.
      description: This method deletes an office from a Rooms account.
      operationId: Delete Office
      parameters:
      - name: officeId
        in: path
        description: (Required) The id of the office.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Office successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteOffice
      x-ds-method: DeleteOffice
      x-ds-service: Offices
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/offices/{officeId}/reference_counts:
    get:
      tags:
      - Offices
      summary: Retrieves the number and type of objects that reference an office.
      description: This method returns a list of each type of object and the number
        of objects of that type referencing the specified office. Note that an office
        cannot be deleted while existing objects reference it.
      operationId: Get Reference Counts
      parameters:
      - name: officeId
        in: path
        description: (Required) The id of the office.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Reference counts successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OfficeReferenceCountList'
            application/json:
              schema:
                $ref: '#/components/schemas/OfficeReferenceCountList'
            text/json:
              schema:
                $ref: '#/components/schemas/OfficeReferenceCountList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetReferenceCounts
      x-ds-method: GetReferenceCounts
      x-ds-service: Offices
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/regions:
    get:
      tags:
      - Regions
      summary: Gets regions.
      description: This method returns a list of regions that are associated with
        a Rooms account.
      operationId: Get Regions
      parameters:
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the results
          set from which to begin returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: managedOnly
        in: query
        description: (Optional) When set to **true**, only the regions that the current
          user manages are returned. The default value is **false**.
        schema:
          type: boolean
          default: false
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Regions successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RegionSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/RegionSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRegions
      x-ds-method: GetRegions
      x-ds-service: Regions
      x-ds-in-sdk: true
    post:
      tags:
      - Regions
      summary: Creates a region.
      description: This method creates a new region. When you create a region, you
        specify only the name. The service will assign and return a region ID (`regionId`)
        and a creation timestamp (`createdDate`).
      operationId: Create Region
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about a region.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
          text/json:
            schema:
              $ref: '#/components/schemas/Region'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Region'
        required: false
      responses:
        201:
          description: The region was successfully created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Region'
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
            text/json:
              schema:
                $ref: '#/components/schemas/Region'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateRegion
      x-ds-method: CreateRegion
      x-ds-service: Regions
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/regions/{regionId}:
    get:
      tags:
      - Regions
      summary: Gets information about a region.
      description: This method returns information about a specific region.
      operationId: Get Region
      parameters:
      - name: regionId
        in: path
        description: (Required) The id of the region.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The region was found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Region'
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
            text/json:
              schema:
                $ref: '#/components/schemas/Region'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRegion
      x-ds-method: GetRegion
      x-ds-service: Regions
      x-ds-in-sdk: true
    delete:
      tags:
      - Regions
      summary: Deletes a region.
      description: This method deletes a region from a Rooms account.
      operationId: Delete Region
      parameters:
      - name: regionId
        in: path
        description: (Required) The id of the region.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Region successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteRegion
      x-ds-method: DeleteRegion
      x-ds-service: Regions
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/regions/{regionId}/reference_counts:
    get:
      tags:
      - Regions
      summary: Retrieves the number and type of objects that reference a region.
      description: "This method returns a list of each type of object and the number\
        \ of objects of that type referencing the specified region. \n\n**Note**:\
        \ A region cannot be deleted while existing objects reference it."
      operationId: Get Region Reference Counts
      parameters:
      - name: regionId
        in: path
        description: (Required) The id of the region.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Reference counts successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RegionReferenceCountList'
            application/json:
              schema:
                $ref: '#/components/schemas/RegionReferenceCountList'
            text/json:
              schema:
                $ref: '#/components/schemas/RegionReferenceCountList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRegionReferenceCounts
      x-ds-method: GetRegionReferenceCounts
      x-ds-service: Regions
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/roles:
    get:
      tags:
      - Roles
      summary: Gets roles.
      description: "Returns a list of roles associated with a company account.\n\n\
        ## Permissions \n\nAny user with a valid access token can call this method."
      operationId: Get Roles
      parameters:
      - name: onlyAssignable
        in: query
        description: (Optional) When set to **true**, returns only the roles that
          the current user can assign to someone else. The default value is **false**.
        schema:
          type: boolean
          default: false
      - name: filter
        in: query
        description: "(Optional) A search filter that returns roles by the beginning\
          \ of the role name. You can enter the beginning of the role name only to\
          \ return all of the roles that begin with the text that you entered. \n\n\
          For example, if your company has set up roles such as Manager Beginner,\
          \ Manager Pro, Agent Expert, and Agent Superstar, you could enter `Manager`\
          \ to return all of the Manager roles (Manager Beginner and Manager Pro).\n\
          \n**Note**: You do not enter a wildcard (*) at the end of the name fragment."
        schema:
          type: string
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position of the result
          set. The default value is 0.
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Roles successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoleSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/RoleSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoles
      x-ds-method: GetRoles
      x-ds-service: Roles
      x-ds-in-sdk: true
    post:
      tags:
      - Roles
      summary: Creates a role.
      description: |-
        Creates a new company role in Rooms Version 6.

        ## Permissions

        To use this method, you must have the `canManageAccount` permission set to **true**.
      operationId: Create Role
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the role that you want to create.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoleForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/RoleForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleForCreate'
        required: false
      responses:
        201:
          description: Role successfully created.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Role'
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
            text/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateRole
      x-ds-method: CreateRole
      x-ds-service: Roles
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/roles/{roleId}:
    get:
      tags:
      - Roles
      summary: Gets a role.
      description: Returns details about a role, including the associated permissions.
      operationId: Get Role
      parameters:
      - name: roleId
        in: path
        description: (Required) The id of the role.
        required: true
        schema:
          type: integer
          format: int32
      - name: includeIsAssigned
        in: query
        description: (Optional) When set to **true**, the response includes the `isAssigned`
          property, which specifies whether the role is currently assigned to any
          users. The default is **false**.
        schema:
          type: boolean
          default: false
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Role successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Role'
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
            text/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRole
      x-ds-method: GetRole
      x-ds-service: Roles
      x-ds-in-sdk: true
    put:
      tags:
      - Roles
      summary: Updates a role.
      description: |-
        Modifies the specified company role in Rooms Version 6.

        ## Permissions

        To use this method, you must have the `canManageAccount` permission set to **true**.
      operationId: Update Role
      parameters:
      - name: roleId
        in: path
        description: (Required) The id of the role to update.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: The details to use for the update.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoleForUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/RoleForUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleForUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleForUpdate'
        required: false
      responses:
        200:
          description: Role successfully updated.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Role'
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
            text/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: UpdateRole
      x-ds-method: UpdateRole
      x-ds-service: Roles
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
    delete:
      tags:
      - Roles
      summary: Deletes a role.
      description: "Deletes a role from a company account in Rooms Version 6.\n\n\
        ## Permissions \n\nTo use this method, you must have the `canManageAccount`\
        \ permission set to **true**."
      operationId: Delete Role
      parameters:
      - name: roleId
        in: path
        description: (Required) The id of the role to delete.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Role successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteRole
      x-ds-method: DeleteRole
      x-ds-service: Roles
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/field_data:
    get:
      tags:
      - Rooms
      summary: Gets a room's field data.
      description: |-
        Returns the field data associated with a room. This is the information that appears on the room's **Details** tab.

        To better understand the room's field data, use the [Rooms::GetRoomFieldSet](/rooms-api/reference/Rooms/Rooms/GetRoomFieldSet) method to retrieve the set of fields that the room uses.
      operationId: Get Room Field Data
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Field data successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldData'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldData'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldData'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoomFieldData
      x-ds-method: GetRoomFieldData
      x-ds-service: Rooms
      x-ds-in-sdk: true
    put:
      tags:
      - Rooms
      summary: Updates a room's field data.
      description: |-
        This method lets you update one or more fields in a room's field data, the information that appears in the room's **Details** tab. To better understand the room's field data, use the [Rooms::GetRoomFieldSet](/rooms-api/reference/Rooms/Rooms/GetRoomFieldSet) method to retrieve the set of fields that the room uses.

        To get the current values of a room's field data, use [Rooms::GetRoomFieldData](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData).

        For example, to update the "Tax annual amount" and Buyer1's name fields in a room, you would use a request body that looks like this:

        ```
        {
          "data": {
            "taxAnnualAmount": 3389.12,
            "buyer1": {
              "name": "Elizabeth Bennet"
            }
          }
        }
        ```

        If successful, the response body will have the same contents as the request body.


        All of the fields must be updated successfully for the method to succeed.
        For example, if you were to set the tax amount to a negative number,
        the method will fail and none of the fields will be updated.
      operationId: Update Room Field Data
      parameters:
      - name: roomId
        in: path
        description: The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: The field data to update. When updating field data, specify only the fields being updated.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FieldDataForUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/FieldDataForUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/FieldDataForUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FieldDataForUpdate'
        required: false
      responses:
        200:
          description: Field data successfully updated.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldData'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldData'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldData'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: UpdateRoomFieldData
      x-ds-method: UpdateRoomFieldData
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/room_folders:
    get:
      tags:
      - RoomFolders
      summary: Gets a list of room folders accessible to the current user.
      description: Gets a list of room folders in the specified room that are accessible
        to the current user.
      operationId: Get Room Folders
      parameters:
      - name: roomId
        in: path
        description: The room id from which to retrieve folders.
        required: true
        schema:
          type: integer
          format: int32
      - name: startPosition
        in: query
        description: Position of the first item in the total results. Defaults to
          0.
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        description: Number of room folders to return. Defaults to the maximum which
          is 100.
        schema:
          type: integer
          format: int32
          default: 100
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Room folders successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomFolderList'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomFolderList'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomFolderList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoomFolders
      x-ds-method: GetRoomFolders
      x-ds-service: RoomFolders
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/forms:
    post:
      tags:
      - Rooms
      summary: Adds a form to a room.
      description: |-
        Adds a form to a room.

        You specify the form that you want to add in the `formForAdd` request body. To find the id of the form that you want to add, use the [FormsLibraries::GetFormLibraryForms method][GetFormLibraryForms].

        [GetFormLibraryForms]: https://developers.docusign.com/docs/rooms-api/reference/Forms/FormLibraries/GetFormLibraryForms/
        ## Permissions

        **Rooms Version 5**: You must be Admin to use this method.

        **Rooms Version 6**: You must have a role for which the `canAddDocumentsFromFormLibraries` permission is set to **true**.
      operationId: Add Form To Room
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room to which you want to add the form.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the form that you want to add.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FormForAdd'
          application/json:
            schema:
              $ref: '#/components/schemas/FormForAdd'
          text/json:
            schema:
              $ref: '#/components/schemas/FormForAdd'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FormForAdd'
        required: false
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
        201:
          description: The DocuSign Form was successfully added to the room
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AddFormToRoom
      x-ds-method: AddFormToRoom
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/users:
    get:
      tags:
      - Rooms
      summary: Gets a room's users.
      description: This method returns a list of users associated with a room.
      operationId: Get Room Users
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The index position within the total result set from
          which to start returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: filter
        in: query
        description: "(Optional) A search filter that returns users by the beginning\
          \ of the user's first name, last name, or email address. You can enter the\
          \ beginning of the name or email only to return all of the users whose names\
          \ or email addresses begin with the text that you entered. \n\n**Note**:\
          \ You do not enter a wildcard (*) at the end of the name or email fragment."
        schema:
          type: string
      - name: sort
        in: query
        description: "(Optional) The order in which to return results. Valid values\
          \ are:\n\n- `firstNameAsc`: Sort on first name in ascending order. \n- `firstNameDesc`:\
          \  Sort on first name in descending order. \n- `lastNameAsc`: Sort on last\
          \ name in ascending order. \n- `lastNameDesc`: Sort on last name in descending\
          \ order. This is the default value."
        schema:
          type: string
          enum:
          - FirstNameAsc
          - LastNameAsc
          - EmailAsc
          - FirstNameDesc
          - LastNameDesc
          - EmailDesc
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The room user was successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomUsersResult'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomUsersResult'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomUsersResult'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        404:
          description: The room was not found.
          content: {}
      x-ds-methodname: GetRoomUsers
      x-ds-method: GetRoomUsers
      x-ds-service: Rooms
      x-ds-in-sdk: true
    post:
      tags:
      - Rooms
      summary: Invites a user to a room.
      description: |-
        This method invites an existing or new member to a specific room.

        You can invite anyone to join a room by specifying their email address.
      operationId: Invite User to Room
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: The information to use for the invitation.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoomInvite'
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInvite'
          text/json:
            schema:
              $ref: '#/components/schemas/RoomInvite'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoomInvite'
        required: false
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
        201:
          description: 'The user was successfully invited to the '
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomInviteResponse'
        400:
          description: 'The user could not be invited to the '
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: InviteUser
      x-ds-method: InviteUser
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/users/{userId}:
    put:
      tags:
      - Rooms
      summary: Updates a room user.
      description: |-
        You can use this method to update the following information for a room user:

        - `roleId`
        - `transactionSideId`

        In the console, this is the **Side and role** information that appears in the room's **People** tab. You specify the information that you want to update in the `roomUserForUpdate` request body.

        ## Permissions

        **Rooms Version 6**: Only the person who invited the room user to the room can update the room user.

        **Rooms Version 5**: The following permissions apply in Rooms Version 5:

        - The person who invited the room user to the room can update the room user.
        - Any room owner can update any room user.
        - A Manager who has the `CanManageCompanyRooms` permission and who manages the person who invited the room user can update the room user.
      operationId: Put Room User
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: (Required) The id of the user to update.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: This request object contains the information that you want to update for the room user.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoomUserForUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUserForUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/RoomUserForUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoomUserForUpdate'
        required: false
      responses:
        200:
          description: The room user was successfully updated.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomUser'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomUser'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomUser'
        400:
          description: The room user could not be updated.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: PutRoomUser
      x-ds-method: PutRoomUser
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/revoke_access:
    post:
      tags:
      - Rooms
      summary: Revokes the specified user's access to the room.
      description: "Revokes the specified user's access to the room. If successful,\
        \ the HTTP result is 204 (No content), and the response is empty.\n\nTo revoke\
        \ access immediately, leave the request body empty.\n\nTo revoke access on\
        \ a specific date, use the request body to specify a date. \n\n**Note** If\
        \ a user doesn't have access to a room, and you revoke their access at a future\
        \ date, the user will be granted access until the revocation date."
      operationId: Revoke Room User Access
      parameters:
      - name: roomId
        in: path
        description: The room Id to revoke access from
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: The user Id getting revoked from the room
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details for removal.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoomUserRemovalDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUserRemovalDetail'
          text/json:
            schema:
              $ref: '#/components/schemas/RoomUserRemovalDetail'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoomUserRemovalDetail'
        required: false
      responses:
        204:
          description: The room user's access was successfully revoked.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RevokeRoomUserAccess
      x-ds-method: RevokeRoomUserAccess
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/restore_access:
    post:
      tags:
      - Rooms
      summary: Restores the specified user's access to the room.
      description: Restores the specified user's access to the room.
      operationId: Restore Room User Access
      parameters:
      - name: roomId
        in: path
        description: The room Id to restore access
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: The user Id getting restored to the room
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: The room user's access was successfully restored.
          content: {}
        400:
          description: The room user's access could not be restored.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RestoreRoomUserAccess
      x-ds-method: RestoreRoomUserAccess
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms:
    get:
      tags:
      - Rooms
      summary: Returns a list of rooms.
      description: "This method returns details about the rooms that the current user\
        \ has permissions to view.\n\nThe `fieldDataChangedStartDate` and `fieldDataChangedEndDate`\
        \ query parameters let you limit the results to rooms whose [field data](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData)\
        \ has changed within a range of dates. \n\nThe `roomClosedStartDate` and `roomClosedEndDate`\
        \ query parameters let you limit the results to rooms that were closed within\
        \ a range of dates. \n\n**Note**: By default, this method only returns open\
        \ rooms. To return other rooms, use the `roomStatus` query parameter."
      operationId: Get Rooms
      parameters:
      - name: count
        in: query
        description: (Optional) The number of results. When this property is used
          as a request parameter specifying the number of results to return, the value
          must be a number between 1 and 100 (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The index position within the total result set from
          which to start returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: roomStatus
        in: query
        description: "(Optional) The status of the room. Valid values are:\n\n- `active`:\
          \ This is the default value.\n- `pending`\n- `open`: Includes both `active`\
          \ and `pending` statuses.\n- `closed`\n\nTo return rooms with multiple statuses,\
          \ enter a comma-separated list of statuses. \n\nExample:\n\n`closed,open`"
        schema:
          type: string
          enum:
          - Active
          - Pending
          - Closed
          - Open
      - name: officeId
        in: query
        description: (Optional) The id of the office.
        schema:
          type: integer
          format: int32
      - name: fieldDataChangedStartDate
        in: query
        description: |
          (Optional) Starting date and time to filter rooms whose field data has changed after this date. Date and time is always given as UTC. If the time (`hh:mm:ss`) is omitted, it defaults to `00:00:00`.

          Valid formats:

          - `yyyy-mm-dd hh:mm:ss`
          - `yyyy/mm/dd hh:mm:ss`

          The default start date is the beginning of time.
        schema:
          type: string
      - name: fieldDataChangedEndDate
        in: query
        description: |
          (Optional) Ending date and time to filter rooms whose field data has changed before this date. Date and time is always given as UTC. If the time (`hh:mm:ss`) is omitted, it defaults to `00:00:00`.


          Valid formats:

          - `yyyy-mm-dd hh:mm:ss`
          - `yyyy/mm/dd hh:mm:ss`

          If this query parameter is omitted, the default end date is now.
        schema:
          type: string
      - name: roomClosedStartDate
        in: query
        description: |
          (Optional) Starting date and time to filter rooms that were closed this date. Date and time is always given as UTC. If the time (`hh:mm:ss`) is omitted, it defaults to `00:00:00`.

          Valid formats:

          - `yyyy-mm-dd hh:mm:ss`
          - `yyyy/mm/dd hh:mm:ss`

          The default start date is the beginning of time.
        schema:
          type: string
      - name: roomClosedEndDate
        in: query
        description: |-
          (Optional) Ending date and time to filter rooms that were closed before this date. Date and time is always given as UTC. If the time (`hh:mm:ss`) is omitted, it defaults to `00:00:00`.

          Valid formats:

          - `yyyy-mm-dd hh:mm:ss`
          - `yyyy/mm/dd hh:mm:ss`

          If this query parameter is omitted, the default end date is now.
        schema:
          type: string
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Rooms successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRooms
      x-ds-method: GetRooms
      x-ds-service: Rooms
      x-ds-in-sdk: true
    post:
      tags:
      - Rooms
      summary: Creates a room.
      description: |-
        This method creates a new room.

        **Note**: To use this method, your company must have at least one office set up, and you must have permissions to create rooms.

        In Rooms Version 5, you must be one of the following:

        - An Admin
        - A Manager with the individual-level `canManageCompanyRooms` permission set to **true**
        - An Agent

        **Note**: If this functionality isn't already activated for Admins, contact your DocuSign Account Manager to have it turned on.

        ## Permissions

        In Rooms Version 6, you must be assigned to a role that has the **Create Rooms** permission set to **true**.
      operationId: Create Room
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the new room.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RoomForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/RoomForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/RoomForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoomForCreate'
        required: false
      responses:
        201:
          description: Room successfully created.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Room'
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
            text/json:
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateRoom
      x-ds-method: CreateRoom
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}:
    get:
      tags:
      - Rooms
      summary: Gets a room.
      description: This method returns details about a specific room.
      operationId: Get Room
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: includeFieldData
        in: query
        description: (Optional) When set to **true**, the response includes the field
          data from the room. This is the information that appears on the room's **Details**
          tab.
        schema:
          type: boolean
          default: false
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Room successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Room'
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
            text/json:
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoom
      x-ds-method: GetRoom
      x-ds-service: Rooms
      x-ds-in-sdk: true
    delete:
      tags:
      - Rooms
      summary: Deletes a room.
      description: |-
        This method deletes a room.

        **Note**: To use this method, you must have permissions to delete rooms.

        In Rooms v5, you must be one of the following:

        - An Admin
        - A Manager with the individual-level `canDeleteCompanyRooms` permission set to **true**
        - An Agent with the role-level **Agents can delete Rooms** permission set to **true**

        In Rooms v6, you must be assigned a role that has the **Delete Owned Rooms** permission set to **true** in the console. If you manage other members, this permission also enables you to delete rooms that are owned by the users that you manage.
      operationId: Delete Room
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Room successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteRoom
      x-ds-method: DeleteRoom
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/assignable_roles:
    get:
      tags:
      - Rooms
      summary: Gets assignable room-level roles in v6.
      description: |-
        This method returns the room-level roles that the current user can assign to the members that they invite to a room.

        **Note**: This method works only for Rooms v6 and only returns roles that have `isExternal` set to **true**.
      operationId: Rooms Get Assignable Roles
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: assigneeEmail
        in: query
        description: (Optional) The email address of a specific member. Using this
          parameter returns only the roles that the current user can assign to the
          member with that email address.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          (Optional) A search filter that returns assignable roles by the beginning of the role name.

          **Note**: You do not enter a wildcard (*) at the end of the name fragment.
        schema:
          type: string
      - name: startPosition
        in: query
        description: (Optional) The index position within the total result set from
          which to start returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Assignable roles successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AssignableRoles'
            application/json:
              schema:
                $ref: '#/components/schemas/AssignableRoles'
            text/json:
              schema:
                $ref: '#/components/schemas/AssignableRoles'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetAssignableRoles
      x-ds-method: GetAssignableRoles
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/documents:
    get:
      tags:
      - Rooms
      summary: Gets a list of documents in a room.
      description: This method returns a list of documents that the current user can
        access for a specific room.
      operationId: Rooms Get Documents
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The index position within the total result set from
          which to start returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Documents successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomDocumentList'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDocumentList'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomDocumentList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetDocuments
      x-ds-method: GetDocuments
      x-ds-service: Rooms
      x-ds-in-sdk: true
    post:
      tags:
      - Rooms
      summary: Adds a document to a room.
      description: |+
        Adds a document to a room.

        The following properties in the request body are required. The `folderId` property is optional. All other properties are ignored.

        - `name`
        - `base64Contents`

        If a document with the specified name already exists, a counter is added to the name to make it unique.

        For example, to create a document named **hello.txt** that contains the text `hello, world`, the body of your request would look like this:

        ```
        {
          "name": "hello.txt",
          "base64Contents": "aGVsbG8sIHdvcmxkCg=="
        }
        ```

      operationId: Add Document ToRoom
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Contains information about a document.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Document'
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          text/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Document'
        required: false
      responses:
        201:
          description: Document successfully added.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AddDocumentToRoom
      x-ds-method: AddDocumentToRoom
      x-ds-service: Rooms
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/rooms/{roomId}/documents/contents:
    post:
      tags:
      - Rooms
      summary: Uploads the contents of a file as a document to a room.
      description: |-
        This method uploads the contents of file as a room document for the room that you specify.

        This is a multipart form request. You must include the following headers:

        - `Content-Type: multipart/form-data` (with a `boundary`)
        - `Content-Disposition: form-data`
        - `Content-Disposition: file` (with the `filename`)

        For an example and more information, see [Multipart Form Requests](https://developers.docusign.com/esign-rest-api/guides/requests-and-responses#multipart-form-requests).
      operationId: Add Document To Room Via File Upload
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Document Content
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  description: "Document"
                  format: binary
      responses:
        201:
          description: Document successfully added.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomDocument'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AddDocumentToRoomViaFileUpload
      x-ds-method: AddDocumentToRoomViaFileUpload
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/picture:
    put:
      tags:
      - Rooms
      summary: Updates the picture for a room.
      description: "Updates the photo for a room.\n\n## Supported file types\n\nThe\
        \ API supports the following file types:\n\n- jpg/jpeg\n- png\n- tiff\n- gif\n\
        \n## File size limit\n\nThe file size limit is approximately 40 MB.\n\n##\
        \ Supported content types\n\nThis endpoint supports the following content\
        \ types: \n\n## JSON\n\nTo submit a picture by using JSON, set the `Content-Type`\
        \ header to `application/json` and provide a `pictureForUpdate` object.\n\n\
        You can also set the `Content-Transfer-Encoding` header to `base64` to indicate\
        \ that the image is formatted as base64 instead of binary.\n\nExample:\n\n\
        **Header**: `Content-Type`: `application/json`\n\n**Request body content to\
        \ include**:\n\n```\n\"pictureForUpdate\":\n  {\n    \"fileName\":\"string\"\
        , \n    \"base64Contents\":\"string\"\n  }\n\n```\n\n## Multipart form data\n\
        \nYou can also submit multipart form data with parts that contain the image.\
        \ Multipart uploads remove the need to encode images in base64 format.\n\n\
        For details, see [Multipart Form Requests](https://developers.docusign.com/esign-rest-api/guides/requests-and-responses#multipart-form-requests).\n\
        \n\n## Other streamed binary content type\n\nYou can also use any other streamed\
        \ binary content type, but you must include either the query parameter `fileName`\
        \ or the `Content-Disposition` `filename` request header.\n\nExample:\n\n\
        **Header**: `Content-Disposition: file; filename=\"123sesamest.jpg\"`"
      operationId: Update Picture
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room for which you are updating the
          picture.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Image content
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  description: "Image"
                  format: binary
      responses:
        200:
          description: Picture successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomPicture'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: UpdatePicture
      x-ds-method: UpdatePicture
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/field_set:
    get:
      tags:
      - Rooms
      summary: Gets the field set for a room.
      description: |-
        Returns the field set that a room uses. This is the set of fields that appears on the room's **Details** tab in the console, such as `contactName` and `phone`.

        You can use this method to gain a better understanding of the room field data retrieved with the [Rooms::GetRoomFieldData](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData) method, and to determine the fields for which you can provide data when you create a new room.

        ## Permissions

        Anyone in the room can call this method.
      operationId: Get Room Field Set
      parameters:
      - name: roomId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The id of the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: FieldSet successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldSet'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldSet'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldSet'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoomFieldSet
      x-ds-method: GetRoomFieldSet
      x-ds-service: Rooms
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/rooms/{roomId}/task_lists:
    get:
      tags:
      - TaskLists
      summary: Gets task lists for a room.
      description: "Returns the task lists associated with a room.\n\n## Permissions\n\
        \n**Rooms Version 6**: You must either be a member of the room who has been\
        \ added to one or more tasks, or have one of the following permissions set\
        \ to **true**: \n\n- `canAddTasksToAnyTaskLists`\n- `canApplyTaskList`\n-\
        \ `canRemoveAnyTaskList`\n- `canSubmitTaskList`\n- `canReviewTaskList`\n\n\
        **Note**: If a room has multiple tasks lists, you only see the task lists\
        \ that contain tasks to which you have been added.\n\n**Rooms Version 5**:\
        \ You must be room owner, a member of the room who has been added to one or\
        \ more tasks, or be a Manager for whom the `canManageCompanyRooms` permission\
        \ is set to *true*."
      operationId: Get Task Lists
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The id of the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Task lists successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskListSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskListSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTaskLists
      x-ds-method: GetTaskLists
      x-ds-service: TaskLists
      x-ds-in-sdk: true
    post:
      tags:
      - TaskLists
      summary: Applies a task list to a room.
      description: "Applies a task list to a room, based on the `taskTemplateId` that\
        \ you specify in the `taskList` request body.\n\n**Note**: You must first\
        \ create a task list template in the console. You cannot create a task list\
        \ template by using the API at this time. To get the `taskListTemplateId`,\
        \ use the \tTaskListTemplates::GetTaskListTemplates method.\n\n## Permissions\n\
        \n**Rooms Version 6**: You must have the `canApplyTaskList` permission set\
        \ to **true**.\n\n**Rooms Version 5**: You must either be the owner or co-owner\
        \ of the room or have a Manager role for which the `canManageCompanyRooms`\
        \ permission is set to **true**."
      operationId: Create Task List
      parameters:
      - name: roomId
        in: path
        description: (Required) The id of the room.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the task list template to use to create the new task list.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TaskListForCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/TaskListForCreate'
          text/json:
            schema:
              $ref: '#/components/schemas/TaskListForCreate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TaskListForCreate'
        required: false
      responses:
        201:
          description: Task lists successfully created.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskList'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: CreateTaskList
      x-ds-method: CreateTaskList
      x-ds-service: TaskLists
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/room_templates:
    get:
      tags:
      - RoomTemplates
      summary: Gets room templates.
      description: |+
        This method returns a list of room templates that the user can use to create a new room. The response includes company and region-level templates.

      operationId: Get Room Templates
      parameters:
      - name: officeId
        in: query
        description: "(Optional) The ID of the office for which the user wants to\
          \ create a room. When you pass in a value for this parameter, only room\
          \ templates that are valid for that office appear in the results. For users\
          \ who are not Admins, the default is the id of the user's default office.\n\
          However, you can specify a value if the user belongs to multiple offices.\n\
          \nIf the user is an Admin, set the `forAdmin` search parameter to **true**\
          \ instead and omit the `officeId` parameter. "
        schema:
          type: integer
          format: int32
      - name: onlyAssignable
        in: query
        description: (Optional) When set to **true**, returns only the roles that
          the current user can assign to someone else. The default value is **false**.
        schema:
          type: boolean
          default: false
      - name: onlyEnabled
        in: query
        description: When set to true, only returns room templates that are not disabled.
        schema:
          type: boolean
          default: true
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: startPosition
        in: query
        description: (Optional) The index position within the total result set from
          which to start returning values. The default value is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved room templates for the caller
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoomTemplatesSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/RoomTemplatesSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/RoomTemplatesSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetRoomTemplates
      x-ds-method: GetRoomTemplates
      x-ds-service: RoomTemplates
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/task_lists/{taskListId}:
    delete:
      tags:
      - TaskLists
      summary: Deletes a task list from a room.
      description: "Deletes the specified task list from a room. If there are attached\
        \ documents, they will remain in the associated room.\n\n## Permissions\n\n\
        **Rooms Version 6**: You must have the `canRemoveAnyTaskList` permission set\
        \ to **true**: \n\n\n**Rooms Version 5**: You must either be the owner or\
        \ co-owner of the room or have a Manager/Admin role for which the `canManageCompanyRooms`\
        \ permission is set to true.\n"
      operationId: Delete Task List
      parameters:
      - name: taskListId
        in: path
        description: The id of the task list.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Task list successfully deleted.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: DeleteTaskList
      x-ds-method: DeleteTaskList
      x-ds-service: TaskLists
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/task_list_templates:
    get:
      tags:
      - TaskListTemplates
      summary: Gets task list templates.
      description: |+
        Returns all task list templates associated with the active user's company.

        ## Permissions

        Anyone with a valid access token can call this method.

      operationId: Get Task List Templates
      parameters:
      - name: startPosition
        in: query
        description: (Optional) The starting zero-based index position from which
          to start returning values. The default is `0`.
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        description: (Optional) The number of results to return. This value must be
          a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'Successfully returned list of task list '
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TaskListTemplateList'
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListTemplateList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskListTemplateList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetTaskListTemplates
      x-ds-method: GetTaskListTemplates
      x-ds-service: TaskListTemplates
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/users:
    get:
      tags:
      - Users
      summary: Gets a list of users.
      description: Returns a list of users associated with an account based on the
        criteria that you specify.
      operationId: Get Users
      parameters:
      - name: filter
        in: query
        description: "(Optional) Filters results by name and email address. This is\
          \ a  \"starts with\" filter, which means that you can enter only the beginning\
          \ of a name or email address. \n\n**Note**: You do not use a wildcard with\
          \ this filter."
        schema:
          type: string
      - name: sort
        in: query
        description: |-
          (Optional) Specifies how to sort the results. Valid values are:

          - `FirstNameAsc`
          - `LastNameAsc`
          - `EmailAsc`
          - `FirstNameDesc`
          - `LastNameDesc`
          - `EmailDesc`
        schema:
          type: string
          enum:
          - FirstNameAsc
          - LastNameAsc
          - EmailAsc
          - FirstNameDesc
          - LastNameDesc
          - EmailDesc
      - name: defaultOfficeId
        in: query
        description: (Optional) Filters for users who have this office id as their
          default office id.
        schema:
          type: integer
          format: int32
      - name: accessLevel
        in: query
        description: "(Optional) Filters for users who have the specified access level.\
          \ A user's access level and role determine the types of resources and actions\
          \ that are available to them.\n\nValid values are:\n- Company: Users with\
          \ this access level can administer resources across the company.\n- Region:\
          \ Users with this access level can administer offices and other resources\
          \ within their regions. \n- Office: Users with this access level can administer\
          \ resources within their offices.\n- Contributor: Users with this access\
          \ level can only administer their own resources.\n\n**Note**: In requests,\
          \ the values that you may use for this property depend on your permissions\
          \ and whether you can add users at your access level or lower. This property\
          \ applies only to Rooms Version 6. "
        schema:
          type: string
          enum:
          - Contributor
          - Office
          - Region
          - Company
          - Admin
      - name: titleId
        in: query
        description: (Optional) For Rooms Version 5 only, filters for users whose
          managers have the specified `titleId`.
        schema:
          type: integer
          format: int32
      - name: roleId
        in: query
        description: (Optional) For Rooms Version 6 only, filters for users who have
          the specified `roleId`.
        schema:
          type: integer
          format: int32
      - name: status
        in: query
        description: |-
          (Optional) Filters for users who have the specified `status`.

          Valid values are:

          - `Active`: The user is active.
          - `Pending`: The user has been invited but has not yet accepted the invitation.
        schema:
          type: string
          enum:
          - Active
          - Pending
      - name: lockedOnly
        in: query
        description: (Optional) When set to **true**, filters for users whose accounts
          are locked.
        schema:
          type: boolean
      - name: startPosition
        in: query
        description: '(Optional) The starting zero-based index position within the
          result set from which to begin the response. The default is `0`. '
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        description: (Optional) The maximum number of users to return in the response.
          This value must be a number between `1` and `100` (default).
        schema:
          type: integer
          format: int32
          default: 100
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Users information successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserSummaryList'
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummaryList'
            text/json:
              schema:
                $ref: '#/components/schemas/UserSummaryList'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetUsers
      x-ds-method: GetUsers
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/users/{userId}:
    get:
      tags:
      - Users
      summary: Gets a user.
      description: Returns details about the specified user.
      operationId: Get User
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        200:
          description: User information successfully retrieved.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: GetUser
      x-ds-method: GetUser
      x-ds-service: Users
      x-ds-in-sdk: true
    put:
      tags:
      - Users
      summary: Updates a user's default office.
      description: |-
        Changes a user's default office. This is the office to which the user belongs  by default.

        ## Permissions

        You must also have the correct **Member Management** permissions to update the user.

        **Rooms Version 5**: `canManageCompanyMembers` must be set to **true**.

        **Rooms Version 6**: You must have at least one of the following permissions set to **true**, depending on the level of the user that you want to update:

        - `canManageMemberLowerAccessLevel`: Users can modify other users who have a lower access level than their own (in offices or regions that they oversee).
        - `canManageMemberSameAccessLevel`: Users can modify other users who have the same access level as their own (in offices or regions that they oversee or belong to).
      operationId: Update User
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: 'This request object contains the information to use to update a user''s default office. '
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserForUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserForUpdate'
          text/json:
            schema:
              $ref: '#/components/schemas/UserForUpdate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserForUpdate'
        required: false
      responses:
        200:
          description: User information successfully updated.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: UpdateUser
      x-ds-method: UpdateUser
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
    delete:
      tags:
      - Users
      summary: Removes a user from a company account.
      description: "Removes the specified user from the specified account.\n\n## Permissions\n\
        \nTo remove a user who has a lower access level, you must have the `canRemoveCompanyMemberLowerAccessLevel`\
        \ permission set to **true**. \n\nTo remove a user who has the same access\
        \ level, you must have the `canRemoveCompanyMemberSameAccessLevel` permission\
        \ set to **true**. "
      operationId: Remove User
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: The User was successfully removed.
          content: {}
        400:
          description: The User could not be removed.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RemoveUser
      x-ds-method: RemoveUser
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/users/invite_user:
    post:
      tags:
      - Users
      summary: Invites a user to a v6 company account.
      description: |
        Invites a new user to join a company account on Rooms Version 6. You specify the custom role and access level that you want to give to the user in the `invitee` request body.

        ## Permissions

        To invite users to a company in Rooms Version 6, you must be either a Default Admin or another authorized user who has access to all of the locations to which the new user is being invited and one of the following `userPermissions` set to **true**:

        - `canAddMemberAndSetRoleLowerAccessLevel`: Users can add other users who have a lower access level than their own and set those users' roles (in offices or regions that they oversee).
        - `canAddMemberAndSetRoleSameAccessLevel`: Users can add other users who have the same access level as their own or lower and set those users' roles (in offices or regions that they oversee or belong to).

        **Important**: Before you invite users in the Rooms Version 6, we strongly recommend that you set up custom roles for your company. If you do not, all new users will be added as administrators. For more information, see [Roles][Roles].

        [Roles]: https://developers.docusign.com/docs/rooms-api/reference/Roles/Roles/

        **Note**:  This method is used only with Rooms v6. To invite a user in Rooms v5, see the following Members methods:

        - [InviteClassicAdmin][InviteClassicAdmin]
        - [InviteClassicAgent][InviteClassicAgent]
        - [InviteClassicManager][InviteClassicManager]

        [InviteClassicAdmin]:   https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicAdmin/
        [InviteClassicAgent]:   https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicAgent/
        [InviteClassicManager]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteClassicManager/
      operationId: Invite User to Account
      parameters:
      - name: accountId
        in: path
        description: (Required) The id of the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the user that you are inviting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserToInvite'
          application/json:
            schema:
              $ref: '#/components/schemas/UserToInvite'
          text/json:
            schema:
              $ref: '#/components/schemas/UserToInvite'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserToInvite'
        required: false
      responses:
        201:
          description: User successfully invited.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: InviteUser
      x-ds-method: InviteUser
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/invite_classic_admin:
    post:
      tags:
      - Users
      summary: Invites a user to a v5 company account as an Admin.
      description: |
        Invites a new user to join a company account on Rooms Version 5 as an Admin.

        To invite users to a company in Rooms Version 5, you must either be an Admin or a Manager for whom the `canManageCompanyMembers` permission is set to **true**.

        **Note**: If you are using Rooms Version 6, use the [Users::InviteUser][UsersInviteUser] method instead.

        [UsersInviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteUser/```
      operationId: Invite Classic Admin
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the person who you want to invite.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ClassicAdminToInvite'
          application/json:
            schema:
              $ref: '#/components/schemas/ClassicAdminToInvite'
          text/json:
            schema:
              $ref: '#/components/schemas/ClassicAdminToInvite'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ClassicAdminToInvite'
        required: false
      responses:
        201:
          description: User successfully invited.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: InviteClassicAdmin
      x-ds-method: InviteClassicAdmin
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/invite_classic_manager:
    post:
      tags:
      - Users
      summary: Invites a user to a v5 company account as a Manager.
      description: |
        Invites a new user to join a company account on Rooms Version 5 as a Manager.

        To invite users to a company in Rooms Version 5, you must either be an Admin or a Manager for whom the `canManageCompanyMembers` permission is set to **true**.

        **Note**: If you are using Rooms Version 6, use the [Users_InviteUser][UsersInviteUser] method instead.

        [UsersInviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteUser/```
      operationId: InviteClassic Manager
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the person who you want to invite.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ClassicManagerToInvite'
          application/json:
            schema:
              $ref: '#/components/schemas/ClassicManagerToInvite'
          text/json:
            schema:
              $ref: '#/components/schemas/ClassicManagerToInvite'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ClassicManagerToInvite'
        required: false
      responses:
        201:
          description: User successfully invited.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: InviteClassicManager
      x-ds-method: InviteClassicManager
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/invite_classic_agent:
    post:
      tags:
      - Users
      summary: Invites a user to a v5 company account as an Agent.
      description: |
        Invites a new user to join a company account on Rooms Version 5 as an Agent.

        To invite users to a company in Rooms Version 5, you must either be an Admin or a Manager for whom the `canManageCompanyMembers` permission is set to **true**.

        **Note**: If you are using Rooms Version 6, use the [Users_InviteUser][UsersInviteUser] method instead.

        [UsersInviteUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/InviteUser/```
      operationId: Invite Classic Agent
      parameters:
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about the person who you want to invite.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ClassicAgentToInvite'
          application/json:
            schema:
              $ref: '#/components/schemas/ClassicAgentToInvite'
          text/json:
            schema:
              $ref: '#/components/schemas/ClassicAgentToInvite'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ClassicAgentToInvite'
        required: false
      responses:
        201:
          description: User successfully invited.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: InviteClassicAgent
      x-ds-method: InviteClassicAgent
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/reinvite:
    post:
      tags:
      - Users
      summary: Reinvites a user to join a company account.
      description: |-
        Reinvites an unactivated user to join a company account. You can use this method with either Rooms Version 5 or Rooms Version 6.

        Invitations expire after 30 days and can no longer be accepted. Use this method to send a new copy of an invitation to a pending user.
      operationId: Reinvite User
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: User successfully reinvited.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: ReinviteUser
      x-ds-method: ReinviteUser
      x-ds-service: Users
      x-ds-in-sdk: true
  /v2/accounts/{accountId}/users/{userId}/add_to_office:
    post:
      tags:
      - Users
      summary: Adds a user to an office.
      description: |-
        Adds an existing user to a single office. You specify the office to which you want to add the user in the `designatedOffice` request body.

        To add a user to multiple offices, you must make this call separately for each office.

        **Note**: The `accessLevel` of the user that you are adding must be `contributor` or `office`.

        ## Permissions

        You must also have the correct **Member Management** permissions.

        **Rooms Version 5**: `canManageCompanyMembers` must be set to **true**.

        **Rooms Version 6**: You must have at least one of the following permissions set to **true**, depending on the level of the user that you want to add or remove:

        - `canManageMemberLowerAccessLevel`: Users can add and remove other users who have a lower access level than their own (in offices or regions that they oversee) from a region or office. They can also modify those users.
        - `canManageMemberSameAccessLevel`: Users can add and remove other users who have the same access level as their own (in offices or regions that they oversee or belong to) from a region or office.  They can also modify those users.
      operationId: Add User To Office
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the office that you want to add a member to or remove a member from.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          application/json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          text/json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
        required: false
      responses:
        204:
          description: User successfully added to the office.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AddUserToOffice
      x-ds-method: AddUserToOffice
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/remove_from_office:
    post:
      tags:
      - Users
      summary: Removes a user from an office.
      description: |-
        Removes a user from a single office. You specify the office from which you want to remove the user in the `designatedOffice` request body.

        The user still maintains their other office, region, company, and account associations.

        **Note**: You cannot remove a user from their default office. You must first assign the user a different default office by using the [Users::updateUser][updateUser] method.

        [updateUser]: https://developers.docusign.com/docs/rooms-api/reference/Users/Users/UpdateUser/

        ## Permissions

        You must have the correct **Member Management** permissions.

        **Rooms Version 5**: `canManageCompanyMembers` must be set to **true**.

        **Rooms Version 6**: You must have at least one of the following permissions set to **true**, depending on the level of the user that you want to add or remove:

        - `canManageMemberLowerAccessLevel`: Users can add or remove other users who have a lower access level than their own (in offices or regions that they oversee) from a region or office.
        - `canManageMemberSameAccessLevel`: Users can modify other users who have the same access level as their own (in offices or regions that they oversee or belong to) from a region or office.
      operationId: Remove User From Office
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the office that you want to add a member to or remove a member from.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          application/json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          text/json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DesignatedOffice'
        required: false
      responses:
        204:
          description: User successfully removed from the office.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RemoveUserFromOffice
      x-ds-method: RemoveUserFromOffice
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/add_to_region:
    post:
      tags:
      - Users
      summary: Adds a user to a region.
      description: |-
        Adds an existing user to a region. You specify the region to which you want to add the user in the `designatedRegion` request body.

        To add a user to multiple regions, you must make this call separately for each region.

        **Note**: The `accessLevel` of the user that you are adding must be `region`.

        ## Permissions

        You must also have the correct **Member Management** permissions.

        **Rooms Version 5**: `canManageCompanyMembers` must be set to **true**.

        **Rooms Version 6**: You must have at least one of the following permissions set to **true**, depending on the level of the user that you want to add or remove:

        - `canManageMemberLowerAccessLevel`: Users can add or remove other users who have a lower access level than their own (in offices or regions that they oversee).
        - `canManageMemberSameAccessLevel`: Users can modify other users who have the same access level as their own (in offices or regions that they oversee or belong to).
      operationId: Add User To Region
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally-unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the region associated with the member.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          text/json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
        required: false
      responses:
        204:
          description: User successfully added to the region.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: AddUserToRegion
      x-ds-method: AddUserToRegion
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/remove_from_region:
    post:
      tags:
      - Users
      summary: Removes a user from a region.
      description: |-
        Removes a user from a single region. You specify the region from which you want to remove the user in the `designatedRegion` request body.

        The user still maintains their other region, company, and account associations.

        ## Permissions

        You must have the correct **Member Management** permissions.

        **Rooms Version 5**: `canManageCompanyMembers` must be set to **true**.

        **Rooms Version 6**: You must have at least one of the following permissions set to **true**, depending on the level of the user that you want to add or remove:

        - `canManageMemberLowerAccessLevel`: Users can add or remove other users who have a lower access level than their own (in offices or regions that they oversee) from a region or office.
        - `canManageMemberSameAccessLevel`: Users can modify other users who have the same access level as their own (in offices or regions that they oversee or belong to) from a region or office.

        **Note**: You cannot remove a user from the region that contains their default office. You must first change the user's default office by using the Users::UpdateUser method.
      operationId: Remove User From Region
      parameters:
      - name: userId
        in: path
        description: (Required) The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: (Required) The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Information about the region associated with the member.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          text/json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DesignatedRegion'
        required: false
      responses:
        204:
          description: User successfully removed from the region.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: RemoveUserFromRegion
      x-ds-method: RemoveUserFromRegion
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/lock:
    post:
      tags:
      - Users
      summary: Locks a user's account.
      description: "Locks the account of the specified user. Use the `reason` property\
        \ in the request body to specify why the account was locked.\n\n## Permissions\n\
        \n**Rooms Version 6**: \nTo lock a user who has a lower access level than\
        \ you, you must have the `canManageMemberLowerAccessLevel` permission set\
        \ to **true**.\nTo lock a user who has the same access level as you, you must\
        \ have the `canManageMemberSameAccessLevel` permission set to **true** \n\n\
        **Rooms Version 5**: \nTo lock a user, you must have the `canManageCompanyMembers`\
        \ permission set to **true**.\n"
      operationId: Lock User
      parameters:
      - name: userId
        in: path
        description: User Id of the user attempting to be locked.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      requestBody:
        description: Details about a locked account.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LockedOutDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/LockedOutDetails'
          text/json:
            schema:
              $ref: '#/components/schemas/LockedOutDetails'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LockedOutDetails'
        required: false
      responses:
        204:
          description: User has been successfully locked out.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: LockUser
      x-ds-method: LockUser
      x-ds-service: Users
      x-ds-in-sdk: true
      x-codegen-request-body-name: body
  /v2/accounts/{accountId}/users/{userId}/unlock:
    post:
      tags:
      - Users
      summary: Unlocks  a user's account.
      description: "Unlocks the account of  the specified user.\n\n## Permissions\n\
        \n**Rooms Version 6**: \nTo unlock a user who has a lower access level than\
        \ you, you must have the `canManageMemberLowerAccessLevel` permission set\
        \ to **true**.\nTo unlock a user who has the same access level as you, you\
        \ must have the `canManageMemberSameAccessLevel` permission set to **true**\
        \ \n\n**Rooms Version 5**: \nTo unlock a user, you must have the `canManageCompanyMembers`\
        \ permission set to **true**.\n"
      operationId: Unlock User
      parameters:
      - name: userId
        in: path
        description: The id of the user.
        required: true
        schema:
          type: integer
          format: int32
      - name: accountId
        in: path
        description: The globally unique identifier (GUID) for the account.
        required: true
        schema:
          type: string
      responses:
        204:
          description: User has been successfully unlocked.
          content: {}
        400:
          description: Bad request. See ErrorCode and Message for details
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        401:
          description: Not authorized to make this request.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-ds-methodname: UnlockUser
      x-ds-method: UnlockUser
      x-ds-service: Users
      x-ds-in-sdk: true
components:
  schemas:
    FieldsCustomDataFilterType:
      type: string
      description: ""
      enum:
      - None
      - IsRequiredOnCreate
      - IsRequiredOnSubmit
      x-ds-definition-name: FieldsCustomDataFilterType
      x-ms-summary: ""
    AccountSummary:
      type: object
      properties:
        companyId:
          type: integer
          description: The id of the company.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the company.
          readOnly: true
        companyVersion:
          description: "Product version"
          $ref: '#/components/schemas/ProductVersion'
        docuSignAccountGuid:
          type: string
          description: The globally-unique identifier (GUID) for the DocuSign Rooms
            account.
          readOnly: true
        defaultFieldSetId:
          type: string
          description: The id of the company's default field set. A field set is a
            set of data fields and the information about those data fields that the
            system uses to configure rooms. It corresponds to the **Admin > Company
            > Room Details** area in the console.
          format: uuid
          readOnly: true
        requireOfficeLibraryAssignments:
          type: boolean
          description: "Require office library assignments"
          readOnly: true
      description: Contains details about a company account.
      x-ds-definition-name: AccountSummary
      x-ms-summary: Contains details about a company account.
    DesignatedOffice:
      required:
      - officeId
      type: object
      properties:
        officeId:
          type: integer
          description: (Required) The id of the office. This is the id that the system
            generated when you created the office.
          format: int32
      description: This object contains information about the office that you want
        to add a member to or remove a member from.
      x-ds-definition-name: DesignatedOffice
      x-ms-summary: This object contains information about the office that you want
        to add a member to or remove a member from.
    DesignatedRegion:
      required:
      - regionId
      type: object
      properties:
        regionId:
          type: integer
          description: (Required) The id of the region. This is the id that the system
            generated when you created the region.
          format: int32
      description: This object contains information about the region associated with
        the member.
      x-ds-definition-name: DesignatedRegion
      x-ms-summary: This object contains information about the region associated with
        the member.
    Document:
      required:
      - base64Contents
      - name
      type: object
      properties:
        documentId:
          type: integer
          description: The ID of the document.
          format: int32
        name:
          type: string
          description: The file name associated with the document.
        roomId:
          type: integer
          description: The id of the room associated with the document.
          format: int32
        ownerId:
          type: integer
          description: The id of the user who owns the document.
          format: int32
        size:
          type: integer
          description: The size of the document in bytes.
          format: int64
        folderId:
          type: integer
          description: The id of the folder that holds the document.
          format: int32
        createdDate:
          type: string
          description: |-
            The date and time when the document was created. This is a read-only value that the service assigns.

            Example: `2019-11-11T17:15:14.82`
          format: date-time
        isSigned:
          type: boolean
          description: When set to **true**, indicates that the document is signed.
        contentType:
          type: string
          description: "Content type"
        base64Contents:
          type: string
          description: The base64-encoded contents of the document. This property
            is only included in the response when you use the `includeContents` query
            parameter and set it to **true**.
      description: Contains information about a document.
      x-ds-definition-name: Document
      x-ms-summary: Contains information about a document.
    DocumentUser:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
        documentId:
          type: integer
          description: The ID of the document.
          format: int32
        name:
          type: string
          description: The file name associated with the document.
        hasAccess:
          type: boolean
          description: '**True** if the user `userId` has access to this document.'
        canApproveTask:
          type: boolean
          description: '**True** if the user `userId` has can approve a task for this
            document.'
        canAssignToTaskList:
          type: boolean
          description: '**True** if the user `userId` can assign this document to
            a task list.'
        canCopy:
          type: boolean
          description: '**True** if the user `userId` can make a copy of this document.'
        canDelete:
          type: boolean
          description: '**True** if the user `userId` can delete this document.'
        canRemoveFromTaskList:
          type: boolean
          description: '**True** if the user `userId` can remove this document from
            a task list.'
        canRemoveApproval:
          type: boolean
          description: '**True** if the user `userId` can remove approval for this
            document.'
        canRename:
          type: boolean
          description: '**True** if the user `userId` can rename this document.'
        canShare:
          type: boolean
          description: '**True** if the user `userId` can share this document.'
        canViewActivity:
          type: boolean
          description: '**True** if the user `userId` can view activity on this document.'
      description: ""
      x-ds-definition-name: DocumentUser
      x-ms-summary: ""
    DocumentUserForCreate:
      required:
      - userId
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
      description: "User information to grant access"
      x-ds-definition-name: DocumentUserForCreate
      x-ms-summary: ""
    AccessLevel:
      type: string
      description: "Access level"
      enum:
      - Contributor
      - Office
      - Region
      - Company
      - Admin
      x-ds-definition-name: AccessLevel
      x-ms-summary: ""
    AccountStatus:
      type: string
      description: ""
      enum:
      - Active
      - Pending
      x-ds-definition-name: AccountStatus
      x-ms-summary: ""
    MemberSortingOption:
      type: string
      description: ""
      enum:
      - FirstNameAsc
      - LastNameAsc
      - EmailAsc
      - FirstNameDesc
      - LastNameDesc
      - EmailDesc
      x-ds-definition-name: MemberSortingOption
      x-ms-summary: ""
    ProductVersion:
      type: string
      description: "Product version"
      enum:
      - v5
      - v6
      x-ds-definition-name: ProductVersion
      x-ms-summary: ""
    RoomStatus:
      type: string
      description: ""
      enum:
      - Active
      - Pending
      - Closed
      - Open
      x-ds-definition-name: RoomStatus
      x-ms-summary: ""
    RoomUserSortingOption:
      type: string
      description: ""
      enum:
      - FirstNameAsc
      - LastNameAsc
      - EmailAsc
      - FirstNameDesc
      - LastNameDesc
      - EmailDesc
      x-ds-definition-name: RoomUserSortingOption
      x-ms-summary: ""
    ESignAccountRoleSettings:
      type: object
      properties:
        allowAccountManagement:
          type: boolean
          description: |+
            A Boolean specifying whether users with this eSignature permission profile can manage the Rooms account. This property is read only and has the following values:

            - `DS Admin` permission profile: **true**
            - `DS Sender` permission profile: **false**
            - `DS Viewer` permission profile: **false**




      description: This object contains details about the permissions associated with
        a eSignature permission profile.
      x-ds-definition-name: ESignAccountRoleSettings
      x-ms-summary: This object contains details about the permissions associated
        with a eSignature permission profile.
    ESignPermissionProfile:
      type: object
      properties:
        eSignPermissionProfileId:
          type: string
          description: When an administrator or authorized member invites a new user
            to become an account member, the system also creates an eSignature account
            for the invitee at the same time. The `eSignPermissionProfileId` is the
            id of the eSignature permission set to assign to the member.
        name:
          type: string
          description: 'The name of the eSignature permission profile. Valid values
            are:'
        settings:
          $ref: '#/components/schemas/ESignAccountRoleSettings'
      description: 'When an administrator or authorized member invites a new user
        to become an account member, the system also creates an eSignature account
        for the invitee at the same time. This object contains information about the
        eSignature permission profile, which controls member access to the eSignature
        account. '
      x-ds-definition-name: ESignPermissionProfile
      x-ms-summary: 'When an administrator or authorized member invites a new user
        to become an account member, the system also creates an eSignature account
        for the invitee at the same time. This object contains information about the
        eSignature permission profile, which controls member access to the eSignature
        account. '
    ESignPermissionProfileList:
      type: object
      properties:
        permissionProfiles:
          type: array
          description: An array of eSignature `permissionProfile` objects.
          readOnly: true
          items:
            $ref: '#/components/schemas/ESignPermissionProfile'
      description: This object contains a list of eSignature permission profiles.
      x-ds-definition-name: ESignPermissionProfileList
      x-ms-summary: This object contains a list of eSignature permission profiles.
    CustomData:
      type: object
      properties:
        isRequiredOnCreate:
          type: boolean
          description: When set to **true**, the field is required when a new room
            is created.
          readOnly: true
        isRequiredOnSubmit:
          type: boolean
          description: When set to **true**, the field is required when a room is
            submitted for review.
          readOnly: true
      description: Contains information about whether the field is required when a
        room is created or submitted for review.
      x-ds-definition-name: CustomData
      x-ms-summary: Contains information about whether the field is required when
        a room is created or submitted for review.
    DependsOn:
      type: object
      properties:
        actionType:
          type: string
          description: |-
            The child field action that depends on the parent field.

            Example: `visibility`

            For example, in the console, you must select a country for a list of states to become visible.
          readOnly: true
        parentApiName:
          type: string
          description: |-
            The name that the Rooms API uses for the parent field.

            Example: `country`
          readOnly: true
      description: Contains information about a parent field on which this field depends.
      x-ds-definition-name: DependsOn
      x-ms-summary: Contains information about a parent field on which this field
        depends.
    Field:
      type: object
      properties:
        fieldId:
          type: string
          description: An id that uniquely identifies the instance of a `fieldDefinition`
            within a field set.
          format: uuid
          readOnly: true
        fieldDefinitionId:
          type: string
          description: The id of the DocuSign field definition from which this field
            derives. When an Admin user configures a field set by using the API, this
            is the id that they use to add this field definition to the field set.
            The original field definition associated with this id contains more information
            about the field, such as the default title, default API name, and configurations
            such as the maximum length or the maximum value allowed.
          format: uuid
          readOnly: true
        title:
          type: string
          description: |-
            The human-readable title or name of the field.

            Example: `Company contact name`
          readOnly: true
        apiName:
          type: string
          description: "The name that the Rooms API uses for the field. \n\nExample:\
            \ `companyContactName`\n\n**Note**: When you create a new room, you use\
            \ the `apiName` values for fields to specify the details that you want\
            \ to appear on the room's **Details** tab."
          readOnly: true
        type:
          type: string
          description: |+
            The type of field. The valid values are:

            - `Date`
            - `Text`
            - `Checkbox`
            - `Currency`
            - `Numeric`
            - `SelectList`
            - `TextArea`
            - `Percentage`
            - `Integer`

          readOnly: true
        fields:
          type: array
          description: An array of subfields.
          readOnly: true
          items:
            $ref: '#/components/schemas/Field'
        configuration:
          $ref: '#/components/schemas/FieldConfiguration'
        customData:
          $ref: '#/components/schemas/CustomData'
      description: Contains details about a field in a field set.
      x-ds-definition-name: Field
      x-ms-summary: Contains details about a field in a field set.
    FieldConfiguration:
      type: object
      properties:
        maxValue:
          type: number
          description: The maximum value allowed for the field.
          format: double
          readOnly: true
        minValue:
          type: number
          description: The minimum value allowed for the field.
          format: double
          readOnly: true
        multipleOf:
          type: number
          description: This property is used for validation. When you set a number
            value for this property, the value for the field must be a multiple of
            it.
          format: double
          readOnly: true
        maxLength:
          type: integer
          description: The maximum length of the field.
          format: int32
          readOnly: true
        minLength:
          type: integer
          description: The minimum length of the field.
          format: int32
          readOnly: true
        pattern:
          type: string
          description: The regular expression pattern to use to validate the value
            of the field.
          readOnly: true
        isPublisher:
          type: boolean
          description: When set to **true**, the field is a parent field on which
            one or more child fields depend.
          readOnly: true
        dependsOn:
          type: array
          description: This property applies to child fields. It contains information
            about the parent field that must have a value set in order for this field
            to have a value. For example, you must specify a country before you can
            select a state.
          readOnly: true
          items:
            $ref: '#/components/schemas/DependsOn'
        options:
          type: array
          description: An array of options in a list.
          readOnly: true
          items:
            $ref: '#/components/schemas/SelectListFieldOption'
      description: Contains details about how a field is configured.
      x-ds-definition-name: FieldConfiguration
      x-ms-summary: Contains details about how a field is configured.
    FieldData:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
          description: "Field data is a collection of name/value pairs where the names\
            \ correspond to the fields in the room's **Details** tab. The value of\
            \ name/value object can be a field data collection itself. These collections\
            \ are implemented as JSON objects.\n\nFor example, the field data for\
            \ fields named \"Tax annual amount\" and \"buyer1\" might look like this:\
            \ \n\n\n```\n{\n  \"data\": {\n    \"taxAnnualAmount\": 3389.12,\n   \
            \ \"buyer1\": {\n      \"email\": \"lizzy@example.com\",\n      \"country\"\
            : \"England\",\n      \"businessPhone\": null,\n      \"name\": \"Elizabeth\
            \ Bennet\",\n      \"homePhone\": null,\n      \"city\": \"Meryton\",\n\
            \      \"address2\": null,\n      \"postalCode\": null,\n      \"state\"\
            : \"Hertfordshire\",\n      \"company\": null,\n      \"cellPhone\": null,\n\
            \      \"address1\": \"Longbourn Estate\"\n    }\n  }\n}\n```\n\n"
      description: The field data associated with a room. See [Rooms::GetRoomFieldData](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData).
      x-ds-definition-name: FieldData
      x-ms-summary: The field data associated with a room. See [Rooms::GetRoomFieldData](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData).
    FieldDataForCreate:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
          description: "Field data is a collection of name/value pairs where the names\
            \ correspond to the fields in the room's **Details** tab. The value of\
            \ name/value object can be a field data collection itself. These collections\
            \ are implemented as JSON objects.\n\nFor example, the field data for\
            \ fields named \"Tax annual amount\" and \"buyer1\" might look like this:\
            \ \n\n\n```\n{\n  \"data\": {\n    \"taxAnnualAmount\": 3389.12,\n   \
            \ \"buyer1\": {\n      \"email\": \"lizzy@example.com\",\n      \"country\"\
            : \"England\",\n      \"businessPhone\": null,\n      \"name\": \"Elizabeth\
            \ Bennet\",\n      \"homePhone\": null,\n      \"city\": \"Meryton\",\n\
            \      \"address2\": null,\n      \"postalCode\": null,\n      \"state\"\
            : \"Hertfordshire\",\n      \"company\": null,\n      \"cellPhone\": null,\n\
            \      \"address1\": \"Longbourn Estate\"\n    }\n  }\n}\n```\n\n"
      description: Contains key-value pairs that specify the properties of the room
        and their values.
      x-ds-definition-name: FieldDataForCreate
      x-ms-summary: Contains key-value pairs that specify the properties of the room
        and their values.
    FieldDataForUpdate:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
          description: "Field data is a collection of name/value pairs where the names\
            \ correspond to the fields in the room's **Details** tab. The value of\
            \ name/value object can be a field data collection itself. These collections\
            \ are implemented as JSON objects.\n\nFor example, the field data for\
            \ fields named \"Tax annual amount\" and \"buyer1\" might look like this:\
            \ \n\n\n```\n{\n  \"data\": {\n    \"taxAnnualAmount\": 3389.12,\n   \
            \ \"buyer1\": {\n      \"email\": \"lizzy@example.com\",\n      \"country\"\
            : \"England\",\n      \"businessPhone\": null,\n      \"name\": \"Elizabeth\
            \ Bennet\",\n      \"homePhone\": null,\n      \"city\": \"Meryton\",\n\
            \      \"address2\": null,\n      \"postalCode\": null,\n      \"state\"\
            : \"Hertfordshire\",\n      \"company\": null,\n      \"cellPhone\": null,\n\
            \      \"address1\": \"Longbourn Estate\"\n    }\n  }\n}\n```\n\n"
      description: The field data to update. When updating field data, specify only
        the fields being updated.
      x-ds-definition-name: FieldDataForUpdate
      x-ms-summary: The field data to update. When updating field data, specify only
        the fields being updated.
    FieldSet:
      type: object
      properties:
        fieldSetId:
          type: string
          description: |
            The id of the field set.

            Example: `4aef602b-xxxx-xxxx-xxxx-08d76696f678`
          format: uuid
          readOnly: true
        title:
          type: string
          description: The title or name of the field set.
          readOnly: true
        fields:
          type: array
          description: An array of fields.
          readOnly: true
          items:
            $ref: '#/components/schemas/Field'
      description: Contains details about a field set.
      x-ds-definition-name: FieldSet
      x-ms-summary: Contains details about a field set.
    SelectListFieldOption:
      type: object
      properties:
        id:
          type: object
          description: |-
            The id of the list option.

            Example: `AU`
          readOnly: true
        title:
          type: string
          description: |-
            The title or name of the list option.

            Example: `Australia`
          readOnly: true
        order:
          type: integer
          description: |-
            The order of the list option in the list.

            Example: `3`
          format: int32
          readOnly: true
      description: Contains details about an option in a list.
      x-ds-definition-name: SelectListFieldOption
      x-ms-summary: Contains details about an option in a list.
    ExternalFormFillSession:
      type: object
      properties:
        url:
          type: string
          description: The URL for the new form fill session.
          format: uri
      description: Contains the URL for the new form fill session.
      x-ds-definition-name: ExternalFormFillSession
      x-ms-summary: Contains the URL for the new form fill session.
    ExternalFormFillSessionForCreate:
      required:
      - formId
      - roomId
      type: object
      properties:
        formId:
          type: string
          description: |
            (Required) The id of the form.

            Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
        roomId:
          type: integer
          description: (Required) The id of the room.
          format: int32
        xFrameAllowedUrl:
          type: string
          description: (Optional) This property specifies the origin on which the
            page is allowed to display in a frame.
      description: Contains the details required to create a form fill session.
      x-ds-definition-name: ExternalFormFillSessionForCreate
      x-ms-summary: Contains the details required to create a form fill session.
    FormDetails:
      type: object
      properties:
        formId:
          type: string
          description: |
            The id of the form.

            Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
          format: uuid
          readOnly: true
        name:
          type: string
          description: |-
            The name of the form.

            Example: `MORe Private Network Addendum`
          readOnly: true
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
          readOnly: true
        lastUpdatedDate:
          type: string
          description: |-
            The UTC date and time when the item was last updated. This is a read-only value that the service assigns.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
          readOnly: true
        availableOnDate:
          type: string
          description: The UTC DateTime when the form was made available or published.
            (It is possible for a form to be published but not yet available.)
          format: date-time
          readOnly: true
        ownerName:
          type: string
          description: |-
            The name of the organization that owns the form.

            Example: `Mainstreet organization of Realtors`
          readOnly: true
        version:
          type: string
          description: "The version of the form. \n\nExample: `1`"
          readOnly: true
        numberOfPages:
          type: integer
          description: |-
            The number of pages in the form.

            Example: `2`
          format: int32
          readOnly: true
      description: This resource contains details about a form, such as the date it
        was created and last updated, the number of pages, the form owner, and other
        information.
      x-ds-definition-name: FormDetails
      x-ds-category: Forms
      x-ds-order: "10"
      x-ms-summary: This resource contains details about a form, such as the date
        it was created and last updated, the number of pages, the form owner, and
        other information.
    FormForAdd:
      required:
      - formId
      type: object
      properties:
        formId:
          type: string
          description: (Required) The id of the form.
          format: uuid
      description: Contains details about the form that you want to add.
      x-ds-definition-name: FormForAdd
      x-ms-summary: Contains details about the form that you want to add.
    FormGroup:
      type: object
      properties:
        formGroupId:
          type: string
          description: |
            The ID of the form group.

            Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
          format: uuid
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        officeIds:
          uniqueItems: true
          type: array
          description: An array of office IDs.
          readOnly: true
          items:
            type: integer
            format: int32
        forms:
          type: array
          description: A list of forms.
          readOnly: true
          items:
            $ref: '#/components/schemas/GroupForm'
      description: Result from getting a form group.
      x-ds-definition-name: FormGroup
      x-ms-summary: Result from getting a form group.
    FormGroupForCreate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
      description: Request object for FormGroup::CreateFormGroup.
      x-ds-definition-name: FormGroupForCreate
      x-ms-summary: Request object for FormGroup::CreateFormGroup.
    FormGroupFormToAssign:
      required:
      - formId
      type: object
      properties:
        formId:
          type: string
          description: |
            The id of the form.

            Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
          format: uuid
        isRequired:
          type: boolean
          description: '**True** if the form is required.'
      description: "Group information to assign form"
      x-ds-definition-name: FormGroupFormToAssign
      x-ms-summary: ""
    FormGroupForUpdate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the office.
      description: ""
      x-ds-definition-name: FormGroupForUpdate
      x-ms-summary: ""
    FormGroupSummary:
      type: object
      properties:
        formGroupId:
          type: string
          description: |
            The ID of the form group.

            Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
          readOnly: true
        name:
          type: string
          description: "The name of the form group. \n\nExample: `Apartment Rental`"
          readOnly: true
        formCount:
          type: integer
          description: |-
            The number of forms in the form group.

            Example: `10`
          format: int32
          readOnly: true
      description: Contains details about a form group.
      x-ds-definition-name: FormGroupSummary
      x-ms-summary: Contains details about a form group.
    FormGroupSummaryList:
      type: object
      properties:
        formGroups:
          type: array
          description: A list of form groups.
          items:
            $ref: '#/components/schemas/FormGroupSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Contains a list of form groups.
      x-ds-definition-name: FormGroupSummaryList
      x-ms-summary: Contains a list of form groups.
    FormLibrarySummary:
      type: object
      properties:
        formsLibraryId:
          type: string
          description: |
            The id of the form library.

            Example: `402c6e2f-xxxx-xxxx-xxxx-ff3f249f6da9`
          format: uuid
          readOnly: true
        name:
          type: string
          description: |-
            The name of the form library.

            Example: `MOR - Mainstreet Organization of Realtors`
          readOnly: true
        formCount:
          type: integer
          description: "The number of forms in the form library. \n\nExample: `50`"
          format: int32
          readOnly: true
      description: Contains details about a specific form library.
      x-ds-definition-name: FormLibrarySummary
      x-ms-summary: Contains details about a specific form library.
    FormLibrarySummaryList:
      type: object
      properties:
        formsLibrarySummaries:
          type: array
          description: A list of form libraries.
          items:
            $ref: '#/components/schemas/FormLibrarySummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Contains a list of forms libraries.
      x-ds-definition-name: FormLibrarySummaryList
      x-ms-summary: Contains a list of forms libraries.
    FormSummary:
      type: object
      properties:
        libraryFormId:
          type: string
          description: |
            The id of the form.

            Example: `301f560d-xxxx-xxxx-xxxx-063a47cc12c2`
          format: uuid
          readOnly: true
        name:
          type: string
          description: "The name of the form. \n\nExample: `Short Sale Supplement\
            \ to Marketing Agreement`"
          readOnly: true
        lastUpdatedDate:
          type: string
          description: |-
            The date and time when the form was last updated.

            Example: `2017-08-11T19:58:36.18`
          format: date-time
          readOnly: true
      description: Contains details about a form in a form library.
      x-ds-definition-name: FormSummary
      x-ms-summary: Contains details about a form in a form library.
    FormSummaryList:
      type: object
      properties:
        forms:
          type: array
          description: A list of forms.
          items:
            $ref: '#/components/schemas/FormSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Contains a list of forms in a form library.
      x-ds-definition-name: FormSummaryList
      x-ms-summary: Contains a list of forms in a form library.
    GroupForm:
      type: object
      properties:
        formId:
          type: string
          description: |
            The id of the form.

            Example: `5be324eb-xxxx-xxxx-xxxx-208065181be9`
          format: uuid
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        isRequired:
          type: boolean
          description: '**True** if the form is required.'
          readOnly: true
        lastUpdatedDate:
          type: string
          description: |-
            The UTC date and time when the item was last updated. This is a read-only value that the service assigns.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
          readOnly: true
      description: Description of a single form in a group.
      x-ds-definition-name: GroupForm
      x-ms-summary: Description of a single form in a group.
    ActivityType:
      type: object
      properties:
        activityTypeId:
          type: string
          description: |-
            The id of the activity type.

            Example: `movefrominbx`
        name:
          type: string
          description: |-
            The name of the activity type.

            Example: `Document Moved from Inbox`
      description: Details about an activity type.
      x-ds-definition-name: ActivityType
      x-ms-summary: Details about an activity type.
    ClosingStatus:
      type: object
      properties:
        closingStatusId:
          type: string
          description: |-
            The id of the closing status.

            Example: `exp`
        name:
          type: string
          description: |-
            The name of the closing status.

            Example: `Listing Expired`
      description: Contains information about a closing status, or reason for closing
        a room.
      x-ds-definition-name: ClosingStatus
      x-ms-summary: Contains information about a closing status, or reason for closing
        a room.
    ContactSide:
      type: object
      properties:
        contactSideId:
          type: string
          description: |-
            The id of the contact side.

            Example: `L`
        name:
          type: string
          description: |-
            The name of the contact side.

            Example: `Listing`
      description: Details about a contact side.
      x-ds-definition-name: ContactSide
      x-ms-summary: Details about a contact side.
    Country:
      type: object
      properties:
        countryId:
          type: string
          description: "The two-letter code for the country. \n\nExample: `NZ`"
        name:
          type: string
          description: "The name of the country. \n\nExample: `New Zealand`"
      description: Contains details about a supported country.
      x-ds-definition-name: Country
      x-ms-summary: Contains details about a supported country.
    Currency:
      type: object
      properties:
        currencyId:
          type: string
          description: |-
            The three-letter code for the currency.

            Example: `CAD`
        name:
          type: string
          description: |-
            The name of the currency.

            Example: `Canadian Dollar`
      description: Contains details about a supported currency.
      x-ds-definition-name: Currency
      x-ms-summary: Contains details about a supported currency.
    FinancingType:
      type: object
      properties:
        financingTypeId:
          type: string
          description: |-
            The id of the financing type.

            Example: `conv` (for `Conventional`)
        name:
          type: string
          description: |-
            The name of the financing type. Possible values are:

            - `Cash`
            - `Conventional`
            - `FHA`
            - `VA`
            - `USDA`
            - `Bitcoin`
            - `Other`
      description: Contains information about a financing type.
      x-ds-definition-name: FinancingType
      x-ms-summary: Contains information about a financing type.
    GlobalActivityTypes:
      type: object
      properties:
        activityTypes:
          type: array
          description: A list of activity types.
          items:
            $ref: '#/components/schemas/ActivityType'
      description: Contains a list of activity types.
      x-ds-definition-name: GlobalActivityTypes
      x-ms-summary: Contains a list of activity types.
    GlobalClosingStatuses:
      type: object
      properties:
        closingStatuses:
          type: array
          description: A list of closing statuses (reasons for closing a room).
          items:
            $ref: '#/components/schemas/ClosingStatus'
      description: Contains a list of valid closing statuses, or reasons for closing
        a room.
      x-ds-definition-name: GlobalClosingStatuses
      x-ms-summary: Contains a list of valid closing statuses, or reasons for closing
        a room.
    GlobalContactSides:
      type: object
      properties:
        contactSides:
          type: array
          description: A list of contact sides.
          items:
            $ref: '#/components/schemas/ContactSide'
      description: Contains a list of contact sides.
      x-ds-definition-name: GlobalContactSides
      x-ms-summary: Contains a list of contact sides.
    GlobalCountries:
      type: object
      properties:
        countries:
          type: array
          description: An array of country objects.
          items:
            $ref: '#/components/schemas/Country'
      description: Contains a list of supported countries.
      x-ds-definition-name: GlobalCountries
      x-ms-summary: Contains a list of supported countries.
    GlobalCurrencies:
      type: object
      properties:
        currencies:
          type: array
          description: A list of currency objects.
          items:
            $ref: '#/components/schemas/Currency'
      description: Contains a list of supported currencies.
      x-ds-definition-name: GlobalCurrencies
      x-ms-summary: Contains a list of supported currencies.
    GlobalFinancingTypes:
      type: object
      properties:
        financingTypes:
          type: array
          description: A list of financing types.
          items:
            $ref: '#/components/schemas/FinancingType'
      description: Contains a list of financing types.
      x-ds-definition-name: GlobalFinancingTypes
      x-ms-summary: Contains a list of financing types.
    GlobalOriginsOfLeads:
      type: object
      properties:
        originsOfLeads:
          type: array
          description: A list of origins of leads.
          items:
            $ref: '#/components/schemas/OriginOfLead'
      description: Contains a list of origins of leads.
      x-ds-definition-name: GlobalOriginsOfLeads
      x-ms-summary: Contains a list of origins of leads.
    GlobalPropertyTypes:
      type: object
      properties:
        propertyTypes:
          type: array
          description: A list of property types.
          items:
            $ref: '#/components/schemas/PropertyType'
      description: Contains a list of property types.
      x-ds-definition-name: GlobalPropertyTypes
      x-ms-summary: Contains a list of property types.
    GlobalRoomContactTypes:
      type: object
      properties:
        roomContactTypes:
          type: array
          description: A list of room contact types.
          items:
            $ref: '#/components/schemas/RoomContactType'
      description: Contains a list of room contact types.
      x-ds-definition-name: GlobalRoomContactTypes
      x-ms-summary: Contains a list of room contact types.
    GlobalSellerDecisionTypes:
      type: object
      properties:
        sellerDecisionTypes:
          type: array
          description: A list of seller decision types.
          items:
            $ref: '#/components/schemas/SellerDecisionType'
      description: Contains a list of seller decision types.
      x-ds-definition-name: GlobalSellerDecisionTypes
      x-ms-summary: Contains a list of seller decision types.
    GlobalSpecialCircumstanceTypes:
      type: object
      properties:
        specialCircumstanceTypes:
          type: array
          description: A list of special circumstance types.
          items:
            $ref: '#/components/schemas/SpecialCircumstanceType'
      description: Contains a list of special circumstance types.
      x-ds-definition-name: GlobalSpecialCircumstanceTypes
      x-ms-summary: Contains a list of special circumstance types.
    GlobalStates:
      type: object
      properties:
        states:
          type: array
          description: A list of states.
          items:
            $ref: '#/components/schemas/State'
      description: Contains a list of supported states.
      x-ds-definition-name: GlobalStates
      x-ms-summary: Contains a list of supported states.
    GlobalTaskDateTypes:
      type: object
      properties:
        taskDateTypes:
          type: array
          description: A list of task date types.
          items:
            $ref: '#/components/schemas/TaskDateType'
      description: Contains a list of task date types.
      x-ds-definition-name: GlobalTaskDateTypes
      x-ms-summary: Contains a list of task date types.
    GlobalTaskResponsibilityTypes:
      type: object
      properties:
        taskResponsibilityTypes:
          type: array
          description: A list of task responsibility types.
          items:
            $ref: '#/components/schemas/TaskResponsibilityType'
      description: Contains a list of task responsibility types.
      x-ds-definition-name: GlobalTaskResponsibilityTypes
      x-ms-summary: Contains a list of task responsibility types.
    GlobalTaskStatuses:
      type: object
      properties:
        taskStatuses:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/TaskStatus'
      description: ""
      x-ds-definition-name: GlobalTaskStatuses
      x-ms-summary: ""
    GlobalTimeZones:
      type: object
      properties:
        timeZones:
          type: array
          description: A list of time zones.
          items:
            $ref: '#/components/schemas/TimeZone'
      description: Contains a list of time zones.
      x-ds-definition-name: GlobalTimeZones
      x-ms-summary: Contains a list of time zones.
    GlobalTransactionSides:
      type: object
      properties:
        transactionSides:
          type: array
          description: A list of transaction sides.
          items:
            $ref: '#/components/schemas/TransactionSide'
      description: Contains a list of transaction sides.
      x-ds-definition-name: GlobalTransactionSides
      x-ms-summary: Contains a list of transaction sides.
    OriginOfLead:
      type: object
      properties:
        originOfLeadId:
          type: string
          description: |-
            The id of the origin of lead.

            Example: `tru` (for `Trulia`)
        name:
          type: string
          description: |-
            The name of the origin of lead. Possible values are:

            - `Realtor.com`
            - `Trulia`
            - `Zillow`
            - `Company Website`
            - `Agent Website`
            - `Other Online`
            - `Mobile App`
            - `Social Media`
            - `Personal Referral`
            - `Company Referral`
            - `Repeat Client`
            - `Corporate Relocation`
            - `Print Marketing`
            - `Prospecting`
            - `Other`
            - `REO (Real Estate Owned)`
      description: Contains information about an origin of lead.
      x-ds-definition-name: OriginOfLead
      x-ms-summary: Contains information about an origin of lead.
    PropertyType:
      type: object
      properties:
        propertyTypeId:
          type: string
          description: |-
            The id of the property type.

            Example: `resd` (for `Residential Detached`)
        name:
          type: string
          description: |
            The name of the property type. Possible values are:

            - `Residential Detached`
            - `Residential Attached`
            - `New Construction`
            - `Residential Developed Lots`
            - `Land/Farm`
            - `Rental`
            - `Commercial`
            - `Condominium`
            - `Mobile Home`
      description: Contains information about a property type.
      x-ds-definition-name: PropertyType
      x-ms-summary: Contains information about a property type.
    RoomContactType:
      type: object
      properties:
        id:
          type: string
          description: |-
            The id of the room contact type.

            Example: `lisagent` (for `Listing Agent`)
        name:
          type: string
          description: |-
            The name of the room contact type. Possible values are:

            - `Seller`
            - `Listing Agent`
            - `Buyer`
            - `Buyer Agent`
            - `Service Provider`
            - `Transaction Coordinator`
            - `Mortgage Provider`
            - `Title Provider`
            - `Insurance Provider`
            - `Home Warranty Provider`
            - `Survey Provider`
            - `Escrow Provider`
            - `Buyer Broker`
            - `Listing Broker`
      description: Contains information about a room contact type.
      x-ds-definition-name: RoomContactType
      x-ms-summary: Contains information about a room contact type.
    SellerDecisionType:
      type: object
      properties:
        sellerDecisionTypeId:
          type: string
          description: |-
            The id of the seller decision type.

            Example: `appr` (for `Approved`)
        name:
          type: string
          description: |-
            The name of the seller decision type. Possible values are:

            - `Pending`
            - `Approved`
            - `Countered`
            - `Rejected`
            - `Pending Rejection`
      description: Contains information about a seller decision type.
      x-ds-definition-name: SellerDecisionType
      x-ms-summary: Contains information about a seller decision type.
    SpecialCircumstanceType:
      type: object
      properties:
        specialCircumstanceTypeId:
          type: string
          description: |-
            The id of the special circumstance type.

            Example: `ss` (for `Short Sale`)
        name:
          type: string
          description: |-
            The name of the special circumstance type. Possible values are:

            - `Short Sale`
            - `Foreclosure`
            - `Corporate Owned`
            - `Historical`
            - `Investor Owned`
            - `HUD`
            - `Estate Sale`
            - `Relocation`
            - `Contingency`
      description: Contains information about a special circumstance type.
      x-ds-definition-name: SpecialCircumstanceType
      x-ms-summary: Contains information about a special circumstance type.
    State:
      type: object
      properties:
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
        name:
          type: string
          description: |-
            The name of the state. Possible values are:

            - `Alberta`
            - `Auckland`
            - `New South Wales`
            - `Alabama`
            - `Alaska`
            - `Bay of Plenty`
            - `British Columbia`
            - `Queensland`
            - `South Australia`
            - `Manitoba`
            - `Canterbury`
            - `Arizona`
            - `Arkansas`
            - `New Brunswick`
            - `Tasmania`
            - `Hawke's Bay`
            - `Manawatu-Wanganui`
            - `Victoria`
            - `Newfoundland and Labrador`
            - `California`
            - `Colorado`
            - `Western Australia`
            - `Northwest Territories`
            - `Northland`
            - `Otago`
            - `Australian Capital Territory`
            - `Nova Scotia`
            - `Connecticut`
            - `Delaware`
            - `Nunavut`
            - `Northern Territory`
            - `Southland`
            - `Taranaki`
            - `Ontario`
            - `District of Columbia`
            - `Florida`
            - `Prince Edward Island`
            - `Waikato`
            - `Wellington`
            - `Quebec`
            - `Georgia`
            - `Guam`
            - `Saskatchewan`
            - `West Coast`
            - `Gisborne District`
            - `Yukon`
            - `Hawaii`
            - `Idaho`
            - `Marlborough District`
            - `Nelson City`
            - `Illinois`
            - `Indiana`
            - `Tasman District`
            - `Chatham Islands Territory`
            - `Iowa`
            - `Kansas`
            - `Kentucky`
            - `Louisiana`
            - `Maine`
            - `Maryland`
            - `Massachusetts`
            - `Michigan`
            - `Minnesota`
            - `Mississippi`
            - `Missouri`
            - `Montana`
            - `Nebraska`
            - `Nevada`
            - `New Hampshire`
            - `New Jersey`
            - `New Mexico`
            - `New York`
            - `North Carolina`
            - `North Dakota`
            - `Ohio`
            - `Oklahoma`
            - `Oregon`
            - `Pennsylvania`
            - `Puerto Rico`
            - `Rhode Island`
            - `South Carolina`
            - `South Dakota`
            - `Tennessee`
            - `Texas`
            - `US Virgin Islands`
            - `Utah`
            - `Vermont`
            - `Virginia`
            - `Washington`
            - `West Virginia`
            - `Wisconsin`
            - `Wyoming`
      description: Contains information about a state.
      x-ds-definition-name: State
      x-ms-summary: Contains information about a state.
    TaskDateType:
      type: object
      properties:
        taskDateTypeId:
          type: string
          description: |-
            The id of the task date type.

            Example: `tdd` (for `Task Due Date`)
        name:
          type: string
          description: "The name of the task date type. \n\nPossible values are:\n\
            \n- `Specific Calendar Date`\n- `Task Due Date`\n- `Actual Close Date`\n\
            - `Binding Date`\n- `Contingency Removal Date`\n- `Contract Date`\n- `Expected\
            \ Closing Date`\n- `Listing Date`\n- `Listing Expiration Date`\n- `Offer\
            \ Date`"
      description: Contains information about a task date type.
      x-ds-definition-name: TaskDateType
      x-ms-summary: Contains information about a task date type.
    TaskResponsibilityType:
      type: object
      properties:
        taskResponsibilityTypeId:
          type: string
          description: The id of the task responsibility type.
        name:
          type: string
          description: |-
            The name of the task responsibility type. The possible values are:

            - `Assignee`
            - `Watcher`
            - `Reviewer`
      description: Contains information about a task responsibility type.
      x-ds-definition-name: TaskResponsibilityType
      x-ms-summary: Contains information about a task responsibility type.
    TaskStatus:
      type: object
      properties:
        taskStatusId:
          type: string
          description: ""
        name:
          type: string
          description: The name of the office.
      description: ""
      x-ds-definition-name: TaskStatus
      x-ms-summary: ""
    TimeZone:
      type: object
      properties:
        timeZoneId:
          type: string
          description: |-
            The id of the time zone.

            Example: `brisbane`
        name:
          type: string
          description: |-
            The name of the time zone.

            Example: `Eastern Australia (Brisbane)`
      description: Contains information about a time zone.
      x-ds-definition-name: TimeZone
      x-ms-summary: Contains information about a time zone.
    TransactionSide:
      type: object
      properties:
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
        name:
          type: string
          description: |
            The name of the transaction side. Valid values are:

            - `List Side`
            - `Buy Side`
            - `List & Buy Side`
            - `Refinance`
      description: Contains information about a real estate transaction side.
      x-ds-definition-name: TransactionSide
      x-ms-summary: Contains information about a real estate transaction side.
    Office:
      required:
      - name
      type: object
      properties:
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
        name:
          type: string
          description: The name of the office.
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        address1:
          type: string
          description: First line of the office street address.
        address2:
          type: string
          description: Second line of the office street address.
        city:
          type: string
          description: City name or metropolitan area of the office address.
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
        postalCode:
          type: string
          description: Postal code or ZIP code of the office address.
        countryId:
          type: string
          description: The two-letter country code of the office address (for example,
            "UK" for United Kingdom).
        timeZoneId:
          type: string
          description: |-
            The id of the time zone for the office address.

            Example: `eastern` (for the Eastern US Time Zone)
        phone:
          type: string
          description: Phone number of the office.
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
      description: Contains information about an office.
      x-ds-definition-name: Office
      x-ms-summary: Contains information about an office.
    OfficeForCreate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the office.
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        address1:
          type: string
          description: First line of the office street address.
        address2:
          type: string
          description: Second line of the office street address.
        city:
          type: string
          description: City name or metropolitan area of the office address.
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
        postalCode:
          type: string
          description: Postal code or ZIP code of the office address.
        countryId:
          type: string
          description: The two-letter country code of the office address (for example,
            "UK" for United Kingdom).
        timeZoneId:
          type: string
          description: |-
            The id of the time zone for the office address.

            Example: `eastern` (for the Eastern US Time Zone)
        phone:
          type: string
          description: Phone number of the office.
      description: Contains details about the office that you want to create.
      x-ds-definition-name: OfficeForCreate
      x-ms-summary: Contains details about the office that you want to create.
    OfficeReferenceCount:
      type: object
      properties:
        referenceType:
          type: string
          description: The type of object referencing the office.
        referencedCount:
          type: integer
          description: The number of objects of this type referencing the office.
          format: int32
          readOnly: true
      description: A complex element containing the number and type of each object
        referencing the office.
      x-ds-definition-name: OfficeReferenceCount
      x-ms-summary: A complex element containing the number and type of each object
        referencing the office.
    OfficeReferenceCountList:
      type: object
      properties:
        referencesCounts:
          type: array
          description: A list of each type of object and the number of objects of
            that type referencing the office.
          items:
            $ref: '#/components/schemas/OfficeReferenceCount'
      description: Contains a list of each type of object and the number of objects
        of that type referencing the office.
      x-ds-definition-name: OfficeReferenceCountList
      x-ms-summary: Contains a list of each type of object and the number of objects
        of that type referencing the office.
    OfficeSummary:
      type: object
      properties:
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
          readOnly: true
        address1:
          type: string
          description: First line of the office street address.
          readOnly: true
        address2:
          type: string
          description: Second line of the office street address.
          readOnly: true
        city:
          type: string
          description: City name or metropolitan area of the office address.
          readOnly: true
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
          readOnly: true
        postalCode:
          type: string
          description: Postal code or ZIP code of the office address.
          readOnly: true
        countryId:
          type: string
          description: The two-letter country code of the office address (for example,
            "UK" for United Kingdom).
          readOnly: true
        timeZoneId:
          type: string
          description: |-
            The id of the time zone for the office address.

            Example: `eastern` (for the Eastern US Time Zone)
          readOnly: true
        phone:
          type: string
          description: Phone number of the office.
          readOnly: true
        createdDate:
          type: string
          description: UTC datetime that the office was created (for example, "2019-07-17T17:45:42.783").
            Note that the service assigns this value, so it is read-only.
          format: date-time
          readOnly: true
      description: A complex element containing summary information on an office;
        the elements of this object are identical to those of the `Offices` object.
      x-ds-definition-name: OfficeSummary
      x-ms-summary: A complex element containing summary information on an office;
        the elements of this object are identical to those of the `Offices` object.
    OfficeSummaryList:
      type: object
      properties:
        officeSummaries:
          type: array
          description: A list of `OfficeSummary` objects containing summary information
            about an office.
          items:
            $ref: '#/components/schemas/OfficeSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The index position within the total result set from which returned
            values start.
          format: int32
        endPosition:
          type: integer
          description: The index position within the total result set at which returned
            values end.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Object that contains a summary of information about a requested
        group of offices in the Rooms account.
      x-ds-definition-name: OfficeSummaryList
      x-ms-summary: Object that contains a summary of information about a requested
        group of offices in the Rooms account.
    Region:
      required:
      - name
      type: object
      properties:
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        name:
          type: string
          description: The name of the office.
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
      description: Contains information about a region.
      x-ds-definition-name: Region
      x-ms-summary: Contains information about a region.
    RegionReferenceCount:
      type: object
      properties:
        referenceType:
          type: string
          description: The type of object referencing the region.
        referenceCount:
          type: integer
          description: The number of objects of this type referencing the region.
          format: int32
      description: A complex element containing the number and type of each object
        referencing the region.
      x-ds-definition-name: RegionReferenceCount
      x-ms-summary: A complex element containing the number and type of each object
        referencing the region.
    RegionReferenceCountList:
      type: object
      properties:
        referenceCounts:
          type: array
          description: A list of each type of object and the number of objects of
            that type referencing the region.
          items:
            $ref: '#/components/schemas/RegionReferenceCount'
      description: Contains a list of each type of object and the number of objects
        of that type referencing the region.
      x-ds-definition-name: RegionReferenceCountList
      x-ms-summary: Contains a list of each type of object and the number of objects
        of that type referencing the region.
    RegionSummary:
      type: object
      properties:
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        name:
          type: string
          description: String that specifies the region name.
        createdDate:
          type: string
          description: UTC datetime that the region was created (for example "2019-06-27T19:32:46.943").
            Note that the service assigns this value, so it is read-only.
          format: date-time
      description: A complex element containing summary information on a region; the
        elements of this object are identical to those of the `Regions` object.
      x-ds-definition-name: RegionSummary
      x-ms-summary: A complex element containing summary information on a region;
        the elements of this object are identical to those of the `Regions` object.
    RegionSummaryList:
      type: object
      properties:
        regionSummaries:
          type: array
          description: A list of `RegionSummary` objects containing summary information
            on a region; the elements of this object are identical to those of the
            `Regions` object.
          items:
            $ref: '#/components/schemas/RegionSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Object that contains a summary of information about a requested
        group of regions in the Rooms account.
      x-ds-definition-name: RegionSummaryList
      x-ms-summary: Object that contains a summary of information about a requested
        group of regions in the Rooms account.
    AssignableRoles:
      type: object
      properties:
        currentRoleId:
          type: integer
          description: The id of the invitee's company-level role. This property lets
            the requester know what room-level role will give the user the same permissions
            that they have at the company level. A value is returned only when both
            the requester and the invitee are internal to the company.
          format: int32
        roles:
          type: array
          description: An array of `role` objects.
          items:
            $ref: '#/components/schemas/RoleSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: This complex type contains information about assignable roles.
      x-ds-definition-name: AssignableRoles
      x-ms-summary: This complex type contains information about assignable roles.
    Permissions:
      type: object
      properties:
        canAddUsersToRooms:
          type: boolean
          description: When set to **true**, users can see the **Invite** button on
            the room's **People** tab and can invite people into a room.
        canCreateRooms:
          type: boolean
          description: When set to **true**, users can see the **New** button on the
            **Rooms** tab and can create a room.
        canSubmitRoomsForReview:
          type: boolean
          description: When set to **true**, users can submit rooms for review that
            are owned by them or someone they manage.
        canCloseRooms:
          type: boolean
          description: When set to **true**, users can review and close rooms that
            are owned by them or someone they manage.
        canReopenRooms:
          type: boolean
          description: When set to **true**, users can reopen rooms that are owned
            by them or someone they manage.
        canDeleteOwnedRooms:
          type: boolean
          description: When set to **true**, the user can delete rooms that are owned
            by them or someone they manage.
        autoAccessToRooms:
          type: boolean
          description: When set to **true**, users are automatically added to new
            rooms when someone with an internal role in their office or region creates
            or is invited to a room.
        canExportRoomActivityDetailsPeople:
          type: boolean
          description: When set to **true**, users can export the details, people,
            and history of a room to a PDF or CSV file.
        isVisibleInRooms:
          type: boolean
          description: When set to **true**, users who also have the `autoAccessToRooms`
            permission enabled are visible in those rooms.
        canCopyRoomDetails:
          type: boolean
          description: When set to **true**, users see a **Copy** room option in the
            room **Actions** menu, which copies the room's detail information to populate
            a new room.
        canEditAnyRoomRole:
          type: boolean
          description: When set to **true**, users see a **Edit** room option in the
            room **Actions** menu, which edits the room's role information.
        canEditInvitedRoomRole:
          type: boolean
          description: When set to **true**, users see a **Edit** room option in the
            room **Actions** menu, which edits the invited room's role information.
        canEditRoomSide:
          type: boolean
          description: When set to **true**, users see a **Edit** room option in the
            room **Actions** menu, which edits the room's side information.
        canManageAnyUserRoomAccess:
          type: boolean
          description: When set to **true**, users see a **Manage** room option in the
            room **Actions** menu, which edits the room's access information.
        canManageInvitedUserRoomAccess:
          type: boolean
          description: When set to **true**, users see a **Manage** room option in the
            room **Actions** menu, which edits the invited room's access information.
        isHiddenInRoom:
          type: boolean
          description: When set to **true**, shows if he is hidden in room.
        canManageRoomOwners:
          type: boolean
          description: When set to **true**, users see a **Manage** room option.
        canDeleteRooms:
          type: boolean
          description: When set to **true**, users see a **Delete** room option.
        canConnectToMortgageCadence:
          type: boolean
          description: When set to **true**, users see a **ConnectToMortgageCadence** room option.
        canViewRoomDetails:
          type: boolean
          description: When set to **true**, users can view all room detail fields
            that the company Admin has set to **Use**.
        canViewAndEditRoomDetails:
          type: boolean
          description: When set to **true**, users can view and make edits to any
            room detail fields.
        canSendRoomDetailsToLoneWolf:
          type: boolean
          description: When set to **true**, users see a **SendRoomDetailsToLoneWolf** room option.
        canAddDocuments:
          type: boolean
          description: When set to **true**, users can add documents to rooms and
            share the documents that they own with other people in the room.
        canAddDocumentsFromFormGroups:
          type: boolean
          description: When set to **true**, users can add documents from form groups
            to rooms.
        canAddDocumentsFromFormLibraries:
          type: boolean
          description: When set to **true**, users can add documents from form libraries
            to rooms.
        documentsViewableByOthersInRoomFromOffice:
          type: boolean
          description: When a user for whom this permission is set to **true** adds
            a document, the document is automatically shared with other room users
            that are in the user's office.
        documentsAutoOwnedByPeers:
          type: boolean
          description: When a user for whom this permission is set to **true** adds
            a document, the document is automatically seen and owned by those users'
            peers. Peers are others in the same office or region who have the same
            access level as the user.
        canDeleteOwnedDocuments:
          type: boolean
          description: When set to **true**, users can delete documents that they
            own from rooms.
        canManageSharedDocs:
          type: boolean
          description: When set to **true**, users can manage all documents, including
            ones that another user has shared with them.
        canManageFormGroups:
          type: boolean
          description: When set to **true**, users have access to **Admin > Forms**
            and can manage form groups and form libraries for the company.
        canShareDocsNotOwned:
          type: boolean
          description: When set to **true**, users can share documents that they do
            not own (documents that another user has shared with them).
        canAddTasksToAnyTaskLists:
          type: boolean
          description: When set to **true**, users can add tasks to any task list,
            including lists that they do not own.
        canEditEditableTasks:
          type: boolean
          description: When set to **true**, users can edit editable tasks.
        canEditAnyTasks:
          type: boolean
          description: When set to **true**, users can edit tasks in rooms, even if
            the task owner has not marked the task as editable.
        canDeleteDeletableTasks:
          type: boolean
          description: When set to **true**, users can delete deletable tasks.
        canDeleteAnyTasks:
          type: boolean
          description: When set to **true**, users can delete tasks, even if the task
            owner has not marked the task as deletable.
        canApplyTaskList:
          type: boolean
          description: When set to **true**, users see the **Attach Task List** option
            in the room's **Actions** menu and can apply task lists to rooms.
        canRemoveAnyTaskList:
          type: boolean
          description: |-
            When set to **true**, users can use the **Remove Task List** option in the room's **Actions** menu to remove task lists owned by others.

            **Note**: Users can already remove task lists that they own.
        canSubmitTaskList:
          type: boolean
          description: When set to **true**, users can use the **Submit Task List**
            option in the room's **Actions** menu to submit task lists for review.
        canAutoSubmitTaskList:
          type: boolean
          description: When set to **true**, users can use the **Submit Task List**
            option in the room's **Actions** menu to submit task lists for review.
        canReviewTaskList:
          type: boolean
          description: When set to **true**, users can approve or decline a task list.
            Declining a task list sends it back to open status for the assignee to
            complete. The assignee also receives a notification.
        canAutoApproveTaskList:
          type: boolean
          description: When set to **true** and a room is approved, the task lists
            associated with the room auto-approve if all of the tasks are approved.
        canManageTaskTemplatesForAllRegionsAllOffices:
          type: boolean
          description: When set to **true**, users have access to the **Admin > Company
            > Task List Templates** menu so that they can create, edit, and delete
            task list templates for all regions and offices.
        canApplyRoomTemplates:
          type: boolean
          description: When set to **true**, users can apply a room template when
            they create a room.
        canAddTasksToRooms:
          type: boolean
          description: When set to **true**, users can add tasks to rooms.
        canReviewAnyTask:
          type: boolean
          description: When set to **true**, users can review tasks of rooms.
        canManageDocsOnAnyTask:
          type: boolean
          description: When set to **true**, users can add manage docs on any task of rooms.
        canAddMemberAndSetRoleLowerAccessLevel:
          type: boolean
          description: When set to **true**, users can add other users with a lower
            access level than their own to offices or regions that they oversee and
            set those users' roles.
        canAddMemberAndSetRoleSameAccessLevel:
          type: boolean
          description: When set to **true**, users can add other users with the same
            access level as their own to offices or regions that they oversee and
            set those users' roles.
        canChangeMemberRoleLowerAccessLevel:
          type: boolean
          description: When set to **true**, users can edit the roles of other users
            who have a lower access level than their own and that belong to offices
            or regions that they oversee.
        canChangeMemberRoleSameAccessLevel:
          type: boolean
          description: When set to **true**, users can edit the roles of other users
            who have the same access level as their own and that belong to offices
            or regions that they oversee.
        canManageMemberLowerAccessLevel:
          type: boolean
          description: When set to **true**, users can change the access level, office,
            region, and eSignature permission set of other users who have a lower
            access level than their own.
        canManageMemberSameAccessLevel:
          type: boolean
          description: When set to **true**, users can change the access level, office,
            region, and eSignature permission set of other users who have the same
            access level as their own.
        canRemoveCompanyMemberLowerAccessLevel:
          type: boolean
          description: When set to **true**, users can remove other users who have
            a lower access level than their own and that belong to offices or regions
            that they oversee from the company account.
        canRemoveCompanyMemberSameAccessLevel:
          type: boolean
          description: When set to **true**, users can remove other users who have
            the same access level as their own and that belong to offices or regions
            that they oversee from the company account.
        canManageAccount:
          type: boolean
          description: When set to **true**, users can access the **Company Settings**
            tab under **Rooms > Admin > Company** to manage company account settings
            and change the company name, contact information, currency, offices, and
            regions.
        canManageLogo:
          type: boolean
          description: When set to **true**, users can access the **Company Logo**
            section in **Company Settings** to add or change the company logo.
        canManageRolesAndPermissions:
          type: boolean
          description: When set to **true**, users can add manage roles and permissions of rooms.
        canManageRoomDetails:
          type: boolean
          description: When set to **true**, users see the **Room Details** tab under
            **Rooms > Admin > Company** and can use it to configure room details.
            They can also add additional contact fields.
        canManageRoomTemplates:
          type: boolean
          description: When set to **true**, users see the **Room Templates** option
            in the **Rooms > Admin** menu, which enables them to add, edit, and delete
            room templates.
        canManageIntegrationSettings:
          type: boolean
          description: When set to **true**, users can add manage integration settings of rooms.
      description: Contains details about permissions.
      x-ds-definition-name: Permissions
      x-ms-summary: Contains details about permissions.
    Role:
      type: object
      properties:
        roleId:
          type: integer
          description: In Rooms v6, this is the id of the company role assigned to
            the user.
          format: int32
        legacyRoleId:
          type: string
          description: The legacy name of the role in Rooms Version 5.
        name:
          type: string
          description: The name of the role.
        isDefaultForAdmin:
          type: boolean
          description: When **true**, the role is the default for account administrators.
        isExternal:
          type: boolean
          description: When set to **true**, the role is an external role. You assign
            external roles to people from outside your company when you invite them
            into a room.
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
        isAssigned:
          type: boolean
          description: When set to **true**, indicates that this role is currently
            assigned to a user.
        permissions:
          $ref: '#/components/schemas/Permissions'
      description: Contains details about a company role.
      x-ds-definition-name: Role
      x-ms-summary: Contains details about a company role.
    RoleForCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the role.
        isExternal:
          type: boolean
          description: When set to **true**, the role is an external role. You assign
            external roles to people from outside your company when you invite them
            into a room.
        permissions:
          $ref: '#/components/schemas/Permissions'
      description: Contains details about the role that you want to create.
      x-ds-definition-name: RoleForCreate
      x-ms-summary: Contains details about the role that you want to create.
    RoleForUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the role.
        isExternal:
          type: boolean
          description: When set to **true**, the role is an external role. You assign
            external roles to people from outside your company when you invite them
            into a room.
        permissions:
          $ref: '#/components/schemas/Permissions'
      description: This request object contains the details to use for the update.
      x-ds-definition-name: RoleForUpdate
      x-ms-summary: This request object contains the details to use for the update.
    RoleSummary:
      type: object
      properties:
        roleId:
          type: integer
          description: In Rooms v6, this is the id of the company role assigned to
            the user.
          format: int32
        legacyRoleId:
          type: string
          description: The legacy name of the role in Rooms Version 5.
        name:
          type: string
          description: The name of the role.
        isDefaultForAdmin:
          type: boolean
          description: When **true**, the role is the default for account administrators.
        isExternal:
          type: boolean
          description: When set to **true**, the role is an external role. You assign
            external roles to people from outside your company when you invite them
            into a room.
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
      description: Contains details about a role.
      x-ds-definition-name: RoleSummary
      x-ms-summary: Contains details about a role.
    RoleSummaryList:
      type: object
      properties:
        roles:
          type: array
          description: An array of `role` objects.
          items:
            $ref: '#/components/schemas/RoleSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: This complex type contains details about the roles that are associated
        with an account.
      x-ds-definition-name: RoleSummaryList
      x-ms-summary: This complex type contains details about the roles that are associated
        with an account.
    Room:
      type: object
      properties:
        roomId:
          type: integer
          description: The id of the room.
          format: int32
        companyId:
          type: integer
          description: The id of the company.
          format: int32
        name:
          type: string
          description: The name of the room.
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
        submittedForReviewDate:
          type: string
          description: |-
            The UTC DateTime when the room was submitted for review.

            **Note**: In Rooms v5, this is when an agent submitted the room to a manager. In Rooms v6, this is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true**.
          format: date-time
        closedDate:
          type: string
          description: The UTC date and time when the room was closed.
          format: date-time
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the room. For example,
            a reviewer might reject closing a room if documentation is missing or
            the details are inaccurate.
          format: date-time
        createdByUserId:
          type: integer
          description: The id of the user who created the room.
          format: int32
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the room.
          format: int32
        closedStatusId:
          type: string
          description: "The reason why a room was closed. Possible values are:\n\n\
            - `sold`: Property sold.\n- `dup`: Duplicate room.\n- `escrcncl`: Escrow\
            \ canceled.\n- `inspctn`: Inspection issues.\n- `exp`: Listing expired.\n\
            - `lostbuy`: Buyer withdrew.\n- `list`: Listing withdrawn. \n- `newlist`:\
            \ New listing.\n- `offrrjct`: Offer not accepted.\n- `pend`: Pending.\
            \ An agent might use this status to temporarily hide a room from their\
            \ Active rooms view if they are blocked on a task. When they are ready\
            \ to reopen the room, they can quickly find it by filtering for rooms\
            \ in `pending` status.\n- `lstcanc`: Listing canceled. \n- `lstleave`:\
            \ Listing released.\n- `sellwtdw`: Seller withdrew.\n- `nofin`: Buyer\
            \ unable to finance.\n- `disciss`: Property disclosure issue.\n- `appiss`:\
            \ Appraisal issues.\n- `mtgiss`: Mortgage issues. Use when details about\
            \ why the buyer wasn't able to obtain financing are unknown.\n- `zoniss`:\
            \ Zoning issues.\n- `attiss`: Attorney review issues.\n- `proplsd`: Property\
            \ leased. Use for the list side of the transaction.\n- `tenlease`: Tenant\
            \ signed lease. Use when an agent helps renters find a to lease.   "
        fieldData:
          $ref: '#/components/schemas/FieldData'
      description: Contains details about a room.
      x-ds-definition-name: Room
      x-ms-summary: Contains details about a room.
    RoomDocument:
      type: object
      properties:
        documentId:
          type: integer
          description: The ID of the document.
          format: int32
        name:
          type: string
          description: |-
            The file name of the document.

            Example: `Short Sale Supplement to Marketing Agreement.pdf`
        ownerId:
          type: integer
          description: The id of the user who owns the document.
          format: int32
        size:
          type: integer
          description: The size of the document in bytes.
          format: int64
        folderId:
          type: integer
          description: The id of the folder the document is in.
          format: int32
        createdDate:
          type: string
          description: "The UTC date and time that the document was created or uploaded.\
            \ \n\nExample: `2019-07-25T22:18:56.95Z`\n"
          format: date-time
        isSigned:
          type: boolean
          description: When set to **true**, this property indicates that the document
            is signed.
        docuSignFormId:
          type: string
          description: The id of the corresponding DocuSign form.
        isArchived:
          type: boolean
          description: '**True** if the document is archived.'
        isVirtual:
          type: boolean
          description: '**True** if the document is virtual.'
        owner:
          description: "Room document owner"
          $ref: '#/components/schemas/RoomDocumentOwner'
      description: An individual document in a room.
      x-ds-definition-name: RoomDocument
      x-ms-summary: An individual document in a room.
    RoomDocumentList:
      type: object
      properties:
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
        documents:
          type: array
          description: An array of room documents.
          items:
            $ref: '#/components/schemas/RoomDocument'
      description: A list of documents in a room.
      x-ds-definition-name: RoomDocumentList
      x-ms-summary: A list of documents in a room.
    RoomFolder:
      type: object
      properties:
        roomFolderId:
          type: integer
          description: The ID of the folder.
          format: int32
        name:
          type: string
          description: The name of the folder.
        isDefault:
          type: boolean
          description: When **true**, this is the default folder.
      description: Information about a room folder.
      x-ds-definition-name: RoomFolder
      x-ms-summary: Information about a room folder.
    RoomFolderList:
      type: object
      properties:
        folders:
          type: array
          description: An array of room folders.
          items:
            $ref: '#/components/schemas/RoomFolder'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: A list of room folder results.
      x-ds-definition-name: RoomFolderList
      x-ms-summary: A list of room folder results.
    RoomForCreate:
      required:
      - name
      - roleId
      type: object
      properties:
        name:
          type: string
          description: (Required) The name of the room.
        roleId:
          type: integer
          description: (Required) The id of the role that the owner has in the room.
          format: int32
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`

            **Note**: This property is required for real estate companies, and otherwise ignored.
        ownerId:
          type: integer
          description: The id of the user who owns the room.
          format: int32
        templateId:
          type: integer
          description: (Optional) The id of the template to use to create the room.
          format: int32
        officeId:
          type: integer
          description: '(Optional) The id of the office associated with the room.
            Required when creating a room on behalf of someone else or a Manager-owned
            room. '
          format: int32
        fieldData:
          $ref: '#/components/schemas/FieldDataForCreate'
      description: This request object contains the details about the new room.
      x-ds-definition-name: RoomForCreate
      x-ms-summary: This request object contains the details about the new room.
    RoomInvite:
      required:
      - email
      - firstName
      - lastName
      - roleId
      type: object
      properties:
        email:
          type: string
          description: The user's email address.
        firstName:
          type: string
          description: The user's first name.
        lastName:
          type: string
          description: The user's last name.
        roleId:
          type: integer
          description: |-
            In Rooms Version 6, this is the id of the company role assigned to the user.

            You can assign external roles to users who are not part of your organization.

            **Note**: If you are using Rooms Version 6, you must enter a `roleId` in requests. If you are using Rooms Version 5, you must use one of the Users::InviteClassic methods with the `titleId` property instead.
          format: int32
        transactionSideId:
          type: string
          description: Required for a real estate company; otherwise ignored.
      description: The information to use for the invitation.
      x-ds-definition-name: RoomInvite
      x-ms-summary: The information to use for the invitation.
    RoomInviteResponse:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
          readOnly: true
        roomId:
          type: integer
          description: The id of the room.
          format: int32
          readOnly: true
        email:
          type: string
          description: The user's email address.
          readOnly: true
        firstName:
          type: string
          description: The user's first name.
          readOnly: true
        lastName:
          type: string
          description: The user's last name.
          readOnly: true
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
          readOnly: true
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
          readOnly: true
      description: Information about the sent invitation.
      x-ds-definition-name: RoomInviteResponse
      x-ms-summary: Information about the sent invitation.
    RoomPicture:
      type: object
      properties:
        url:
          type: string
          description: The URL for the uploaded picture.
      description: This response object contains the URL for the uploaded picture.
      x-ds-definition-name: RoomPicture
      x-ms-summary: This response object contains the URL for the uploaded picture.
    RoomSummary:
      type: object
      properties:
        roomId:
          type: integer
          description: The id of the room.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the room.
          readOnly: true
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
          readOnly: true
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
          readOnly: true
        submittedForReviewDate:
          type: string
          description: |-
            The UTC DateTime when the room was submitted for review.

            **Note**: In Rooms v5, this is when an agent submitted the room to a manager. In Rooms v6, this is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true**.
          format: date-time
          readOnly: true
        closedDate:
          type: string
          description: The UTC date and time when the room was closed.
          format: date-time
          readOnly: true
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the room. For example,
            a reviewer might reject closing a room if documentation is missing or
            the details are inaccurate.
          format: date-time
          readOnly: true
        createdByUserId:
          type: integer
          description: The id of the user who created the room.
          format: int32
          readOnly: true
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the room.
          format: int32
          readOnly: true
        closedStatusId:
          type: string
          description: "The reason why a room was closed. Possible values are:\n\n\
            - `sold`: Property sold.\n- `dup`: Duplicate room.\n- `escrcncl`: Escrow\
            \ canceled.\n- `inspctn`: Inspection issues.\n- `exp`: Listing expired.\n\
            - `lostbuy`: Buyer withdrew.\n- `list`: Listing withdrawn. \n- `newlist`:\
            \ New listing.\n- `offrrjct`: Offer not accepted.\n- `pend`: Pending.\
            \ An agent might use this status to temporarily hide a room from their\
            \ Active rooms view if they are blocked on a task. When they are ready\
            \ to reopen the room, they can quickly find it by filtering for rooms\
            \ in `pending` status.\n- `lstcanc`: Listing canceled. \n- `lstleave`:\
            \ Listing released.\n- `sellwtdw`: Seller withdrew.\n- `nofin`: Buyer\
            \ unable to finance.\n- `disciss`: Property disclosure issue.\n- `appiss`:\
            \ Appraisal issues.\n- `mtgiss`: Mortgage issues. Use when details about\
            \ why the buyer wasn't able to obtain financing are unknown.\n- `zoniss`:\
            \ Zoning issues.\n- `attiss`: Attorney review issues.\n- `proplsd`: Property\
            \ leased. Use for the list side of the transaction.\n- `tenlease`: Tenant\
            \ signed lease. Use when an agent helps renters find a to lease.   "
          readOnly: true
        fieldDataLastUpdatedDate:
          type: string
          description: "Field data last updated date"
          format: date-time
          readOnly: true
      description: This object contains details about a room.
      x-ds-definition-name: RoomSummary
      x-ms-summary: This object contains details about a room.
    RoomSummaryList:
      type: object
      properties:
        rooms:
          type: array
          description: An array of `roomSummary` objects.
          items:
            $ref: '#/components/schemas/RoomSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: This complex type contains details about rooms.
      x-ds-definition-name: RoomSummaryList
      x-ms-summary: This complex type contains details about rooms.
    RoomTemplate:
      type: object
      properties:
        roomTemplateId:
          type: integer
          description: The id of the room template.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        taskTemplateCount:
          type: integer
          description: The total number of task templates that the room template uses.
          format: int32
          readOnly: true
      description: Contains details about a room template.
      x-ds-definition-name: RoomTemplate
      x-ms-summary: Contains details about a room template.
    RoomTemplatesSummaryList:
      type: object
      properties:
        roomTemplates:
          type: array
          description: An array of `roomTemplate` objects.
          items:
            $ref: '#/components/schemas/RoomTemplate'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: This complex type contains information about room templates.
      x-ds-definition-name: RoomTemplatesSummaryList
      x-ms-summary: This complex type contains information about room templates.
    RoomUser:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
        email:
          type: string
          description: The user's email address.
        firstName:
          type: string
          description: The user's first name.
        lastName:
          type: string
          description: The user's last name.
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
        roleId:
          type: integer
          description: The id of the user's role.
          format: int32
        isRevoked:
          type: boolean
          description: When set to **true**, indicates that the user's access to the
            room has been revoked.
        invitedByUserId:
          type: integer
          description: The `userId` of the person who invited the room user to the
            room.
          format: int32
      description: This object contains details about a specific room member.
      x-ds-definition-name: RoomUser
      x-ms-summary: This object contains details about a specific room member.
    RoomUserForUpdate:
      type: object
      properties:
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
      description: This request object contains the information that you want to update
        for the room user.
      x-ds-definition-name: RoomUserForUpdate
      x-ms-summary: This request object contains the information that you want to
        update for the room user.
    RoomUserRemovalDetail:
      type: object
      properties:
        revocationDate:
          type: string
          description: |-
            The date on which the users room access should be revoked
            in ISO 8601 fomat: `1973-12-31T07:54Z`.
          format: date-time
      description: Details for removal.
      x-ds-definition-name: RoomUserRemovalDetail
      x-ms-summary: Details for removal.
    RoomUsersResult:
      type: object
      properties:
        users:
          type: array
          description: An array of `RoomUser` objects.
          items:
            $ref: '#/components/schemas/RoomUserSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: This complex type contains details about the users associated with
        a room.
      x-ds-definition-name: RoomUsersResult
      x-ms-summary: This complex type contains details about the users associated
        with a room.
    RoomUserSummary:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
          readOnly: true
        email:
          type: string
          description: The user's email address.
          readOnly: true
        firstName:
          type: string
          description: The user's first name.
          readOnly: true
        lastName:
          type: string
          description: The user's last name.
          readOnly: true
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
          readOnly: true
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
          readOnly: true
        titleId:
          type: integer
          description: |-
            In Rooms Version 5, this is the id of the custom job title for a Manager role within your company. For example, your company might have the custom job titles "Transaction Coordinator" and "Office Manager".

            **Note**: If you are using Rooms Version 5, you must enter a `titleId` when using the Users::InviteClassicManager method. (The `titleId` property is empty for Agent users on Rooms Version 5.) If you are using Rooms Version 6, use the Users::InviteUser method with the `roleId` property instead.
          format: int32
          readOnly: true
        companyName:
          type: string
          description: The company name.
          readOnly: true
        roleName:
          type: string
          description: "Role name"
          readOnly: true
      description: Contains details about a room user.
      x-ds-definition-name: RoomUserSummary
      x-ms-summary: Contains details about a room user.
    TaskList:
      type: object
      properties:
        taskListId:
          type: integer
          description: The id of the task list.
          format: int32
        name:
          type: string
          description: The name of the task list.
        taskListTemplateId:
          type: integer
          description: The id of the task list template used to create the task list.
          format: int32
        submittedForReviewDate:
          type: string
          description: The UTC DateTime when the task list was submitted for review.
          format: date-time
        approvalDate:
          type: string
          description: The UTC DateTime when the task list was approved.
          format: date-time
        rejectedDate:
          type: string
          description: 'The UTC DateTime when the reviewer rejected the task list. '
          format: date-time
        createdDate:
          type: string
          description: |-
            The UTC date and time when the task list was created. This is a read-only value that the service assigns.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
        approvedByUserId:
          type: integer
          description: The id of the user who approved the task list.
          format: int32
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the task list.
          format: int32
        comment:
          type: string
          description: Contains a comment about the task list.
        tasks:
          type: array
          description: A list of tasks in the task list.
          items:
            $ref: '#/components/schemas/TaskSummary'
      description: This response object contains details about the new task list.
      x-ds-definition-name: TaskList
      x-ms-summary: This response object contains details about the new task list.
    TaskListForCreate:
      type: object
      properties:
        taskListTemplateId:
          type: integer
          description: (Required) The id of the task list template.
          format: int32
      description: Contains information about the task list template to use to create
        the new task list.
      x-ds-definition-name: TaskListForCreate
      x-ms-summary: Contains information about the task list template to use to create
        the new task list.
    TaskListSummary:
      type: object
      properties:
        taskListId:
          type: integer
          description: The id of the task list.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the task list.
          readOnly: true
        taskListTemplateId:
          type: integer
          description: The id of the task list template.
          format: int32
          readOnly: true
        submittedForReviewDate:
          type: string
          description: The UTC DateTime when the task list was submitted for review.
          format: date-time
          readOnly: true
        approvalDate:
          type: string
          description: The UTC DateTime when the task list was approved.
          format: date-time
          readOnly: true
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the task list.
          format: date-time
          readOnly: true
        createdDate:
          type: string
          description: |-
            The UTC date and time when the task list was created. This is a read-only value that the service assigns.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
          readOnly: true
        approvedByUserId:
          type: integer
          description: The id of the user who approved the task list.
          format: int32
          readOnly: true
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the task list.
          format: int32
          readOnly: true
        comment:
          type: string
          description: Contains a user comment about the task list.
          readOnly: true
      description: Contains information about a task list.
      x-ds-definition-name: TaskListSummary
      x-ms-summary: Contains information about a task list.
    TaskListSummaryList:
      type: object
      properties:
        taskListSummaries:
          type: array
          description: A list of task list summaries.
          items:
            $ref: '#/components/schemas/TaskListSummary'
      description: Contains a list of task list summaries.
      x-ds-definition-name: TaskListSummaryList
      x-ms-summary: Contains a list of task list summaries.
    TaskSummary:
      type: object
      properties:
        taskId:
          type: integer
          description: The id of the task list.
          format: int32
        name:
          type: string
          description: The name of the task list.
        requiresApproval:
          type: boolean
          description: When set to **true**, the task must be completed and reviewed
            before it can be closed.
        dueDateTypeId:
          type: string
          description: The id of the due date type (such as Actual Close Date or Contract
            Date).
        dueDateOffset:
          type: integer
          description: The number of days before or after the due date (specified
            by the `dueDateTypeId`) within which the task must be completed. A negative
            number indicates that the task must be completed within a certain number
            of days before the due date. A positive number indicates that the task
            must be completed within a certain number of days after the due date.
          format: int32
        fixedDueDate:
          type: string
          description: |-
            A specific calendar due date for the task.

            In the API, this value is a UTC DateTime that does not actually include a time.

            Example: 2019-07-17T00:00:00.000Z
          format: date-time
        ownerUserId:
          type: integer
          description: The id of the user who owns the task.
          format: int32
        completionDate:
          type: string
          description: |-
            The UTC DateTime when the task was completed.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
        approvalDate:
          type: string
          description: |-
            The UTC DateTime when the task was approved.

            Example: 2019-07-17T17:45:42.783Z
          format: date-time
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the task.
          format: date-time
        createdDate:
          type: string
          description: "\t\nThe UTC date and time when the task was created. This\
            \ is a read-only value that the service assigns.\n\nExample: 2019-07-17T17:45:42.783Z"
          format: date-time
        isDocumentTask:
          type: boolean
          description: When set to **true**, the task is associated with a document.
        requiresReview:
          type: boolean
          description: When set to **true**, the task is optional. If the task is
            completed (if a document is added or the task is marked complete), it
            must be reviewed before it can be closed.
      description: Contains information about a task list.
      x-ds-definition-name: TaskSummary
      x-ms-summary: Contains information about a task list.
    TaskListTemplate:
      type: object
      properties:
        taskListTemplateId:
          type: integer
          description: The id of the task list template.
          format: int32
        name:
          type: string
          description: The name of the task list template.
        taskCount:
          type: integer
          description: The total number of tasks in the task list template.
          format: int32
        tasksWithDocumentsCount:
          type: integer
          description: The number of tasks in the task list template that have documents
            associated with them.
          format: int32
      description: Contains details about a task list template.
      x-ds-definition-name: TaskListTemplate
      x-ms-summary: Contains details about a task list template.
    TaskListTemplateList:
      type: object
      properties:
        taskListTemplates:
          type: array
          description: A list of task list templates.
          items:
            $ref: '#/components/schemas/TaskListTemplate'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Contains a list of task list templates.
      x-ds-definition-name: TaskListTemplateList
      x-ms-summary: Contains a list of task list templates.
    ClassicAdminToInvite:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
          description: (Required) The user's first name.
        lastName:
          type: string
          description: (Required) The user's last name.
        email:
          type: string
          description: (Required) The user's email address.
      description: This request object contains details about the person who you want
        to invite.
      x-ds-definition-name: ClassicAdminToInvite
      x-ms-summary: This request object contains details about the person who you
        want to invite.
    ClassicAgentToInvite:
      required:
      - email
      - firstName
      - lastName
      - officeId
      type: object
      properties:
        firstName:
          type: string
          description: (Required) The user's first name.
        lastName:
          type: string
          description: (Required) The user's last name.
        email:
          type: string
          description: (Required) The user's email address.
        officeId:
          type: integer
          description: (Required) The id of the office. This is the id that the system
            generated when you created the office.
          format: int32
        companyTypeId:
          type: string
          description: "Company type ID"
        eSignPermissionProfileId:
          type: string
          description: (Required) When an administrator or authorized member invites
            a new user to become an account member, the system also creates an eSignature
            account for the invitee at the same time. The `eSignPermissionProfileId`
            is the id of the eSignature permission set to assign to the member.
      description: This request object contains details about the person who you want
        to invite.
      x-ds-definition-name: ClassicAgentToInvite
      x-ms-summary: This request object contains details about the person who you
        want to invite.
    ClassicManagerPermissions:
      type: object
      properties:
        isVisibleInTransactionRooms:
          type: boolean
          description: |-
            When set to **true**, the user is visible in company rooms.

            **Note**: Inherited managers are automatically added to rooms and are visible in those rooms unless this setting is set to **false**. Inherited managers are users who oversee others and have the **auto-access to rooms of members the user manages** permission enabled.
        canDeleteCompanyRooms:
          type: boolean
          description: When set to **true**, the user can delete company rooms.
        canDeleteCompanyDocuments:
          type: boolean
          description: When set to **true**, the user can delete company documents.
        canManageCompanyRooms:
          type: boolean
          description: When set to **true**, the user can manage company rooms.
        canManageCompanyAccount:
          type: boolean
          description: When set to **true**, the user can manage the company's account.
        canManageCompanySharedLibrary:
          type: boolean
          description: When set to **true**, the user can manage the company's shared
            library.
        canManageCompanyMembers:
          type: boolean
          description: When set to **true**, the user can manage other users on the
            company's account.
        canCloseCompanyRooms:
          type: boolean
          description: When set to **true**, the user can close company rooms.
        canApproveCompanyChecklists:
          type: boolean
          description: When set to **true**, the user can approve company checklists.
        isCompanySystemAdmin:
          type: boolean
          description: When set to **true**, the user is a system administrator for
            the company.
        isRegionManager:
          type: boolean
          description: When set to **true**, the user is a region manager.
        isOfficeManager:
          type: boolean
          description: When set to **true**, the user is an office manager.
        autoAccessToCompanyRooms:
          type: boolean
          description: When set to **true**, the user is automatically added to new
            company rooms and is visible in those rooms.
      description: This object contains details about user permissions. These permissions
        are associated only with Rooms v5.
      x-ds-definition-name: ClassicManagerPermissions
      x-ms-summary: This object contains details about user permissions. These permissions
        are associated only with Rooms v5.
    ClassicManagerToInvite:
      required:
      - accessLevel
      - defaultOfficeId
      - email
      - firstName
      - lastName
      - permissions
      - titleId
      type: object
      properties:
        firstName:
          type: string
          description: (Required) The user's first name.
        lastName:
          type: string
          description: (Required) The user's last name.
        email:
          type: string
          description: (Required) The user's email address.
        defaultOfficeId:
          type: integer
          description: (Required) The id of the user's default office.
          format: int32
        titleId:
          type: integer
          description: |-
            (Required) In Rooms v5, this is the id of the custom job title for a Manager role within your company. For example, your company might have the custom job titles "Transaction Coordinator" and "Office Manager".

            **Note**: If you are using Rooms v6, use the Users::InviteUser method with the roleId property instead.
          format: int32
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        permissions:
          $ref: '#/components/schemas/ClassicManagerPermissions'
        offices:
          type: array
          description: |-
            An array of office ids for the offices to which the user belongs.

            **Note**: You only specify the `offices` property when the user's `accessLevel` is `office`.
          items:
            type: integer
            format: int32
        regions:
          type: array
          description: |-
            An array of region ids for the regions to which the user belongs.

            **Note**: You only specify the `regions` property when the user's `accessLevel` is `region`.
          items:
            type: integer
            format: int32
        eSignPermissionProfileId:
          type: string
          description: (Required) When an administrator or authorized member invites
            a new user to become an account member, the system also creates an eSignature
            account for the invitee at the same time. The eSignPermissionProfileId
            is the id of the eSignature permission set to assign to the member.
      description: This request object contains details about the person who you want
        to invite.
      x-ds-definition-name: ClassicManagerToInvite
      x-ms-summary: This request object contains details about the person who you
        want to invite.
    LockedOutDetails:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
          description: The reason the account was locked.
      description: Details about a locked account.
      x-ds-definition-name: LockedOutDetails
      x-ms-summary: Details about a locked account.
    User:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
        email:
          type: string
          description: The user's email address.
        firstName:
          type: string
          description: The user's first name.
        lastName:
          type: string
          description: The user's last name.
        isLockedOut:
          type: boolean
          description: When set to **true**, an administrator has locked the user's
            account. For example, an administrator might want to lock an agent's account
            after they leave the brokerage until they determine how to transfer the
            agent's rooms and data to another active user.
        status:
          type: string
          description: |-
            The user's status. Read only. Possible values are:

            - `Active`: The user is active.
            - `Pending`: The user has been invited but has not yet accepted the invitation.
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        defaultOfficeId:
          type: integer
          description: The id of the user's default office.
          format: int32
        titleId:
          type: integer
          description: |-
            In Rooms Version 5, this is the id of the custom job title for a Manager role within your company. For example, your company might have the custom job titles "Transaction Coordinator" and "Office Manager".

            **Note**: If you are using Rooms Version 5, you must enter a `titleId` when using the Users::InviteClassicManager method. (The `titleId` property is empty for Agent users on Rooms Version 5.) If you are using Rooms Version 6, use the Users::InviteUser method with the `roleId` property instead.
          format: int32
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
        profileImageUrl:
          type: string
          description: The URL for the user's profile image.
        offices:
          type: array
          description: An array of office ids for the offices in which a user with
            an `Office` or `Contributor` `accessLevel` has been granted the ability
            to participate.
          items:
            type: integer
            format: int32
        regions:
          type: array
          description: An array of region ids for the regions in which a user with
            the `Region accessLevel` has been granted the ability to participate.
          items:
            type: integer
            format: int32
        permissions:
          $ref: '#/components/schemas/ClassicManagerPermissions'
      description: Contains details about a user.
      x-ds-definition-name: User
      x-ms-summary: Contains details about a user.
    UserForUpdate:
      required:
      - defaultOfficeId
      type: object
      properties:
        defaultOfficeId:
          type: integer
          description: (Required) The id of the user's default office.
          format: int32
      description: 'This request object contains the information to use to update
        a user''s default office. '
      x-ds-definition-name: UserForUpdate
      x-ms-summary: 'This request object contains the information to use to update
        a user''s default office. '
    UserSummary:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
          readOnly: true
        email:
          type: string
          description: The user's email address.
          readOnly: true
        firstName:
          type: string
          description: The user's first name.
          readOnly: true
        lastName:
          type: string
          description: The user's last name.
          readOnly: true
        isLockedOut:
          type: boolean
          description: When set to **true**, an administrator has locked the user's
            account. For example, an administrator might want to lock an agent's account
            after they leave the brokerage until they determine how to transfer the
            agent's rooms and data to another active user.
          readOnly: true
        status:
          type: string
          description: |-
            The user's status. Possible values are:

            - `Active`
            - `Pending`
          readOnly: true
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        defaultOfficeId:
          type: integer
          description: The id of the user's default office.
          format: int32
          readOnly: true
        titleId:
          type: integer
          description: |-
            In Rooms Version 5, this is the id of the custom job title for a Manager role within your company. For example, your company might have the custom job titles "Transaction Coordinator" and "Office Manager".

            **Note**: If you are using Rooms Version 5, you must enter a `titleId` when using the Users::InviteClassicManager method. (The `titleId` property is empty for Agent users on Rooms Version 5.) If you are using Rooms Version 6, use the Users::InviteUser method with the `roleId` property instead.
          format: int32
          readOnly: true
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
          readOnly: true
        profileImageUrl:
          type: string
          description: The URL for the user's profile image.
          readOnly: true
      description: Contains details about a user.
      x-ds-definition-name: UserSummary
      x-ms-summary: Contains details about a user.
    UserSummaryList:
      type: object
      properties:
        userSummaries:
          type: array
          description: A list of users.
          items:
            $ref: '#/components/schemas/UserSummary'
        resultSetSize:
          type: integer
          description: The number of results returned in this response.
          format: int32
        startPosition:
          type: integer
          description: The starting zero-based index position of the results set.
            When this property is used as a query parameter, the default value is
            `0`.
          format: int32
        endPosition:
          type: integer
          description: The last zero-based index position in the result set.
          format: int32
          readOnly: true
        nextUri:
          type: string
          description: The URI for the next chunk of records based on the search request.
            This property is `null` for the last set of search results.
        priorUri:
          type: string
          description: The URI for the previous chunk of records based on the search
            request. This property is `null` for the first set of search results.
        totalRowCount:
          type: integer
          description: "Total row count"
          format: int32
      description: Contains a list of users.
      x-ds-definition-name: UserSummaryList
      x-ms-summary: Contains a list of users.
    UserToInvite:
      required:
      - accessLevel
      - defaultOfficeId
      - eSignPermissionProfileId
      - email
      - firstName
      - lastName
      - roleId
      type: object
      properties:
        firstName:
          type: string
          description: (Required) The user's first name.
        lastName:
          type: string
          description: (Required) The user's last name.
        email:
          type: string
          description: (Required) The user's email address.
        roleId:
          type: integer
          description: |
            (Required) In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who are not part of your organization.
          format: int32
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
        defaultOfficeId:
          type: integer
          description: (Required) The id of the user's default office.
          format: int32
        regions:
          type: array
          description: An array of region ids for the regions in which a user with
            the `Region accessLevel` has been granted the ability to participate.
            If the value for `accessLevel` is `Region`, this property is required.
          items:
            type: integer
            format: int32
        offices:
          type: array
          description: An array of office ids for the offices in which a user with
            an `Office` or `Contributor` `accessLevel` has been granted the ability
            to participate. If the value for `accessLevel` is `Office`, this property
            is required.
          items:
            type: integer
            format: int32
        eSignPermissionProfileId:
          type: string
          description: (Required) When an administrator or authorized member invites
            a new user to become an account member, the system also creates an eSignature
            account for the invitee at the same time. The eSignPermissionProfileId
            is the id of the eSignature permission set to assign to the member.
        redirectUrl:
          type: string
          description: URL to redirect to after inviting.
          format: uri
      description: This request object contains information about the user that you
        are inviting.
      x-ds-definition-name: UserToInvite
      x-ms-summary: This request object contains information about the user that you
        are inviting.
    ApiError:
      type: object
      properties:
        errorCode:
          type: string
          description: The code associated with the error condition.
        message:
          type: string
          description: A brief message describing the error condition.
      description: This object describes errors that occur. It is valid only for responses
        and ignored in requests.
      x-ds-definition-name: ApiError
      x-ms-summary: This object describes errors that occur. It is valid only for
        responses and ignored in requests.
    RoomDocumentOwner:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
        firstName:
          type: string
          description: The user's first name.
        lastName:
          type: string
          description: The user's last name.
        companyName:
          type: string
          description: The company name.
        imageSrc:
          type: string
          description: The source of the user's profile picture.
      description: "Room document owner"
      x-ds-definition-name: RoomDocumentOwner
      x-ms-summary: ""
    Accounts:
      type: object
      properties:
        companyId:
          type: integer
          description: The id of the company.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        companyVersion:
          description: "Product version"
          $ref: '#/components/schemas/ProductVersion'
        docuSignAccountGuid:
          type: string
          description: The globally-unique identifier (GUID) for the DocuSign Rooms
            account.
          readOnly: true
        defaultFieldSetId:
          type: string
          description: The id of the company's default field set. A field set is a
            set of data fields and the information about those data fields that the
            system uses to configure rooms. It corresponds to the **Admin > Company
            > Room Details** area in the console.
          format: uuid
          readOnly: true
        requireOfficeLibraryAssignments:
          type: boolean
          description: "Require office library assignments"
          readOnly: true
      description: Information about accounts.
      x-ds-definition-name: AccountSummary
      x-ds-category: Accounts
      x-ds-order: "10"
      x-ms-summary: Information about accounts.
    # Documents:
    #   required:
    #   - base64Contents
    #   - name
    #   type: object
    #   properties:
    #     documentId:
    #       type: integer
    #       description: The ID of the document.
    #       format: int32
    #     name:
    #       type: string
    #       description: The name of the document.
    #     roomId:
    #       type: integer
    #       description: The id of the room the document belongs to.
    #       format: int32
    #     ownerId:
    #       type: integer
    #       description: The id of the user who owns the document.
    #       format: int32
    #     size:
    #       type: integer
    #       description: The size of the document in bytes. This is the number of bytes
    #         in the _decoded_ document, not the size of `base64Contents`.
    #       format: int64
    #     folderId:
    #       type: integer
    #       description: The id of the folder the document is in.
    #       format: int32
    #     createdDate:
    #       type: string
    #       description: "The UTC DateTime when the document was created. \n\nExample:\
    #         \ `2019-07-25T22:18:56.95Z`"
    #       format: date-time
    #     isSigned:
    #       type: boolean
    #       description: '**True** if the document is signed.'
    #     contentType:
    #       type: string
    #       description: ""
    #     base64Contents:
    #       type: string
    #       description: |-
    #         In a response, when the query parameter `includeContents` is **true**, the base64-encoded contents of the document.

    #         In a request, the base64-encoded contents of the document to add.
    #   description: Information about a document. This object is read-only when used
    #     as a response.
    #   x-ds-definition-name: Document
    #   x-ds-category: Documents
    #   x-ds-order: "10"
    #   x-ms-summary: Information about a document. This object is read-only when used
    #     as a response.
    ESignPermissionProfiles:
      type: object
      properties:
        eSignPermissionProfileId:
          type: string
          description: When an administrator or authorized member invites a new user
            to become an account member, the system also creates an eSignature account
            for the invitee at the same time. The `eSignPermissionProfileId` is the
            id of the eSignature permission set to assign to the member.
        name:
          type: string
          description: The name of the eSignature permission profile.
        settings:
          $ref: '#/components/schemas/ESignAccountRoleSettings'
      description: When you create or invite a new member in Rooms, the system creates
        an eSignature account for the member at the same time.
      x-ds-definition-name: ESignPermissionProfile
      x-ds-category: ESignPermissionProfiles
      x-ds-order: "10"
      x-ms-summary: When you create or invite a new member in Rooms, the system creates
        an eSignature account for the member at the same time.
    Fields:
      type: object
      properties:
        fieldId:
          type: string
          description: |
            The id of the field.

            Example: `10318d28-xxxx-xxxx-xxxx-d3df664f602c`
          format: uuid
          readOnly: true
        fieldDefinitionId:
          type: string
          description: The id of the DocuSign field definition from which this field
            derives. When an Admin user configures a field set by using the API, this
            is the id that they use to add this field definition to the field set.
            The original field definition associated with this id contains more information
            about the field, such as the default title, default API name, and configurations
            such as the maximum length or the maximum value allowed.
          format: uuid
          readOnly: true
        title:
          type: string
          description: "Title of the fields"
          readOnly: true
        apiName:
          type: string
          description: "The name that the Rooms API uses for the field. \n\nExample:\
            \ `companyContactName`\n\n**Note**: When you create a new room, you use\
            \ the `apiName` values for fields to specify the details that you want\
            \ to appear on the room's **Details** tab."
          readOnly: true
        type:
          type: string
          description: "Type of the fields"
          readOnly: true
        fields:
          type: array
          description: An array of fields.
          readOnly: true
          items:
            $ref: '#/components/schemas/Field'
        configuration:
          $ref: '#/components/schemas/FieldConfiguration'
        customData:
          $ref: '#/components/schemas/CustomData'
      description: The fields resource provides a method that enables you to retrieve
        a specific field set. This is a set of fields that can appear on a room's
        **Details** tab.
      x-ds-definition-name: Field
      x-ds-category: Fields
      x-ds-order: "10"
      x-ms-summary: The fields resource provides a method that enables you to retrieve
        a specific field set. This is a set of fields that can appear on a room's
        **Details** tab.
    ExternalFormFillSessions:
      type: object
      properties:
        url:
          type: string
          description: "URL for a new external form fill session"
          format: uri
      description: This resource provides a method that returns a URL for a new external
        form fill session, based on the `roomId` and `formId` that you specify in
        the `formFillSessionForCreate` request body.
      x-ds-definition-name: ExternalFormFillSession
      x-ds-category: Forms
      x-ds-order: "10"
      x-ms-summary: This resource provides a method that returns a URL for a new external
        form fill session, based on the `roomId` and `formId` that you specify in
        the `formFillSessionForCreate` request body.
    FormGroups:
      type: object
      properties:
        formGroupId:
          type: string
          description: |
            The ID of the form group.

            Example: `7b879c89-xxxx-xxxx-xxxx-819d6a85e0a1`
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        formCount:
          type: integer
          description: "The number of forms in the form library. \n\nExample: `50`"
          format: int32
          readOnly: true
      description: The `FormGroups` resource enables you to create and manage custom
        groups of association forms.
      x-ds-definition-name: FormGroupSummary
      x-ds-category: Forms
      x-ds-order: "10"
      x-ms-summary: The `FormGroups` resource enables you to create and manage custom
        groups of association forms.
    FormLibraries:
      type: object
      properties:
        formsLibraryId:
          type: string
          description: |
            The id of the form library.

            Example: `402c6e2f-xxxx-xxxx-xxxx-ff3f249f6da9`
          format: uuid
          readOnly: true
        name:
          type: string
          description: The name of the office.
          readOnly: true
        formCount:
          type: integer
          description: "The number of forms in the form library. \n\nExample: `50`"
          format: int32
          readOnly: true
      description: 'The `FormLibraries` resource enables you to access standard real
        estate industry association forms and add them to rooms. '
      x-ds-definition-name: FormLibrarySummary
      x-ds-category: Forms
      x-ds-order: "10"
      x-ms-summary: 'The `FormLibraries` resource enables you to access standard real
        estate industry association forms and add them to rooms. '
    ClosingStatuses:
      type: object
      properties:
        closingStatusId:
          type: string
          description: |-
            The id of the closing status.

            Example: `exp`
        name:
          type: string
          description: The name of the office.
      description: |
        This resource provides a method that enables you retrieve a list of closing statuses, or valid reasons for closing a room.
      x-ds-definition-name: ClosingStatus
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: |
        This resource provides a method that enables you retrieve a list of closing statuses, or valid reasons for closing a room.
    ContactSides:
      type: object
      properties:
        contactSideId:
          type: string
          description: |-
            The id of the contact side.

            Example: `L`
        name:
          type: string
          description: The name of the office.
      description: The `ContactSides` resource provides a method that enables you
        to retrieve a list of valid values for transaction contact sides.
      x-ds-definition-name: ContactSide
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `ContactSides` resource provides a method that enables you
        to retrieve a list of valid values for transaction contact sides.
    Countries:
      type: object
      properties:
        countryId:
          type: string
          description: The two-letter country code of the office address (for example,
            "UK" for United Kingdom).
        name:
          type: string
          description: The name of the office.
      description: The `Countries` resource provide a method that enables you to retrieve
        a list of countries in which you can create an office.
      x-ds-definition-name: Country
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `Countries` resource provide a method that enables you to
        retrieve a list of countries in which you can create an office.
    Currencies:
      type: object
      properties:
        currencyId:
          type: string
          description: |-
            The three-letter code for the currency.

            Example: `CAD`
        name:
          type: string
          description: The name of the office.
      description: The `Currencies` method provides a resource that enables you to
        retrieve a list currencies that you can use for listing, offer, and loan amounts.
      x-ds-definition-name: Currency
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `Currencies` method provides a resource that enables you to
        retrieve a list currencies that you can use for listing, offer, and loan amounts.
    FinancingTypes:
      type: object
      properties:
        financingTypeId:
          type: string
          description: |-
            The id of the financing type.

            Example: `conv` (for `Conventional`)
        name:
          type: string
          description: The name of the office.
      description: This resource provides a method that enables you to retrieve a
        list of financing types.
      x-ds-definition-name: FinancingType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: This resource provides a method that enables you to retrieve a
        list of financing types.
    OriginsOfLeads:
      type: object
      properties:
        originOfLeadId:
          type: string
          description: |-
            The id of the origin of lead.

            Example: `tru` (for `Trulia`)
        name:
          type: string
          description: The name of the office.
      description: The `OriginsOfLeads` resource enables you to get a list of origins
        of leads (such as Trulia or Zillow) that you can specify for rooms.
      x-ds-definition-name: OriginOfLead
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `OriginsOfLeads` resource enables you to get a list of origins
        of leads (such as Trulia or Zillow) that you can specify for rooms.
    PropertyTypes:
      type: object
      properties:
        propertyTypeId:
          type: string
          description: |-
            The id of the property type.

            Example: `resd` (for `Residential Detached`)
        name:
          type: string
          description: The name of the office.
      description: The `OriginsOfLeads` resource enables you to get a list of property
        types (such as ????) that you can specify for rooms.
      x-ds-definition-name: PropertyType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `OriginsOfLeads` resource enables you to get a list of property
        types (such as ????) that you can specify for rooms.
    RoomContactTypes:
      type: object
      properties:
        id:
          type: string
          description: |-
            The id of the room contact type.

            Example: `lisagent` (for `Listing Agent`)
        name:
          type: string
          description: The name of the office.
      description: The `RoomContactTypes` resource provides a method that enables
        you to retrieve a list of room contact types, such as Buyer, Seller, and Listing
        Agent.
      x-ds-definition-name: RoomContactType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `RoomContactTypes` resource provides a method that enables
        you to retrieve a list of room contact types, such as Buyer, Seller, and Listing
        Agent.
    SellerDecisionTypes:
      type: object
      properties:
        sellerDecisionTypeId:
          type: string
          description: |-
            The id of the seller decision type.

            Example: `appr` (for `Approved`)
        name:
          type: string
          description: The name of the seller decision type.
      description: Contains information about a seller decision type.
      x-ds-definition-name: SellerDecisionType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: Contains information about a seller decision type.
    SpecialCircumstanceTypes:
      type: object
      properties:
        specialCircumstanceTypeId:
          type: string
          description: |-
            The id of the special circumstance type.

            Example: `ss` (for `Short Sale`)
        name:
          type: string
          description: The name of the office.
      description: The `SpecialCircumstanceTypes` resource provides a method that
        enables you to retrieve a list of special circumstance types, such as `Short
        Sale` and `Foreclosure`. These are the values that you can select for the
        **Special circumstances** field that appears on the **Room Details** page.
      x-ds-definition-name: SpecialCircumstanceType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `SpecialCircumstanceTypes` resource provides a method that
        enables you to retrieve a list of special circumstance types, such as `Short
        Sale` and `Foreclosure`. These are the values that you can select for the
        **Special circumstances** field that appears on the **Room Details** page.
    States:
      type: object
      properties:
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
        name:
          type: string
          description: The name of the office.
      description: The `States` resource provides a method that enables you to retrieve
        a list of states and state ids that the Rooms API uses.
      x-ds-definition-name: State
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `States` resource provides a method that enables you to retrieve
        a list of states and state ids that the Rooms API uses.
    TaskDateTypes:
      type: object
      properties:
        taskDateTypeId:
          type: string
          description: |-
            The id of the task date type.

            Example: `tdd` (for `Task Due Date`)
        name:
          type: string
          description: The name of the office.
      description: This resource provides a method that returns a list of date types
        that you can use with tasks, such as `Actual Close Date` and `Task Due Date`.
      x-ds-definition-name: TaskDateType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: This resource provides a method that returns a list of date types
        that you can use with tasks, such as `Actual Close Date` and `Task Due Date`.
    TaskResponsibilityTypes:
      type: object
      properties:
        taskResponsibilityTypeId:
          type: string
          description: The id of the task responsibility type.
        name:
          type: string
          description: The name of the office.
      description: 'The `TaskResponsibilityTypes` resource enables you to return a
        list of responsibility types that you can assign to users when you add them
        to a task. '
      x-ds-definition-name: TaskResponsibilityType
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: 'The `TaskResponsibilityTypes` resource enables you to return
        a list of responsibility types that you can assign to users when you add them
        to a task. '
    TaskStatuses:
      type: object
      properties:
        taskStatusId:
          type: string
          description: ""
        name:
          type: string
          description: The name of the office.
      description: ""
      x-ds-definition-name: TaskStatus
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: ""
    TimeZones:
      type: object
      properties:
        timeZoneId:
          type: string
          description: |-
            The id of the time zone for the office address.

            Example: `eastern` (for the Eastern US Time Zone)
        name:
          type: string
          description: The name of the office.
      description: The `TimeZones` resource enables you to list the time zones that
        you can assign to an office.
      x-ds-definition-name: TimeZone
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: The `TimeZones` resource enables you to list the time zones that
        you can assign to an office.
    TransactionSides:
      type: object
      properties:
        transactionSideId:
          type: string
          description: |-
            The id of the transaction side. Valid values are:

            - `buy`
            - `sell`
            - `listbuy`
            - `refi`
        name:
          type: string
          description: The name of the office.
      description: "The `TransactionSides` resource provides a method that enables\
        \ you to list possible real estate transaction sides. \n"
      x-ds-definition-name: TransactionSide
      x-ds-category: GlobalResources
      x-ds-order: "10"
      x-ms-summary: "The `TransactionSides` resource provides a method that enables\
        \ you to list possible real estate transaction sides. \n"
    Offices:
      required:
      - name
      type: object
      properties:
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
        name:
          type: string
          description: The name of the office.
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        address1:
          type: string
          description: First line of the office street address.
        address2:
          type: string
          description: Second line of the office street address.
        city:
          type: string
          description: City name or metropolitan area of the office address.
        stateId:
          type: string
          description: |-
            A concatenation of the two-letter country code with the state/province/region of the office address.

            Example: `US-OH` (for Ohio)
        postalCode:
          type: string
          description: Postal code or ZIP code of the office address.
        countryId:
          type: string
          description: The two-letter country code of the office address (for example,
            "UK" for United Kingdom).
        timeZoneId:
          type: string
          description: |-
            The id of the time zone for the office address.

            Example: `eastern` (for the Eastern US Time Zone)
        phone:
          type: string
          description: Phone number of the office.
        createdDate:
          type: string
          description: |-
            The UTC DateTime when the office was created.

            Example: `2019-07-17T17:45:42.783Z`

            **Note**: This value is read-only.
          format: date-time
      description: Object that contains information about an office in the Rooms account.
      x-ds-definition-name: Office
      x-ds-category: Offices
      x-ds-order: "10"
      x-ms-summary: Object that contains information about an office in the Rooms
        account.
    Regions:
      required:
      - name
      type: object
      properties:
        regionId:
          type: integer
          description: The id of the region. This is the id that the system generated
            when you created the region.
          format: int32
        name:
          type: string
          description: String that specifies the region name.
        createdDate:
          type: string
          description: UTC datetime that the region was created (for example "2019-06-27T19:32:46.943").
            Note that the service assigns this value, so it is read-only.
          format: date-time
      description: ""
      x-ds-definition-name: Region
      x-ds-category: Regions
      x-ds-order: "10"
      x-ms-summary: ""
    Roles:
      type: object
      properties:
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
        legacyRoleId:
          type: string
          description: The legacy name of the role in Rooms Version 5.
        name:
          type: string
          description: "The name of the role. \n\nExamples: \n\n- `Agent`\n- `Default\
            \ Admin`"
        isDefaultForAdmin:
          type: boolean
          description: When **true**, the role is the default for account administrators.
        isExternal:
          type: boolean
          description: When set to **true**, the role is an external role. You assign
            external roles to people from outside your company when you invite them
            into a room.
        createdDate:
          type: string
          description: The UTC DateTime when the role was created.
          format: date-time
        isAssigned:
          type: boolean
          description: When set to **true**, indicates that this role is currently
            assigned to a user.
        permissions:
          $ref: '#/components/schemas/Permissions'
      description: This object contains information about a role.
      x-ds-definition-name: Role
      x-ds-category: Roles
      x-ds-order: "10"
      x-ms-summary: This object contains information about a role.
    Rooms:
      type: object
      properties:
        roomId:
          type: integer
          description: The id of the room.
          format: int32
        companyId:
          type: integer
          description: The id of the company.
          format: int32
        name:
          type: string
          description: |-
            The name of the room.

            Maximum Length: 100 characters.
        officeId:
          type: integer
          description: The id of the office. This is the id that the system generated
            when you created the office.
          format: int32
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
        submittedForReviewDate:
          type: string
          description: |-
            The UTC DateTime when the room was submitted for review.

            **Note**: In Rooms v5, this is when an agent submitted the room to a manager. In Rooms v6, this is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true**.
          format: date-time
        closedDate:
          type: string
          description: The UTC date and time when the room was closed.
          format: date-time
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the room. For example,
            a reviewer might reject closing a room if documentation is missing or
            the details are inaccurate.
          format: date-time
        createdByUserId:
          type: integer
          description: The id of the user who created the room.
          format: int32
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the room.
          format: int32
        closedStatusId:
          type: string
          description: "The reason why a room was closed. Possible values are:\n\n\
            - `sold`: Property sold.\n- `dup`: Duplicate room.\n- `escrcncl`: Escrow\
            \ canceled.\n- `inspctn`: Inspection issues.\n- `exp`: Listing expired.\n\
            - `lostbuy`: Buyer withdrew.\n- `list`: Listing withdrawn. \n- `newlist`:\
            \ New listing.\n- `offrrjct`: Offer not accepted.\n- `pend`: Pending.\
            \ An agent might use this status to temporarily hide a room from their\
            \ Active rooms view if they are blocked on a task. When they are ready\
            \ to reopen the room, they can quickly find it by filtering for rooms\
            \ in `pending` status.\n- `lstcanc`: Listing canceled. \n- `lstleave`:\
            \ Listing released.\n- `sellwtdw`: Seller withdrew.\n- `nofin`: Buyer\
            \ unable to finance.\n- `disciss`: Property disclosure issue.\n- `appiss`:\
            \ Appraisal issues.\n- `mtgiss`: Mortgage issues. Use when details about\
            \ why the buyer wasn't able to obtain financing are unknown.\n- `zoniss`:\
            \ Zoning issues.\n- `attiss`: Attorney review issues.\n- `proplsd`: Property\
            \ leased. Use for the list side of the transaction.\n- `tenlease`: Tenant\
            \ signed lease. Use when an agent helps renters find a to lease.   "
        fieldData:
          $ref: '#/components/schemas/FieldData'
      description: The Rooms resource provides methods that enable you to create and
        manage rooms. In Rooms for Real Estate, a room is a collaborative digital
        space corresponding to a specific property. In Rooms for Mortgages, a room
        corresponds to a specific loan.
      x-ds-definition-name: Room
      x-ds-category: Rooms
      x-ds-order: "10"
      x-ms-summary: The Rooms resource provides methods that enable you to create
        and manage rooms. In Rooms for Real Estate, a room is a collaborative digital
        space corresponding to a specific property. In Rooms for Mortgages, a room
        corresponds to a specific loan.
    RoomFolders:
      type: object
      properties:
        roomFolderId:
          type: integer
          description: ""
          format: int32
        name:
          type: string
          description: The name of the office.
        isDefault:
          type: boolean
          description: ""
      description: ""
      x-ds-definition-name: RoomFolder
      x-ds-category: Rooms
      x-ds-order: "10"
      x-ms-summary: ""
    RoomTemplates:
      type: object
      properties:
        roomTemplateId:
          type: integer
          description: The id of the room template.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the room template.
          readOnly: true
        taskTemplateCount:
          type: integer
          description: The total number of task templates that the room template uses.
          format: int32
          readOnly: true
      description: The room template resources provides a method that enables you
        to retrieve the room templates associated with an account.
      x-ds-definition-name: RoomTemplate
      x-ds-category: RoomTemplates
      x-ds-order: "10"
      x-ms-summary: The room template resources provides a method that enables you
        to retrieve the room templates associated with an account.
    TaskLists:
      type: object
      properties:
        taskListId:
          type: integer
          description: The id of the task list.
          format: int32
        name:
          type: string
          description: The name of the office.
        taskListTemplateId:
          type: integer
          description: The id of the task list template.
          format: int32
        submittedForReviewDate:
          type: string
          description: |-
            The UTC DateTime when the room was submitted for review.

            **Note**: In Rooms v5, this is when an agent submitted the room to a manager. In Rooms v6, this is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true**.
          format: date-time
        approvalDate:
          type: string
          description: "Approval date"
          format: date-time
        rejectedDate:
          type: string
          description: The date on which the reviewer rejected the room. For example,
            a reviewer might reject closing a room if documentation is missing or
            the details are inaccurate.
          format: date-time
        createdDate:
          type: string
          description: |+
            The UTC date and time when the item was created. This is a read-only value that the service assigns.

            Example: `2019-07-17T17:45:42.783Z`

          format: date-time
        approvedByUserId:
          type: integer
          description: "Approved by user ID"
          format: int32
        rejectedByUserId:
          type: integer
          description: The id of the user who rejected the room.
          format: int32
        comment:
          type: string
          description: "Task comments"
        tasks:
          type: array
          description: A list of tasks in the task list.
          items:
            $ref: '#/components/schemas/TaskSummary'
      description: The `TaskLists` resource helps you keep track of the documents
        and activities you must complete before you can close a room.
      x-ds-definition-name: TaskList
      x-ds-category: TaskLists
      x-ds-order: "10"
      x-ms-summary: The `TaskLists` resource helps you keep track of the documents
        and activities you must complete before you can close a room.
    TaskListTemplates:
      type: object
      properties:
        taskListTemplateId:
          type: integer
          description: The id of the task list template.
          format: int32
        name:
          type: string
          description: The name of the office.
        taskCount:
          type: integer
          description: The total number of tasks in the task list template.
          format: int32
        tasksWithDocumentsCount:
          type: integer
          description: The number of tasks in the task list template that have documents
            associated with them.
          format: int32
      description: |
        A task list template is a custom task list that can be added to rooms.
      x-ds-definition-name: TaskListTemplate
      x-ds-category: TaskLists
      x-ds-order: "10"
      x-ms-summary: |
        A task list template is a custom task list that can be added to rooms.
    Users:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user.
          format: int32
        email:
          type: string
          description: The user's email address.
        firstName:
          type: string
          description: The user's first name.
        lastName:
          type: string
          description: The user's last name.
        isLockedOut:
          type: boolean
          description: When set to **true**, an administrator has locked the user's
            account. For example, an administrator might want to lock an agent's account
            after they leave the brokerage until they determine how to transfer the
            agent's rooms and data to another active user.
        status:
          type: string
          description: Valid values are 'Active', 'Pending'
        accessLevel:
          description: "Access level"
          $ref: '#/components/schemas/AccessLevel'
        defaultOfficeId:
          type: integer
          description: The id of the user's default office.
          format: int32
        titleId:
          type: integer
          description: |-
            In Rooms Version 5, this is the id of the custom job title for a Manager role within your company. For example, your company might have the custom job titles "Transaction Coordinator" and "Office Manager".

            **Note**: If you are using Rooms Version 5, you must enter a `titleId` when using the Users::InviteClassicManager method. (The `titleId` property is empty for Agent users on Rooms Version 5.) If you are using Rooms Version 6, use the Users::InviteUser method with the `roleId` property instead.
          format: int32
        roleId:
          type: integer
          description: |-
            In Rooms v6, this is the id of the company role assigned to the user.

            You can assign external roles to users who aren't a part of your organization.

            **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
          format: int32
        profileImageUrl:
          type: string
          description: The URL for the user's profile image.
        offices:
          type: array
          description: An array of office ids for the offices in which a user with
            an `Office` or `Contributor` `accessLevel` has been granted the ability
            to participate.
          items:
            type: integer
            format: int32
        regions:
          type: array
          description: An array of region ids for the regions in which a user with
            the `Region accessLevel` has been granted the ability to participate.
          items:
            type: integer
            format: int32
        permissions:
          $ref: '#/components/schemas/ClassicManagerPermissions'
      description: The Users resource provides methods that enable you to add, update,
        delete, and manage users. A user is a person who is either added to a room
        (as a participant), or who is a member of a company.
      x-ds-definition-name: User
      x-ds-category: Users
      x-ds-order: "10"
      x-ms-summary: The Users resource provides methods that enable you to add, update,
        delete, and manage users. A user is a person who is either added to a room
        (as a participant), or who is a member of a company.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oAuth2Auth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://developers.docusign.com/platform/auth/)
      flows:
        implicit:
          authorizationUrl: https://account-d.docusign.com/oauth/auth
          scopes: 
            dtr.rooms.read: Read rooms data.
            dtr.rooms.write: Update the data of a room.
            dtr.documents.read: Read documents from DocuSign Rooms.
            dtr.documents.write: Write documents to DocuSign Rooms.
            dtr.profile.read: Read profile data for accounts or signers associated with your company.
            dtr.profile.write: Write profile data to accounts or signers associated with your company.
            dtr.company.read: Read information from all rooms and profiles associated with your company.
            dtr.company.write: Write information to all rooms and profiles associated with your company.
            room_forms: Use endpoints related to the forms feature.
            signature: The eSignature API signature scope is required to call the GetESignPermissionProfiles method.
        authorizationCode:
          authorizationUrl: https://account-d.docusign.com/oauth/auth
          tokenUrl: https://account-d.docusign.com/oauth/token
          scopes: 
            dtr.rooms.read: Read rooms data.
            dtr.rooms.write: Update the data of a room.
            dtr.documents.read: Read documents from DocuSign Rooms.
            dtr.documents.write: Write documents to DocuSign Rooms.
            dtr.profile.read: Read profile data for accounts or signers associated with your company.
            dtr.profile.write: Write profile data to accounts or signers associated with your company.
            dtr.company.read: Read information from all rooms and profiles associated with your company.
            dtr.company.write: Write information to all rooms and profiles associated with your company.
            room_forms: Use endpoints related to the forms feature.
            signature: The eSignature API signature scope is required to call the GetESignPermissionProfiles method.
x-ds-categories:
- name: Accounts
  summary: Information about accounts.
  description: Information about accounts.
- name: Documents
  summary: Information about documents.
  description: Information about documents.
- name: ESignPermissionProfiles
  summary: A permission profile is a standard set of user permissions that you can
    apply to individual users or the users in a group. This functionality makes it
    easier to manage permissions for a large number of users.
  description: |-
    When you create or invite a new member in Rooms, the system creates an eSignature account for the member at the same time. This section shows you how to retrieve a list of eSignature permission profiles that the current user can assign to a new member.

    You can use the API only to retrieve and assign eSignature permission profiles. You create and modify permission profiles in the DocuSign console.
- name: Fields
  summary: This section shows you how to retrieve a specific field set. This is a
    set of fields that can appear on a room's **Details** tab.
  description: Information about field sets.
- name: Forms
  summary: |+
    The Forms feature of DocuSign Rooms for Real Estate enables provides access to standard industry association forms that you can add to rooms.

    **Note**: Forms is not a default feature and is currently only available in Rooms for Real Estate. To request access to Forms, contact your DocuSign Account Manager.

  description: "## Form groups\n\nWith the appropriate permissions, form administrators\
    \ at your company can create form groups, or curated set of forms gathered from\
    \ the association **form libraries** to which DocuSign provides access. Form groups\
    \ enable agents to know which forms to add to rooms based on the type of transaction\
    \ they are working on. When creating groups, administrators can make certain forms\
    \ required, ensuring compliance. If you don't create groups, agents will have\
    \ to choose forms they need from a list of association forms.\n\n## Permissions\n\
    \nTo manage forms, you must have the `canManageFormGroups` permission, which enables\
    \ you to access the **Forms** tab in **Admin**. For all other roles, assign permissions\
    \ based on how these users will be working with forms. If no form permissions\
    \ are enabled for these roles, users cannot add forms to rooms.\n\nForm administrators\
    \ must have the `canManageFormGroups` permission assigned to their user role.\
    \ This gives them access to the **Forms** tab in **Admin**. However, you should\
    \ also consider the user's access level. For example, if the user has access to\
    \ specific offices, they can only administer form groups for those offices. \n"
- name: GlobalResources
  summary: The Global Resources category organizes resource that are used throughout
    the Rooms API. You typically use these resources when you create or update a room,
    region, office, or user.
  description: |-
    This section shows you how to retrieve the following Global Resources:

    - Activity Types
    - Closing Statuses
    - Contact Sides
    - Countries
    - Currencies
    - Financing Types
    - Origins of Leads
    - Property Types
    - Room Contact Types
    - Seller Decision Types
    - Special Circumstances Types
    - States
    - Task Date Types
    - Task Responsibility Types
    - Time Zones
    - Transaction Sides
- name: Offices
  summary: You can use the API to manage offices in your Rooms account.
  description: This section shows you how to create and manage offices.
- name: Regions
  summary: You can use the API to manage regions associated with your Rooms account.
  description: This section shows you how to create and manage regions for a Rooms
    account.
- name: Roles
  summary: 'The Roles resource enables you to easily manage user permissions. '
  description: |-
    Each role is associated with specific permissions. Each new member is assigned a role when you create them, automatically granting them the permissions associated with that role.

    Roles use the following permission types to control the actions that users can perform:

    - Room
    - Room Details
    - Documents
    - Envelopes
    - Member Management
    - Company Settings

    ## Roles in Rooms v5

    Rooms v5 has three predefined roles:

    - **Admin**: This role can manage all members and company settings.
    - **Manager**: This role is designed to manage rooms in one or more offices or regions. Depending on the permissions that you set for the individual member in the `ClassicManagerPermissions`, managers can also perform additional tasks, such as managing member accounts and company account information.
    - **Agent**: This role is for contributors who only have access to rooms that they create or that are created for them. Agents cannot manage company settings or other members.

    However, you can reconfigure the `permissions` for these roles in the `Members` object.

    [members]: ./Members. h t m l Fix this when we can link to objects.
    [ClassicMemberPermissions]: ./definition/ClassicManagerPermissions. h t m l

    ## Roles in Rooms v6

    Rooms v6 enables you to fully configure custom roles containing permissions that make sense for your company. Because each new member is assigned a role, you must set up these roles before you can invite members to join your account.

    In Rooms v6, permissions for roles are tied to the `roleId` property and not yet exposed. You can learn more about these permission types and configure them in the console.

    ### Internal and External Roles

    In Rooms v6, a role can be either internal or external. You assign internal roles to people inside your company. You assign external roles to people outside your company when you invite them to a room.

    Each member inside your company has a default company role. However, they can also be assigned additional roles with different permissions on a per-room basis. Regardless of the member's default company role, what they can do in a room is entirely controlled by their role in that particular room.
- name: Rooms
  summary: This section shows you how to create and mange rooms. In Rooms for Real
    Estate, a room is a collaborative digital space corresponding to a specific property.
    In Rooms for Mortgages, a room corresponds to a specific loan.
  description: |
    A room can hold documents, envelopes, a list of tasks comprising a workflow, and other related information. You can invite others to this space and assign them permissions on a per-room basis. The documentation in this section shows you how to perform these and other tasks.
- name: RoomTemplates
  summary: 'Room templates enable your company to standardize the new rooms that users
    create. '
  description: This section shows you how to retrieve room templates. You can perform
    additional room template tasks in the console.
- name: TaskLists
  summary: The TaskLists resource helps you keep track of the documents and activities
    you must complete before you can close a room.
  description: Your administrator may also have created custom task list templates
    that can be added to rooms. If your administrator created room templates, those
    room templates may include task lists for you to use.
- name: Users
  summary: The Users resource provides methods that enable you to add, update, delete,
    and manage users.
  description: A user is a person who is either added to a room (as a participant),
    or who is a member of a company. This section shows you how to manage users, including
    how to update and delete National Association of REALTORSÂ® member numbers.
