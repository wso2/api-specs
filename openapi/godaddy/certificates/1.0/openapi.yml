openapi: 3.0.1
info:
  x-ballerina-display:
    label: GoDaddy Certificates
    iconPath: "icon.png"
  title: GoDaddy Certificates API
  version: "1.0"
  description: >-
    This is a generated connector for [GoDaddy Certificates API v1](https://developer.godaddy.com/doc/endpoint/certificates) OpenAPI specification.
    
    The GoDaddy Certificates API provides capability to access GoDaddy operations related to certificates.
  x-ballerina-init-description: >-
    The connector initialization requires setting the API credentials. 
    
    Create a [GoDaddy account](https://sg.godaddy.com/) and obtain tokens by following [this guide](https://developer.godaddy.com/getstarted).
servers:
- url: https://api.ote-godaddy.com/
tags:
- name: v1
  description: ""
- name: v2
  description: ""
paths:
  /v1/certificates:
    post:
      tags:
      - v1
      summary: Create a pending order for certificate
      description: '<p>Creating a certificate order can be a long running asynchronous
        operation in the PKI workflow. The PKI API supports 2 options for getting
        the completion stateful actions for this asynchronous operations: 1) by polling
        operations -- see /v1/certificates/{certificateId}/actions 2) via WebHook
        style callback -- see ''/v1/certificates/{certificateId}/callback''.</p>'
      operationId: certificate_create
      parameters:
      - name: X-Market-Id
        in: header
        description: Setting locale for communications such as emails and error messages
        schema:
          type: string
          default: Default locale for shopper account
      requestBody:
        description: The certificate order information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateCreate'
        required: true
      responses:
        202:
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateIdentifier'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow renew
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: '`email` is not empty<br>`csr` is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: certificateCreate
      security:
          - ApiKeyAuth: []
  /v1/certificates/validate:
    post:
      tags:
      - v1
      summary: Validate a pending order for certificate
      operationId: certificate_validate
      parameters:
      - name: X-Market-Id
        in: header
        description: Setting locale for communications such as emails and error messages
        schema:
          type: string
          default: Default locale for shopper account
      requestBody:
        description: The certificate order info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateCreate'
        required: true
      responses:
        204:
          description: Request validated successfully
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow renew
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: '`email` is not empty <br> `csr` is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: certificateCreate
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}:
    get:
      tags:
      - v1
      summary: Retrieve certificate details
      description: Once the certificate order has been created, this method can be
        used to check the status of the certificate. This method can also be used
        to retrieve details of the certificate.
      operationId: certificate_get
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to lookup
        required: true
        schema:
          type: string
      responses:
        200:
          description: Certificate details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/actions:
    get:
      tags:
      - v1
      summary: Retrieve all certificate actions
      description: This method is used to retrieve all stateful actions relating to
        a certificate lifecycle.
      operationId: certificate_action_retrieve
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to register for callback
        required: true
        schema:
          type: string
      responses:
        200:
          description: Action retrieval successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCertificateAction'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/email/{emailId}/resend:
    post:
      tags:
      - v1
      summary: Resend an email
      description: This method can be used to resend emails by providing the certificate
        id and the email id
      operationId: certificate_resend_email
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to resend email
        required: true
        schema:
          type: string
      - name: emailId
        in: path
        description: Email id for email to resend
        required: true
        schema:
          type: string
      responses:
        204:
          description: Email sent successfully
          content: {}
        404:
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Email Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/email/resend/{emailAddress}:
    post:
      tags:
      - v1
      summary: Add alternate email address
      description: This method adds an alternate email address to a certificate order
        and re-sends all existing request emails to that address.
      operationId: certificate_alternate_email_address
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to resend emails
        required: true
        schema:
          type: string
      - name: emailAddress
        in: path
        description: Specific email address to resend email
        required: true
        schema:
          type: string
      responses:
        200:
          description: Alternate email address added and emails re-sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateEmailHistory'
        404:
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow alternate email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/email/{emailId}/resend/{emailAddress}:
    post:
      tags:
      - v1
      summary: Resend email to email address
      description: This method can be used to resend emails by providing the certificate
        id, the email id, and the recipient email address
      operationId: certificate_resend_email_address
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to resend emails
        required: true
        schema:
          type: string
      - name: emailId
        in: path
        description: Email id for email to resend
        required: true
        schema:
          type: string
      - name: emailAddress
        in: path
        description: Specific email address to resend email
        required: true
        schema:
          type: string
      responses:
        204:
          description: Email sent successfully
          content: {}
        404:
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Email Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/email/history:
    get:
      tags:
      - v1
      summary: Retrieve email history
      description: This method can be used to retrieve all emails sent for a certificate.
      operationId: certificate_email_history
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to retrieve email history
        required: true
        schema:
          type: string
      responses:
        200:
          description: Email history retrieval successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateEmailHistory'
        409:
          description: Email history not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/callback:
    get:
      tags:
      - v1
      summary: Retrieve system stateful action callback url
      description: This method is used to retrieve the registered callback url for
        a certificate.
      operationId: certificate_callback_get
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to register for stateful action callback
        required: true
        schema:
          type: string
      responses:
        200:
          description: Callback registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateCallback'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
    put:
      tags:
      - v1
      summary: Register of certificate action callback
      description: This method is used to register/replace url for callbacks for stateful
        actions relating to a certificate lifecycle. The callback url is a Webhook
        style pattern and will receive POST http requests with json body defined in
        the CertificateAction model definition for each certificate action.  Only
        one callback URL is allowed to be registered for each certificateId, so it
        will replace a previous registration.
      operationId: certificate_callback_replace
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to register/replace for callback
        required: true
        schema:
          type: string
      - name: callbackUrl
        in: query
        description: Callback url registered/replaced to receive stateful actions
        required: true
        schema:
          type: string
      responses:
        204:
          description: Callback replaced/registered
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: Callback url is missing <br> Callback url is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
    delete:
      tags:
      - v1
      summary: Unregister system callback
      description: Unregister the callback for a particular certificate.
      operationId: certificate_callback_delete
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to unregister callback
        required: true
        schema:
          type: string
      responses:
        204:
          description: Callback removed
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/cancel:
    post:
      tags:
      - v1
      summary: Cancel a pending certificate
      description: Use the cancel call to cancel a pending certificate order.
      operationId: certificate_cancel
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to cancel
        required: true
        schema:
          type: string
      responses:
        204:
          description: Certificate order has been canceled
          content: {}
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow cancel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
          - ApiKeyAuth: []
  /v1/certificates/{certificateId}/download:
    get:
      tags:
      - v1
      summary: Download certificate
      operationId: certificate_download
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to download
        required: true
        schema:
          type: string
      responses:
        200:
          description: Certificate retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow download
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /v1/certificates/{certificateId}/reissue:
    post:
      tags:
      - v1
      summary: Reissue active certificate
      description: <p>Rekeying is the process by which the private and public key
        is changed for a certificate. It is a simplified reissue,where only the CSR
        is changed. Reissuing is the process by which domain names are added or removed
        from a certificate.Once a request is validated and approved, the certificate
        will be reissued with the new common name and sans specified. Unlimited reissues
        are available during the lifetime of the certificate.New names added to a
        certificate that do not share the base domain of the common name may take
        additional time to validate. If this API call is made before a previous pending
        reissue has been validated and issued, the previous reissue request is automatically
        rejected and replaced with the current request.</p>
      operationId: certificate_reissue
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to reissue
        required: true
        schema:
          type: string
      requestBody:
        description: The reissue request info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateReissue'
        required: true
      responses:
        202:
          description: Reissue request created
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow reissue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: '`csr` is invalid<br>Delay revocation exceeds maximum'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: reissueCreate
      security:
        - ApiKeyAuth: []
  /v1/certificates/{certificateId}/renew:
    post:
      tags:
      - v1
      summary: Renew active certificate
      description: Renewal is the process by which the validity of a certificate is
        extended. Renewal is only available 60 days prior to expiration of the previous
        certificate and 30 days after the expiration of the previous certificate.
        The renewal supports modifying a set of the original certificate order information.
        Once a request is validated and approved, the certificate will be issued with
        extended validity. Since subject alternative names can be removed during a
        renewal, we require that you provide the subject alternative names you expect
        in the renewed certificate. New names added to a certificate that do not share
        the base domain of the common name may take additional time to validate. </p>
      operationId: certificate_renew
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to renew
        required: true
        schema:
          type: string
      requestBody:
        description: The renew request info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRenew'
        required: true
      responses:
        202:
          description: Renew request created
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow renew
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: '`csr` is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: renewCreate
      security:
        - ApiKeyAuth: []
  /v1/certificates/{certificateId}/revoke:
    post:
      tags:
      - v1
      summary: Revoke active certificate
      description: Use revoke call to revoke an active certificate, if the certificate
        has not been issued a 404 response will be returned.
      operationId: certificate_revoke
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to revoke
        required: true
        schema:
          type: string
      requestBody:
        description: The certificate revocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRevoke'
        required: true
      responses:
        204:
          description: Certificate Revoked
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow revoke
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: certificateRevoke
      security:
        - ApiKeyAuth: []
  /v1/certificates/{certificateId}/siteSeal:
    get:
      tags:
      - v1
      summary: Get Site seal
      description: <p>This method is used to obtain the site seal information for
        an issued certificate. A site seal is a graphic that the certificate purchaser
        can embed on their web site to show their visitors information about their
        SSL certificate. If a web site visitor clicks on the site seal image, a pop-up
        page is displayed that contains detailed information about the SSL certificate.
        The site seal token is used to link the site seal graphic image to the appropriate
        certificate details pop-up page display when a user clicks on the site seal.
        The site seal images are expected to be static images and hosted on the reseller's
        website, to minimize delays for customer page load times.</p>
      operationId: certificate_siteseal_get
      parameters:
      - name: certificateId
        in: path
        description: Certificate id
        required: true
        schema:
          type: string
      - name: theme
        in: query
        description: This value represents the visual theme of the seal. If seal doesn't
          exist, default values are used if params not present. If seal does exist,
          default values will not be used to update unless params present.
        schema:
          type: string
          default: LIGHT
          enum:
          - DARK
          - LIGHT
      - name: locale
        in: query
        description: Determine locale for text displayed in seal image and verification
          page. If seal doesn't exist, default values are used if params not present.
          If seal does exist, default values will not be used to update unless params
          present.
        schema:
          type: string
          default: en
      responses:
        200:
          description: Site seal retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateSiteSeal'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow seal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: '''locale'' is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /v1/certificates/{certificateId}/verifyDomainControl:
    post:
      tags:
      - v1
      summary: Check Domain Control
      description: Domain control is a means for verifying the domain included in
        the certificate order. This resource is useful for resellers that control
        the domains for their customers, and can expedite the verification process.
        See https://www.godaddy.com/help/verifying-your-domain-ownership-for-ssl-certificate-requests-html-or-dns-7452
      operationId: certificate_verifydomaincontrol
      parameters:
      - name: certificateId
        in: path
        description: Certificate id to lookup
        required: true
        schema:
          type: string
      responses:
        204:
          description: Domain control was successful
          content: {}
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Certificate id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Domain control was not successful <br> Certificate state does
            not allow domain control
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /v2/certificates:
    get:
      tags:
      - v1
      summary: Search for certificate details by entitlement
      description: Once the certificate order has been created, this method can be
        used to check the status of the certificate. This method can also be used
        to retrieve details of the certificates associated to an entitlement.
      operationId: certificate_get_entitlement
      parameters:
      - name: entitlementId
        in: query
        description: Entitlement id to lookup
        required: true
        schema:
          type: string
      - name: latest
        in: query
        description: Fetch only the most recent certificate
        schema:
          type: boolean
          default: true
      responses:
        200:
          description: Certificate details retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certificate'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: Entitlement id not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /v2/certificates/download:
    get:
      tags:
      - v1
      summary: Download certificate by entitlement
      operationId: certificate_download_entitlement
      parameters:
      - name: entitlementId
        in: query
        description: Entitlement id to download
        required: true
        schema:
          type: string
      responses:
        200:
          description: Certificate retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateBundle'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entitlement id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Certificate state does not allow download
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: Entitlement id not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /v2/customers/{customerId}/certificates:
    get:
      tags:
      - v2
      summary: Retrieve customer's certificates
      description: This method can be used to retrieve a list of certificates for
        a specified customer. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**
        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**
        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: getCustomerCertificatesByCustomerId
      parameters:
      - name: customerId
        in: path
        description: An identifier for a customer
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: Number of results to skip for pagination
        schema:
          pattern: ^[0-9]+$
          type: integer
          format: integer-positive
      - name: limit
        in: query
        description: Maximum number of items to return
        schema:
          pattern: ^[0-9]+$
          type: integer
          format: integer-positive
      responses:
        200:
          description: Customer certificate information retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateSummariesV2'
        401:
          description: Authentication info not sent or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - UNAUTHORIZED
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - ACCESS_DENIED
        422:
          description: Application-specific request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INVALID_INPUT
        429:
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
          x-error-codes:
          - RATE_LIMITED
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INTERNAL_SERVER_ERROR
      security:
        - ApiKeyAuth: []
  /v2/customers/{customerId}/certificates/{certificateId}:
    get:
      tags:
      - v2
      summary: Retrieve individual certificate details
      description: Once the certificate order has been created, this method can be
        used to check the status of the certificate. This method can also be used
        to retrieve details of the certificate. <ul><li>**shopperId** is **not the
        same** as **customerId**. **shopperId** is a number of max length 10 digits
        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: getCertificateDetailByCertIdentifier
      parameters:
      - name: customerId
        in: path
        description: An identifier for a customer
        required: true
        schema:
          type: string
      - name: certificateId
        in: path
        description: Certificate id to lookup
        required: true
        schema:
          type: string
      responses:
        200:
          description: Certificate details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailV2'
        401:
          description: Authentication info not sent or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - UNAUTHORIZED
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - ACCESS_DENIED
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - NOT_FOUND
        422:
          description: Application-specific request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INVALID_INPUT
        429:
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
          x-error-codes:
          - RATE_LIMITED
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INTERNAL_SERVER_ERROR
      security:
        - ApiKeyAuth: []
  /v2/customers/{customerId}/certificates/{certificateId}/domainVerifications:
    get:
      tags:
      - v2
      summary: Retrieve domain verification status
      description: This method can be used to retrieve the domain verification status
        for a certificate request.<ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**
        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**
        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>"
      operationId: getDomainInformationByCertificateId
      parameters:
      - name: customerId
        in: path
        description: An identifier for a customer
        required: true
        schema:
          type: string
      - name: certificateId
        in: path
        description: Certificate id to lookup
        required: true
        schema:
          type: string
      responses:
        200:
          description: Domain verification status list for specified certificateId.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainVerificationSummary'
        401:
          description: Authentication info not sent or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - UNAUTHORIZED
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - ACCESS_DENIED
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - NOT_FOUND
        422:
          description: Application-specific request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INVALID_INPUT
        429:
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
          x-error-codes:
          - RATE_LIMITED
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INTERNAL_SERVER_ERROR
      security:
        - ApiKeyAuth: []
  /v2/customers/{customerId}/certificates/{certificateId}/domainVerifications/{domain}:
    get:
      tags:
      - v2
      summary: Retrieve detailed information for supplied domain
      description: Retrieve detailed information for supplied domain, including domain
        verification details and Certificate Authority Authorization (CAA) verification
        details. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**
        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**
        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: getDomainDetailsByDomain
      parameters:
      - name: customerId
        in: path
        description: An identifier for a customer
        required: true
        schema:
          type: string
      - name: certificateId
        in: path
        description: Certificate id to lookup
        required: true
        schema:
          type: string
      - name: domain
        in: path
        description: A valid domain name in the certificate request
        required: true
        schema:
          type: string
          format: domain
      responses:
        200:
          description: Retrieve detailed information for supplied domain, including
            domain verification details and Certificate Authority Authorization (CAA)
            verification details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainVerificationDetail'
        401:
          description: Authentication info not sent or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - UNAUTHORIZED
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - ACCESS_DENIED
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - NOT_FOUND
        422:
          description: Application-specific request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INVALID_INPUT
        429:
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
          x-error-codes:
          - RATE_LIMITED
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INTERNAL_SERVER_ERROR
      security:
        - ApiKeyAuth: []
  /v2/customers/{customerId}/certificates/acme/externalAccountBinding:
    get:
      tags:
      - v2
      summary: Retrieves the external account binding for the specified customer
      description: Use this endpoint to retrieve a key identifier and Hash-based Message
        Authentication Code (HMAC) key for Automated Certificate Management Environment
        (ACME) External Account Binding (EAB). These credentials can be used with
        an ACME client that supports EAB (ex. CertBot) to automate the issuance request
        and deployment of DV SSL certificates
      operationId: getAcmeExternalAccountBinding
      parameters:
      - name: customerId
        in: path
        description: An identifier for a customer
        required: true
        schema:
          type: string
      responses:
        200:
          description: Acme key identifier and HMAC key for the external account binding.
            Directory URI is also provided for making ACME requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountBinding'
        401:
          description: Authentication info not sent or is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - UNAUTHORIZED
        403:
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - ACCESS_DENIED
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - NOT_FOUND
        422:
          description: Application-specific request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INVALID_INPUT
        429:
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
          x-error-codes:
          - RATE_LIMITED
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          x-error-codes:
          - INTERNAL_SERVER_ERROR
      security:
        - ApiKeyAuth: []
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:       
      type: apiKey
      in: header  
      name: Authorization
      description: Represents API Key 'Authorization'
  schemas:
    Certificate:
      required:
      - certificateId
      - contact
      - createdAt
      - period
      - productType
      - status
      type: object
      properties:
        certificateId:
          type: string
          description: The unique identifier of the certificate request. Only present
            if no errors returned
        commonName:
          type: string
          description: Common name of certificate
        contact:
          $ref: '#/components/schemas/CertificateContact'
        createdAt:
          type: string
          description: The date the certificate was ordered.
          format: iso-datetime
        deniedReason:
          type: string
          description: Only present if certificate order has been denied
        organization:
          $ref: '#/components/schemas/CertificateOrganization'
        period:
          type: integer
          description: Validity period of order. Specified in years
        productType:
          type: string
          description: Certificate product type
          enum:
          - DV_SSL
          - DV_WILDCARD_SSL
          - EV_SSL
          - OV_CS
          - OV_DS
          - OV_SSL
          - OV_WILDCARD_SSL
          - UCC_DV_SSL
          - UCC_EV_SSL
          - UCC_OV_SSL
        progress:
          type: integer
          description: Percentage of completion for certificate vetting
        revokedAt:
          type: string
          description: The revocation date of certificate (if revoked).
          format: iso-datetime
        rootType:
          type: string
          description: Root Type
          enum:
          - GODADDY_SHA_1
          - GODADDY_SHA_2
          - STARFIELD_SHA_1
          - STARFIELD_SHA_2
        serialNumber:
          type: string
          description: Serial number of certificate (if issued or revoked)
        serialNumberHex:
          type: string
          description: Hexadecmial format for Serial number of certificate(if issued
            or revoked)
        slotSize:
          type: string
          description: 'Number of subject alternative names(SAN) to be included in
            certificate '
          enum:
          - FIVE
          - TEN
          - FIFTEEN
          - TWENTY
          - THIRTY
          - FOURTY
          - FIFTY
          - ONE_HUNDRED
        status:
          type: string
          description: Status of certificate
          enum:
          - PENDING_ISSUANCE
          - ISSUED
          - REVOKED
          - CANCELED
          - DENIED
          - PENDING_REVOCATION
          - PENDING_REKEY
          - UNUSED
          - EXPIRED
        subjectAlternativeNames:
          type: array
          description: Contains subject alternative names set
          items:
            $ref: '#/components/schemas/SubjectAlternativeNameDetails'
        validEnd:
          type: string
          description: The end date of the certificate's validity (if issued or revoked).
          format: iso-datetime
        validStart:
          type: string
          description: The start date of the certificate's validity (if issued or
            revoked).
          format: iso-datetime
    ArrayOfCertificateAction:
      type: array
      items:
        $ref: '#/components/schemas/CertificateAction'
    CertificateAction:
      required:
      - createdAt
      - type
      type: object
      properties:
        createdAt:
          type: string
          description: Date action created
          format: iso-datetime
        type:
          type: string
          enum:
          - CERTIFICATE_ISSUED
          - CERTIFICATE_ORDER_CANCELED
          - CERTIFICATE_ORDER_CREATED
          - CERTIFICATE_REVOKED
          - DOMAIN_VALIDATION_COMPLETE
          - FRAUD_DETECTED
          - ORG_NAME_CHANGE
          - ORG_VALIDATION_COMPLETE
          - SAN_DROP
    CertificateAddress:
      required:
      - address1
      - country
      type: object
      properties:
        address1:
          type: string
          description: Address line 1 of organization address
        address2:
          type: string
          description: Address line 2 of organization address
        city:
          type: string
          description: City/Locality of organization address
        country:
          type: string
          description: Two character country code of organization
          format: iso-country-code
          enum:
          - AC
          - AD
          - AE
          - AF
          - AG
          - AI
          - AL
          - AM
          - AN
          - AO
          - AQ
          - AR
          - AS
          - AT
          - AU
          - AW
          - AZ
          - BA
          - BB
          - BD
          - BE
          - BF
          - BG
          - BH
          - BI
          - BJ
          - BM
          - BN
          - BO
          - BR
          - BS
          - BT
          - BV
          - BW
          - BY
          - BZ
          - CA
          - CC
          - CD
          - CF
          - CG
          - CH
          - CI
          - CK
          - CL
          - CM
          - CN
          - CO
          - CR
          - CV
          - CX
          - CY
          - CZ
          - DE
          - DJ
          - DK
          - DM
          - DO
          - DZ
          - EC
          - EE
          - EG
          - EH
          - ER
          - ES
          - ET
          - FI
          - FJ
          - FK
          - FM
          - FO
          - FR
          - GA
          - GB
          - GD
          - GE
          - GF
          - GG
          - GH
          - GI
          - GL
          - GM
          - GN
          - GP
          - GQ
          - GR
          - GS
          - GT
          - GU
          - GW
          - GY
          - HK
          - HM
          - HN
          - HR
          - HT
          - HU
          - ID
          - IE
          - IL
          - IM
          - IN
          - IO
          - IQ
          - IS
          - IT
          - JE
          - JM
          - JO
          - JP
          - KE
          - KG
          - KH
          - KI
          - KM
          - KN
          - KR
          - KW
          - KY
          - KZ
          - LA
          - LB
          - LC
          - LI
          - LK
          - LR
          - LS
          - LT
          - LU
          - LV
          - LY
          - MA
          - MC
          - MD
          - ME
          - MG
          - MH
          - ML
          - MM
          - MN
          - MO
          - MP
          - MQ
          - MR
          - MS
          - MT
          - MU
          - MV
          - MW
          - MX
          - MY
          - MZ
          - NA
          - NC
          - NE
          - NF
          - NG
          - NI
          - NL
          - NO
          - NP
          - NR
          - NU
          - NZ
          - OM
          - PA
          - PE
          - PF
          - PG
          - PH
          - PK
          - PL
          - PM
          - PN
          - PR
          - PS
          - PT
          - PW
          - PY
          - QA
          - RE
          - RO
          - RS
          - RU
          - RW
          - SA
          - SB
          - SC
          - SE
          - SG
          - SH
          - SI
          - SJ
          - SK
          - SL
          - SM
          - SN
          - SO
          - SR
          - ST
          - SV
          - SZ
          - TC
          - TD
          - TF
          - TG
          - TH
          - TJ
          - TK
          - TL
          - TM
          - TN
          - TO
          - TP
          - TR
          - TT
          - TV
          - TW
          - TZ
          - UA
          - UG
          - UM
          - US
          - UY
          - UZ
          - VA
          - VC
          - VE
          - VG
          - VI
          - VN
          - VU
          - WF
          - WS
          - YE
          - YT
          - YU
          - ZA
          - ZM
          - ZW
        postalCode:
          type: string
          description: Postal code of organization address
        state:
          type: string
          description: Full name of State/Province/Territory of organization address
    CertificateBundle:
      required:
      - pems
      - serialNumber
      type: object
      properties:
        pems:
          $ref: '#/components/schemas/PEMCertificates'
        serialNumber:
          type: string
          description: Serial number of certificate requested
    CertificateCallback:
      required:
      - callbackUrl
      type: object
      properties:
        callbackUrl:
          type: string
          description: Callback url registered to receive stateful actions
    CertificateContact:
      required:
      - email
      - nameFirst
      - nameLast
      - phone
      type: object
      properties:
        email:
          type: string
          description: Email address of requestor contact
        jobTitle:
          type: string
          description: Only used for EVSSL. Job title of requestor contact
        nameFirst:
          type: string
          description: First name of requestor contact
        nameLast:
          type: string
          description: Last name of requestor contact
        nameMiddle:
          type: string
          description: Middle initial of requestor contact
        phone:
          type: string
          description: Phone number for requestor contact
        suffix:
          type: string
          description: Suffix of requestor contact
    CertificateCreate:
      required:
      - contact
      - csr
      - period
      - productType
      type: object
      properties:
        callbackUrl:
          type: string
          description: Required if client would like to receive stateful actions via
            callback during certificate lifecyle
        commonName:
          type: string
          description: Name to be secured in certificate. If provided, CN field in
            CSR will be ignored.
        contact:
          $ref: '#/components/schemas/CertificateContact'
        csr:
          type: string
          description: Certificate Signing Request
        intelVPro:
          type: boolean
          description: Only used for OV
          default: false
        organization:
          $ref: '#/components/schemas/CertificateOrganizationCreate'
        period:
          type: integer
          description: Number of years for certificate validity period
        productType:
          type: string
          description: Type of product requesting a certificate. Only required non-renewal
          enum:
          - DV_SSL
          - DV_WILDCARD_SSL
          - EV_SSL
          - OV_CS
          - OV_DS
          - OV_SSL
          - OV_WILDCARD_SSL
          - UCC_DV_SSL
          - UCC_EV_SSL
          - UCC_OV_SSL
        rootType:
          type: string
          description: Root Type. Depending on certificate expiration date, SHA_1
            not be allowed. Will default to SHA_2 if expiration date exceeds sha1
            allowed date
          default: STARFIELD_SHA_2
          enum:
          - GODADDY_SHA_1
          - GODADDY_SHA_2
          - STARFIELD_SHA_1
          - STARFIELD_SHA_2
        slotSize:
          type: string
          description: 'Number of subject alternative names(SAN) to be included in
            certificate '
          enum:
          - FIVE
          - TEN
          - FIFTEEN
          - TWENTY
          - THIRTY
          - FOURTY
          - FIFTY
          - ONE_HUNDRED
        subjectAlternativeNames:
          uniqueItems: true
          type: array
          description: Subject Alternative names. Collection of subjectAlternativeNames
            to be included in certificate.
          items:
            type: string
    CertificateIdentifier:
      required:
      - certificateId
      type: object
      properties:
        certificateId:
          type: string
          description: The unique identifier of the certificate request. Only present
            if verified.
    CertificateOrganization:
      required:
      - address
      - name
      - phone
      type: object
      properties:
        address:
          $ref: '#/components/schemas/CertificateAddress'
        assumedName:
          type: string
          description: Only for EVSSL. The DBA(does business as) name for the organization.
        jurisdictionOfIncorporation:
          $ref: '#/components/schemas/JurisdictionOfIncorporation'
        name:
          type: string
          description: Name of organization that owns common name
        phone:
          type: string
          description: Phone number for organization
        registrationAgent:
          type: string
          description: Only for EVSSL.
        registrationNumber:
          type: string
          description: Only for EVSSL.
    CertificateOrganizationCreate:
      required:
      - name
      - phone
      type: object
      properties:
        address:
          $ref: '#/components/schemas/CertificateAddress'
        assumedName:
          type: string
          description: Only for EVSSL. The DBA(does business as) name for the organization.
        name:
          type: string
          description: Name of organization that owns common name
        phone:
          type: string
          description: Phone number for organization
        registrationAgent:
          type: string
          description: Only for EVSSL.
        registrationNumber:
          type: string
          description: Only for EVSSL.
    CertificateReissue:
      type: object
      properties:
        callbackUrl:
          type: string
          description: Required if client would like to receive stateful action via
            callback during certificate lifecyle
        commonName:
          type: string
          description: The common name of certificate to be secured
          default: Existing common name
        csr:
          type: string
          description: Certificate Signing Request.
          default: Existing CSR
        delayExistingRevoke:
          maximum: 168
          type: integer
          description: In hours, time to delay revoking existing certificate after
            issuance of new certificate. If revokeExistingCertOnIssuance is enabled,
            this value will be ignored
        rootType:
          type: string
          description: Root Type. Depending on certificate expiration date, SHA_1
            not be allowed. Will default to SHA_2 if expiration date exceeds sha1
            allowed date
          default: GODADDY_SHA_1
          enum:
          - GODADDY_SHA_1
          - GODADDY_SHA_2
          - STARFIELD_SHA_1
          - STARFIELD_SHA_2
        subjectAlternativeNames:
          uniqueItems: true
          type: array
          description: Only used for UCC products. An array of subject alternative
            names to include in certificate.
          items:
            type: string
    CertificateRenew:
      type: object
      properties:
        callbackUrl:
          type: string
          description: Required if client would like to receive stateful actions via
            callback during certificate lifecyle
        commonName:
          type: string
          description: The common name of certificate to be secured
          default: Existing common name
        csr:
          type: string
          description: Certificate Signing Request.
          default: Existing CSR
        period:
          type: integer
          description: Number of years for certificate validity period, if different
            from previous certificate
        rootType:
          type: string
          description: Root Type. Depending on certificate expiration date, SHA_1
            not be allowed. Will default to SHA_2 if expiration date exceeds sha1
            allowed date
          default: GODADDY_SHA_1
          enum:
          - GODADDY_SHA_1
          - GODADDY_SHA_2
          - STARFIELD_SHA_1
          - STARFIELD_SHA_2
        subjectAlternativeNames:
          uniqueItems: true
          type: array
          description: Only used for UCC products. An array of subject alternative
            names to include in certificate. Not including a subject alternative name
            that was in the previous certificate will remove it from the renewed certificate.
          items:
            type: string
    CertificateRevoke:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
          description: Reason for revocation
          enum:
          - AFFILIATION_CHANGED
          - CESSATION_OF_OPERATION
          - KEY_COMPROMISE
          - PRIVILEGE_WITHDRAWN
          - SUPERSEDED
    CertificateSiteSeal:
      required:
      - html
      type: object
      properties:
        html:
          type: string
          description: Certificate Seal HTML
    CertificateEmailHistory:
      required:
      - accountId
      - body
      - dateEntered
      - fromType
      - id
      - recipients
      - subject
      - templateType
      type: object
      properties:
        id:
          type: integer
          description: Email Id
        accountId:
          type: integer
          description: Shopper Id requested certificate
        templateType:
          type: string
          description: Email template type name
        fromType:
          type: string
          description: Email from address
        recipients:
          type: string
          description: Email address email was sent
        body:
          type: string
          description: Email message
        dateEntered:
          type: string
          description: Date email sent
          format: iso-datetime
        subject:
          type: string
          description: Email subject
    Error:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: Short identifier for the error, suitable for indicating the
            specific error within client code
          format: constant
        fields:
          type: array
          description: List of the specific fields, and the errors found with their
            contents
          items:
            $ref: '#/components/schemas/ErrorField'
        message:
          type: string
          description: Description of the error
    ErrorField:
      required:
      - code
      - path
      type: object
      properties:
        code:
          type: string
          description: Short identifier for the error, suitable for indicating the
            specific error within client code
          format: constant
        message:
          type: string
          description: Description of the problem with the contents of the field
        path:
          type: string
          description: JSONPath referring to the field within the submitted data containing
            an error
          format: json-path
    ErrorLimit:
      allOf:
      - required:
        - retryAfterSec
        type: object
        properties:
          retryAfterSec:
            type: integer
            description: Number of seconds to wait before attempting a similar request
            format: integer-positive
      - $ref: '#/components/schemas/Error'
      x-error-model: true
    JurisdictionOfIncorporation:
      required:
      - country
      type: object
      properties:
        city:
          type: string
        country:
          type: string
          format: iso-country-code
        county:
          type: string
        state:
          type: string
    PEMCertificates:
      required:
      - certificate
      type: object
      properties:
        certificate:
          type: string
          description: End entity certificate in PEM format
        cross:
          type: string
          description: CA Cross Intermediate certificate in PEM format
        intermediate:
          type: string
          description: CA Signing Intermediate certificate in PEM format
        root:
          type: string
          description: CA Root certificate in PEM format
    SubjectAlternativeNameDetails:
      required:
      - status
      - subjectAlternativeName
      type: object
      properties:
        status:
          type: string
          description: Total number of page results
          enum:
          - PENDING
          - INVALID
          - COMPLETED
          - FRAUD
        subjectAlternativeName:
          type: string
          description: Subject alternative name to be included in certificate
    Pagination:
      type: object
      properties:
        first:
          type: string
          description: URI to access the first page
        previous:
          type: string
          description: URI to access the previous page
        next:
          type: string
          description: URI to access the next page
        last:
          type: string
          description: URI to access the last page
        total:
          type: integer
          description: Number of records available
    CertificateDetailV2:
      required:
      - certificateId
      - commonName
      - contact
      - createdAt
      - period
      - status
      - type
      type: object
      properties:
        certificateId:
          type: string
          description: The unique identifier of the certificate request. Only present
            if no errors returned
        commonName:
          type: string
          description: Common name of certificate
          format: domain
        period:
          type: integer
          description: Validity period of order. Specified in years
        type:
          type: string
          description: "Certificate type: \n  * `DV_SSL` - (Domain Validated Secure\
            \ Sockets Layer) SSL certificate validated using domain name only\n  *\
            \ `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated\
            \ using domain name only\n  * `EV_SSL` - (Extended Validation) SSL certificate\
            \ validated using organization information, domain name, business legal\
            \ status, and other factors\n  * `OV_CODE_SIGNING` - Code signing SSL\
            \ certificate used by software developers to digitally sign apps. Validated\
            \ using organization information\n  * `OV_DRIVER_SIGNING` - Driver signing\
            \ SSL certificate request used by software developers to digitally sign\
            \ secure code for Windows hardware drivers. Validated using organization\
            \ information\n  * `OV_SSL` - SSL certificate validated using organization\
            \ information and domain name\n  * `OV_WILDCARD_SSL` - SSL certificate\
            \ containing subdomains which is validated using organization information\
            \ and domain name\n  * `UCC_DV_SSL` - (Unified Communication Certificate)\
            \ Multi domain SSL certificate validated using domain name only\n  * `UCC_EV_SSL`\
            \ - Multi domain SSL certificate validated using organization information,\
            \ domain name, business legal status, and other factors\n  * `UCC_OV_SSL`\
            \ - Multi domain SSL certificate validated using organization information\
            \ and domain name\n"
          enum:
          - DV_SSL
          - DV_WILDCARD_SSL
          - EV_SSL
          - OV_CODE_SIGNING
          - OV_DRIVER_SIGNING
          - OV_SSL
          - OV_WILDCARD_SSL
          - UCC_DV_SSL
          - UCC_EV_SSL
          - UCC_OV_SSL
        status:
          type: string
          description: "Certificate status (if issued or revoked): \n  * `CANCELED`\
            \ - Certificate request was canceled by customer\n  * `DENIED` - Certificate\
            \ request was denied by customer\\n  * `EXPIRED` - Issued certificate\
            \ has exceeded the valid end date\n  * `ISSUED` - Certificate has been\
            \ issued and is within validity period\n  * `PENDING_ISSUANCE` - Certificate\
            \ request has completed domain verification and is in the process of being\
            \ issued\n  * `PENDING_REKEY` - Previously issued certificate was rekeyed\
            \ by customer and is in the process of being reissued\n  * `PENDING_REVOCATION`\
            \ - Previously issued certificate is in the process of being revoked\n\
            \  * `REVOKED` - Issued certificate has been revoked\\n  * `UNUSED` -\
            \ Certificate in an error state\n"
          enum:
          - PENDING_ISSUANCE
          - ISSUED
          - REVOKED
          - CANCELED
          - DENIED
          - PENDING_REVOCATION
          - PENDING_REKEY
          - UNUSED
          - EXPIRED
        createdAt:
          type: string
          description: The date the certificate was ordered.
          format: iso-datetime
        completedAt:
          type: string
          description: The date the certificate request completed processing.
          format: iso-datetime
        validEndAt:
          type: string
          description: The end date of the certificate's validity (if issued or revoked).
          format: iso-datetime
        validStartAt:
          type: string
          description: The start date of the certificate's validity (if issued or
            revoked).
          format: iso-datetime
        revokedAt:
          type: string
          description: The revocation date of certificate (if revoked).
          format: iso-datetime
        renewalAvailable:
          type: boolean
          description: Only returned when a renewal is available.
        serialNumber:
          type: string
          description: Serial number of certificate (if issued or revoked)
        serialNumberHex:
          type: string
          description: Hexadecmial format for Serial number of certificate(if issued
            or revoked)
        slotSize:
          type: string
          description: "Number of subject alternative names (SAN) to be included in\
            \ certificate (if UCC): \n  * `FIVE` - Five slot UCC request\n  * `TEN`\
            \ - Ten slot UCC request\n  * `FIFTEEN` - Fifteen slot UCC request\n \
            \ * `TWENTY` - Twenty slot UCC request\n  * `THIRTY` - Thirty slot UCC\
            \ request\n  * `FOURTY` - Fourty slot UCC request\n  * `FIFTY` - Fifty\
            \ slot UCC request\n  * `ONE_HUNDRED` - One hundred slot UCC request\n"
          enum:
          - FIVE
          - TEN
          - FIFTEEN
          - TWENTY
          - THIRTY
          - FOURTY
          - FIFTY
          - ONE_HUNDRED
        subjectAlternativeNames:
          uniqueItems: true
          type: array
          description: Subject Alternative names. Collection of subjectAlternativeNames
            to be included in certificate.
          items:
            type: string
            format: domain
        contact:
          $ref: '#/components/schemas/CertificateContact'
        organization:
          $ref: '#/components/schemas/CertificateOrganization'
        csr:
          type: string
          description: Certificate signing request (if present) in PEM format
        rootType:
          type: string
          description: "Root type: \n  * `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm\
            \ 1) SHA-1 root type\n  * `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm\
            \ 2) SHA-2 root type\n  * `STARFIELD_SHA_1` - Starfield SHA-1 root type\n\
            \  * `STARFIELD_SHA_2` - Starfield SHA-2 root type\n"
          enum:
          - GODADDY_SHA_1
          - GODADDY_SHA_2
          - STARFIELD_SHA_1
          - STARFIELD_SHA_2
        deniedReason:
          type: string
          description: Only present if certificate order has been denied
        progress:
          type: integer
          description: Percentage of completion for certificate vetting
    CertificateSummariesV2:
      required:
      - certificates
      - pagination
      type: object
      properties:
        certificates:
          type: array
          description: List of certificates for a specified customer.
          items:
            $ref: '#/components/schemas/CertificateSummaryV2'
        pagination:
          $ref: '#/components/schemas/Pagination'
    CertificateSummaryV2:
      required:
      - certificateId
      - commonName
      - createdAt
      - period
      - status
      - type
      type: object
      properties:
        certificateId:
          type: string
          description: The unique identifier of the certificate request.
        commonName:
          type: string
          description: Common name for the certificate request.
          format: domain
        period:
          type: integer
          description: Validity period of order. Specified in years.
        type:
          type: string
          description: "Certificate type: \n  * `DV_SSL` - (Domain Validated Secure\
            \ Sockets Layer) SSL certificate validated using domain name only\n  *\
            \ `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated\
            \ using domain name only\n  * `EV_SSL` - (Extended Validation) SSL certificate\
            \ validated using organization information, domain name, business legal\
            \ status, and other factors\n  * `OV_CODE_SIGNING` - Code signing SSL\
            \ certificate used by software developers to digitally sign apps. Validated\
            \ using organization information\n  * `OV_DRIVER_SIGNING` - Driver signing\
            \ SSL certificate request used by software developers to digitally sign\
            \ secure code for Windows hardware drivers. Validated using organization\
            \ information\n  * `OV_SSL` - SSL certificate validated using organization\
            \ information and domain name\n  * `OV_WILDCARD_SSL` - SSL certificate\
            \ containing subdomains which is validated using organization information\
            \ and domain name\n  * `UCC_DV_SSL` - (Unified Communication Certificate)\
            \ Multi domain SSL certificate validated using domain name only\n  * `UCC_EV_SSL`\
            \ - Multi domain SSL certificate validated using organization information,\
            \ domain name, business legal status, and other factors\n  * `UCC_OV_SSL`\
            \ - Multi domain SSL certificate validated using organization information\
            \ and domain name\n"
          enum:
          - DV_SSL
          - DV_WILDCARD_SSL
          - EV_SSL
          - OV_CODE_SIGNING
          - OV_DRIVER_SIGNING
          - OV_SSL
          - OV_WILDCARD_SSL
          - UCC_DV_SSL
          - UCC_EV_SSL
          - UCC_OV_SSL
        status:
          type: string
          description: "Certificate status (if issued or revoked): \n  * `CANCELED`\
            \ - Certificate request was canceled by customer\n  * `DENIED` - Certificate\
            \ request was denied by customer\n  * `EXPIRED` - Issued certificate has\
            \ exceeded the valid end date\n  * `ISSUED` - Certificate has been issued\
            \ and is within validity period\n  * `PENDING_ISSUANCE` - Certificate\
            \ request has completed domain verification and is in the process of being\
            \ issued\n  * `PENDING_REKEY` - Previously issued certificate was rekeyed\
            \ by customer and is in the process of being reissued\n  * `PENDING_REVOCATION`\
            \ - Previously issued certificate is in the process of being revoked\n\
            \  * `REVOKED` - Issued certificate has been revoked\n  * `UNUSED` - Certificate\
            \ in an error state\n"
          enum:
          - ISSUED
          - CANCELED
          - DENIED
          - EXPIRED
          - PENDING_ISSUANCE
          - PENDING_REKEY
          - PENDING_REVOCATION
          - REVOKED
          - UNUSED
        createdAt:
          type: string
          description: Date that the certificate request was received.
          format: iso-datetime
        completedAt:
          type: string
          description: The date the certificate request completed processing (if issued
            or revoked).
          format: iso-datetime
        validEndAt:
          type: string
          description: The end date of the certificate's validity (if issued or revoked).
          format: iso-datetime
        validStartAt:
          type: string
          description: The start date of the certificate's validity (if issued or
            revoked).
          format: iso-datetime
        revokedAt:
          type: string
          description: The revocation date of certificate (if revoked).
          format: iso-datetime
        renewalAvailable:
          type: boolean
          description: Only returned when a renewal is available.
        serialNumber:
          type: string
          description: Serial number of certificate (if issued or revoked).
        slotSize:
          type: string
          description: "Number of subject alternative names (SAN) to be included in\
            \ certificate (if UCC): \n  * `FIVE` - Five slot UCC request\n  * `TEN`\
            \ - Ten slot UCC request\n  * `FIFTEEN` - Fifteen slot UCC request\n \
            \ * `TWENTY` - Twenty slot UCC request\n  * `THIRTY` - Thirty slot UCC\
            \ request\n  * `FOURTY` - Fourty slot UCC request\n  * `FIFTY` - Fifty\
            \ slot UCC request\n  * `ONE_HUNDRED` - One hundred slot UCC request\n"
          enum:
          - FIVE
          - TEN
          - FIFTEEN
          - TWENTY
          - THIRTY
          - FOURTY
          - FIFTY
          - ONE_HUNDRED
        subjectAlternativeNames:
          uniqueItems: true
          type: array
          description: Subject Alternative names (if UCC). Collection of subjectAlternativeNames
            to be included in certificate.
          items:
            type: string
    DomainVerificationSummary:
      required:
      - createdAt
      - domain
      - domainEntityId
      - modifiedAt
      - status
      - type
      - usage
      type: object
      properties:
        domain:
          type: string
          description: Domain name
          format: domain
        domainEntityId:
          type: integer
          description: A unique identifier that can be leveraged for retrieving domain
            verification related information. Primarily used when troubleshooting
            a request
        dceToken:
          type: string
          description: DCE verification type token (if DCE verification type).
        status:
          type: string
          description: "Domain verification status: \n  * `AWAITING` - Verification\
            \ pending customer input\n  * `INVALID` - SAN connected to a cancelled\
            \ request\n  * `COMPLETED` - Verification completed\n  * `FAILED_VERIFICATION`\
            \ - Verification failed\n  * `PENDING_POSSIBLE_FRAUD` - Flagged for a\
            \ system level fraud review\n  * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection\
            \ reviewed but verified\n  * `DROPPED` - SAN dropped from request\n  *\
            \ `REVOKED_CERT` - Certificate revoked\n  * `DROPPED_GOOGLE_SAFE_BROWSING`\
            \ - SAN dropped from request due to Google Safe Browsing check\n  * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION`\
            \ - SAN dropped from request due to Certificate Authorization Authority\
            \ DNS record check\n"
          enum:
          - COMPLETED
          - FAILED_VERIFICATION
          - VERIFIED_POSSIBLE_FRAUD
          - DROPPED
          - DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION
          - DROPPED_GOOGLE_SAFE_BROWSING
          - INVALID
          - AWAITING
          - PENDING_POSSIBLE_FRAUD
          - REVOKED_CERTIFICATE
        createdAt:
          type: string
          description: Timestamp indicating when the domain verification process was
            started
          format: iso-datetime
        modifiedAt:
          type: string
          description: Timestamp indicating when the domain verification process was
            last updated
          format: iso-datetime
        type:
          type: string
          description: "Domain verification type: \n  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN`\
            \ - Domain verified using domain control verification email sent to admin@<your.domain.com>\n\
            \  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified\
            \ using domain control verification email sent to administrator@<your.domain.com>\n\
            \  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified\
            \ using domain control verification email sent to hostmaster@<your.domain.com>\n\
            \  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified\
            \ using domain control verification email sent to postmaster@<your.domain.com>\n\
            \  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified\
            \ using domain control verification email sent to webmaster@<your.domain.com>\n\
            \  * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email\n\
            \  * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter\
            \ which was used for domain verification\n  * `DOMAIN_CONTROL_EMAIL` -\
            \ Domain verified using HTML file or DNS zone file text value\n  * `DOMAIN_ZONE_CONTROL`\
            \ - DNS zone file containing a pre-generated text value used for domain\
            \ verification\n  * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email\
            \ address manually entered by a rep\n  * `PREVIOUS_DOMAIN_ACCESS_EMAIL`\
            \ - Customers domain access email for a prior certificate request was\
            \ used for domain verification\n  * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER`\
            \ - Representative reviewed a customer provided domain access letter and\
            \ verified domain\n  * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` -\
            \ Representative verified domain using a manual domain zone control check\n\
            \  * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain\
            \ using alternative methods\n  * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL`\
            \ - Representative verified domain using a manual website control check\n\
            \  * `CUSTOMER_OWNED` - Validated customer account information used for\
            \ domain control verification\n  * `WEBSITE_CONTROL` - HTML file in root\
            \ website directory containing pre-generated value used for domain control\
            \ verification\n"
          enum:
          - DOMAIN_CONTROL_EMAIL
          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN
          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR
          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER
          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER
          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER
          - DOMAIN_ACCESS_EMAIL
          - DOMAIN_ACCESS_LETTER
          - DOMAIN_ZONE_CONTROL
          - MANUAL_DOMAIN_ACCESS_EMAIL
          - PREVIOUS_DOMAIN_ACCESS_EMAIL
          - REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER
          - REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL
          - REGISTRATION_AUTHORITY_OVERRIDE
          - REGISTRATION_AUTHORITY_WEBSITE_CONTROL
          - CUSTOMER_OWNED
          - WEBSITE_CONTROL
        usage:
          type: string
          description: Type of domain name used for domain verification
          enum:
          - COMMON_NAME
          - SUBJECT_ALTERNATIVE_NAME
    ExternalAccountBinding:
      required:
      - directoryUrl
      - hmacKey
      - keyId
      type: object
      properties:
        directoryUrl:
          type: string
          description: ACME directory resource URL.
          format: url
        keyId:
          type: string
          description: EAB key identifier for the ACME account.
        hmacKey:
          type: string
          description: EAB HMAC key for the ACME account
    DomainVerificationDetail:
      allOf:
      - $ref: '#/components/schemas/DomainVerificationSummary'
      - type: object
        properties:
          certificateAuthorityAuthorization:
            type: object
            properties:
              status:
                type: string
                description: |
                  Returns the status of the CAA Lookup for the specified domain:
                  * `PENDING` - The CAA lookup has not yet been attempted for the specified domain.
                  * `REMOVED_DNS_ERROR` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNS errors then prevented the system from determining if DNSSEC was enabled for the specified domain, and it had to be removed from the certificate request.
                  * `REMOVED_DNSSEC_ENABLED` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNSSEC was determined to be enabled for the specified domain, and it had to be removed from the certificate request.
                  * `REMOVED_NOT_FOUND_CA` - CAA records were found during the CAA lookup for the speicified domain, but `godaddy.com` or `starfieldtech.com` was not listed as a value, thereby not allowing us to issue a certificate with this domain. The specified domain was removed from the certificate request.
                  * `REMOVED_UNKNOWN_CRITICAL_TAG` - A CAA record was found during the CAA lookup with its Critical bit set, as outlined by RFC 6844, yet the Tag of the CAA record was not understood (as outlined by RFC 6844). The specified domain was removed from the certificate request.
                  * `SUCCESS_CAA` - The CAA lookup was successful for the specified domain, and the domain can remain in the certificate request.
                  * `SUCCESS_DNSSEC` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. The system detemined that DNSSEC was not enabled for the specified domain, so the domain is allowed to remain in the certificate request.
                enum:
                - PENDING
                - REMOVED_DNS_ERROR
                - REMOVED_DNSSEC_ENABLED
                - REMOVED_NOT_FOUND_CA
                - REMOVED_UNKNOWN_CRITICAL_TAG
                - SUCCESS_CAA
                - SUCCESS_DNSSEC
              queryPaths:
                type: array
                description: Details all the individual DNS paths that were scanned
                  for CAA records for this domain, as detailed by RFC 6844. This element
                  not only contains the parts determined from parsing the domain,
                  but also any CNAME or DNAME targets specified by any of those individual
                  parts.
                items:
                  type: string
              recommendations:
                type: array
                description: Returns a list of fix recommendations if the query was
                  unsuccessful, or if the domain was dropped from the certificate
                  request, so that a subsequent certificate request with the specified
                  domain will successfully pass its CAA scan.
                items:
                  type: string
                  description: |
                    * `ADD_CA_TO_CAA` - The system found a CAA record in the domain hierarchy, but it did not find our CA in the record's values. Add `godaddy.com` or `starfieldtech.com` to the CAA record's values.
                    * `CREATE_TARGET_DOMAIN_CAA` - Create a CAA record on the specified domain with `godaddy.com` or `starfieldtech.com` as the value. If the system finds a CAA record in the specified domain, it will stop scanning the domain hierarchy, thereby preventing potentially problematic parent domain paths from being scanned.
                    * `DISABLE_DNSSEC` - Disable DNSSEC on the domain if CAA lookups fail and a DNSSEC scan is being used as the method for determining if the specified domain can remain in the certificate request.
                    * `FIX_CRITICAL_TAG` - When setting the critical flag in a CAA record, you must ensure you're using a well-known tag, per RFC 6844.
                    * `VALIDATE_SOA` - Make sure all queryPaths for the specified domain have an SOA record pointing to a valid publicly-accessible nameserver and respond in a timely fashion.
                  enum:
                  - ADD_CA_TO_CAA
                  - CREATE_TARGET_DOMAIN_CAA
                  - DISABLE_DNSSEC
                  - FIX_CRITICAL_TAG
                  - VALIDATE_SOA
              completedAt:
                type: string
                description: The date the certificate request completed processing.
                format: iso-datetime
            description: |
              Contains information about the last Certificate Authority Authorization (CAA) Lookup details for the specified domain.

              In order for a domain to be eligible to be included in the certificate, the entire domain hierarchy must be scanned for DNS CAA records, as outlined by RFC 6844.

              The absence of any CAA records found in the domain hierarchy indicates that the domain may be included in the certificate. Alternatively, if CAA records are found when scanning the domain hierarchy, the domain may be included in the certificate as long as `godaddy.com` or `starfieldtech.com` is found in the DNS record value. However, if CAA records are found, yet `godaddy.com` or `starfieldtech.com` is not found in any CAA record's value, then we must drop the domain from the certificate request.

              In the case where there are repeated DNS errors when scanning the domain hierarchy for CAA records, thus ending in an unsuccessful scan, then the domain can still be included in the certificate provided the primary domain is not setup with DNSSEC. Conversely, if DNSSEC is found to be setup on the primary domain when scanning following repeated CAA failures, the domain must be dropped from the certificate request. Finally, if DNS errors persist to the point where a successful DNSSEC query could not be obtained, then the domain must be dropped from the certificate request.
  responses:
    401:
      description: Authentication info not sent or is invalid
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      x-error-codes:
      - UNAUTHORIZED
    403:
      description: Authenticated user is not allowed access
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      x-error-codes:
      - ACCESS_DENIED
    404:
      description: Resource not found
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      x-error-codes:
      - NOT_FOUND
    422:
      description: Application-specific request error
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      x-error-codes:
      - INVALID_INPUT
    429:
      description: Too many requests received within interval
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorLimit'
      x-error-codes:
      - RATE_LIMITED
    500:
      description: Internal server error
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      x-error-codes:
      - INTERNAL_SERVER_ERROR
  parameters:
    customerId:
      name: customerId
      in: path
      description: An identifier for a customer
      required: true
      schema:
        type: string
    certificateId:
      name: certificateId
      in: path
      description: Certificate id to lookup
      required: true
      schema:
        type: string
    domain:
      name: domain
      in: path
      description: A valid domain name in the certificate request
      required: true
      schema:
        type: string
        format: domain
    offset:
      name: offset
      in: query
      description: Number of results to skip for pagination
      schema:
        pattern: ^[0-9]+$
        type: integer
        format: integer-positive
    limit:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        pattern: ^[0-9]+$
        type: integer
        format: integer-positive
