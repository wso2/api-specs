openapi: 3.0.1
info:
  title: Reckon One API v2
  description: |
    This is a generated connector for [Reckon One API v2](https://developer.reckon.com/api-details#api=reckon-one-api-v2) OpenAPI specification.
    Reckon One is a new generation, modular cloud accounting solution that scales with your business â€“ perfect for startups. This is version 2 of the Reckon One API.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials. 
  
    Create an [Reckon account](https://developer.reckon.com) and obtain tokens by following [this guide](https://developer.reckon.com/get-started).
  x-ballerina-display:
    label: Reckon One
    iconPath: "icon.png"
  version: V2
servers:
- url: https://api-v2.reckonone.com/
tags:
- name: Books
  description: Books
- name: Credit notes
  description: Credit notes
- name: Customers
  description: Customers
- name: Departments
  description: Departments
- name: Payment Methods
  description: Payment methods
- name: Payments
  description: Payments
- name: User permissions
  description: User permissions
- name: Receipts
  description: Receipts
- name: Roles
  description: Roles
- name: Superfund providers
  description: Superfund providers
- name: Reports
  description: Reports
- name: Suppliers
  description: Suppliers
- name: Superfunds
  description: Superfunds
- name: Phone types
  description: Phone types
- name: Address types
  description: Address types
- name: Contacts
  description: Contacts
- name: Electronic address types
  description: Electronic address types
- name: Chart of Accounts
  description: Chart of accounts
- name: Banking
  description: Banking
- name: Employees
  description: Employees
- name: Expense Claims
  description: Expense claims
- name: Heartbeat
  description: Reckon One API V2 status
- name: Classifications
  description: Classifications
- name: Payment Terms
  description: Payment terms
- name: Invoices
  description: Invoices
- name: Projects
  description: Projects
- name: Settings
  description: Settings
- name: Templates
  description: Templates
- name: Tax
  description: Tax
- name: Items
  description: Items
- name: Time entries
  description: Time entries
- name: Users
  description: Users
paths:
  /books:
    get:
      tags:
      - Books
      summary: Gets a list of books that the current user has access to.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of books.

        `GET /books`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /books?select=id,name`

        ---

        Filter the results to return just the books that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /books?filter=name in ('Book A','Book B')`

        ---

        Get in the required order, e.g. by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /books?orderby=name`
      operationId: GetBooks
      responses:
        200:
          description: A list of books.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        404:
          description: No books were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /books/{bookId}:
    get:
      tags:
      - Books
      summary: Gets details of the specified book.
      description: |-
        Get details of a book.

        `GET /books/485b8019-27ef-47b4-92c4-a360994f0f98`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /books/485b8019-27ef-47b4-92c4-a360994f0f98?select=id,name`
      operationId: GetBook
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: Details of the book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        404:
          description: Book was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/creditnotes:
    get:
      tags:
      - Credit notes
      summary: Gets a list of credit notes.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of credit notes for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes`

        ---

        Get a specific page of credit notes. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes?select=id,totalAmount`

        ---

        Filter the results to return just the credit notes you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes?filter=creditnotedate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by customer name and then by date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes?orderby=customer.name,creditnotedate desc`
      operationId: GetCreditNotes
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of credit notes per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of credit notes for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/creditNotes/{creditNoteId}:
    get:
      tags:
      - Credit notes
      summary: Gets a credit note.
      description: "Get a particular credit note.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`\n\
        \n---\n\nGet just the required fields, e.g. id and total amount. Find out\
        \ more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,totalAmount`\n\
        \n---\n\nGet a credit note as a PDF using a query string parameter.\n    \n\
        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?format=pdf`\n\
        \n---\n\nGet a credit note as a PDF using a header instead of the query string\
        \ parameter : `Accept: application/pdf`.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`"
      operationId: GetCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      responses:
        200:
          description: The requested credit note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the credit note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Credit notes
      summary: Updates an existing credit note.
      description: |-
        Update an existing credit note.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated credit note.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The credit note could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNote
    delete:
      tags:
      - Credit notes
      summary: Deletes an existing credit note.
      description: |-
        Delete an existing credit note.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The credit note could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Credit notes
      summary: Updates selected fields of an existing credit note.
      description: |-
        Patch an existing credit note.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNotePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The credit note could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNote
  /{bookId}/creditNotes:
    post:
      tags:
      - Credit notes
      summary: Creates a new credit note.
      description: |-
        Create a new credit note.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes`
      operationId: CreateCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new credit note.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteInput'
        required: true
      responses:
        201:
          description: The id of the credit note that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The credit note could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNote
  /{bookId}/creditNotes/{creditNoteId}/lineItems/{lineItemId}:
    get:
      tags:
      - Credit notes
      summary: Gets a line item from a credit note.
      description: |-
        Get a line item from a credit note.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineItems/d7775b8e-a0e5-404a-b335-542f138bf0a9`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineItems/d7775b8e-a0e5-404a-b335-542f138bf0a9?select=lineId,description`
      operationId: GetCreditNoteLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested credit note line item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteLineItem'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the credit note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Credit notes
      summary: Updates an existing credit note's line item.
      description: |-
        Update an existing credit note's line item.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00/lineitems/k6abf51e-2052-43c7-be02-4146cbfe9d1b`
      operationId: UpdateCreditNoteLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The credit note line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated credit note's line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteLineItemInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The credit note's line item could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, credit note or credit note's line item
            does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNote
    delete:
      tags:
      - Credit notes
      summary: Deletes an existing credit note line item.
      description: |-
        Delete an existing credit note line item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/creditNotes/b581a643-10dd-4d09-9a63-356654339795/lineItems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The credit note line item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete credit note line
            items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, credit note or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Credit notes
      summary: Updates selected fields of an existing credit note's line item.
      description: |-
        Patch an existing credit note's line item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00/lineitems/k6abf51e-2052-43c7-be02-4146cbfe9d1b`
      operationId: PatchCreditNoteLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The credit note line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteLineItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The credit note's line item could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNoteLineItem
  /{bookId}/creditNotes/{creditNoteId}/lineItems:
    post:
      tags:
      - Credit notes
      summary: Creates a new line item within an existing credit note.
      description: "Create a new line item within the specified book and credit note.\n\
        \    \n`POST /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/b581a643-10dd-4d09-9a63-356654339795/lineitems`"
      operationId: AddLineItemToCreditNote
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteLineItemInput'
        required: true
      responses:
        201:
          description: The id of the line item that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The line item could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add line items to credit
            notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/creditNotes/{creditNoteId}/transactionLinks:
    post:
      tags:
      - Credit notes
      summary: Creates a new transaction link.
      description: |-
        Create a new transaction link.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks`
      operationId: CreateCreditNoteTransactionLink
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the transaction to link.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteTransactionLinkInput'
        required: true
      responses:
        201:
          description: The linked transaction's id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringIdResponse'
        400:
          description: The transaction link could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create linked transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or credit note does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: transactionLink
  /{bookId}/creditNotes/{creditNoteId}/transactionlinks/{linkId}:
    delete:
      tags:
      - Credit notes
      summary: Unlinks an existing transaction from a credit note.
      description: |-
        Unlink an existing invoice from a credit note.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/INV-8c642b15-c66f-4876-9a4d-bc5ea7c0ceb6`
      operationId: UnlinkTransaction
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: linkId
        in: path
        description: The link's id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the request to unlink the transaction.
          content: {}
        400:
          description: The transaction could not be unlinked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, credit note or transaction link does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Credit notes
      summary: Updates selected fields of an existing credit note's linked transaction.
      description: |-
        Patch an existing credit note's linked transaction.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/creditnotes/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/INV-5B6915BB-0352-4D6E-98C4-72E7A9A92562`
      operationId: PatchCreditNoteTransactionLink
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: creditNoteId
        in: path
        description: The credit note's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: linkId
        in: path
        description: The linked transaction's id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the linked transaction to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteTransactionLinkPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The credit note's transaction link could not be updated as
            the request contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit credit notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, credit note or transaction link does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: creditNoteTransactionLinkPatch
  /{bookId}/customers:
    get:
      tags:
      - Customers
      summary: Gets a list of customers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of customers.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers`

        ---

        Get a specific page of customers. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers?select=id,name`

        ---

        Filter the results to return just the customers you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers?orderby=name, status desc`
      operationId: GetCustomers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of customers per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of customers for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Customers
      summary: Creates a new customer.
      description: |-
        Creates a new customer.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers`
      operationId: CreateCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new customer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
        required: true
      responses:
        201:
          description: The id of the customer that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdNameResponse'
        400:
          description: The customer could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: customerItem
  /{bookId}/customers/{customerId}:
    get:
      tags:
      - Customers
      summary: Gets a customer.
      description: |-
        Get a customer.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Customers
      summary: Updates an existing customer.
      description: |-
        Update an existing customer.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: UpdateCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated customer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: customerItem
    delete:
      tags:
      - Customers
      summary: Deletes an existing customer.
      description: |-
        Delete an existing customer.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/customers/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The customer could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Customers
      summary: Updates selected fields of an existing customer.
      description: |-
        Patch an existing customer.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: PatchCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the customer to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer could not be patched as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: customerPatch
  /{bookId}/customers/{customerId}/contacts/{contactId}/link:
    post:
      tags:
      - Customers
      summary: Links an existing contact to a customer.
      description: |-
        Link an existing contact to a customer.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkExistingContactToCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id to be linked to the customer.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking an existing contact to a customer.
          content: {}
        400:
          description: The existing contact cannot be linked to the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link an existing contact
            to the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer, or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/customers/{customerId}/contacts/{contactId}/unlink:
    post:
      tags:
      - Customers
      summary: Unlinks a customer's linked contact.
      description: |-
        Unlink a customer's linked contact.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/unlink`
      operationId: UnlinkCustomerLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The customer's linked contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the unlink procedure.
          content: {}
        400:
          description: The contact cannot be unlinked from the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink the customer's
            linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer, or linked contact of customer
            does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/customers/{customerId}/contacts:
    post:
      tags:
      - Customers
      summary: Creates a new contact and links it to the customer.
      description: |-
        Create a new contact and link it to the customer.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/customers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts`
      operationId: AddNewContactToCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedContactInput'
        required: true
      responses:
        201:
          description: The id of the contact that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The contact could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
  /{bookId}/customers/{customerId}/contacts/{contactId}:
    get:
      tags:
      - Customers
      summary: Gets a customer's linked Contact details.
      description: |-
        Get a customer's linked Contact details.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts/c793af72-8267-45fa-be90-bc183808b22a`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts/c793af72-8267-45fa-be90-bc183808b22a?select=id,name`
      operationId: GetCustomerLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested customer's linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or linked contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    delete:
      tags:
      - Customers
      summary: "           Deletes a contact from a customer\n           "
      description: "           Delete a contact from a selected customer\n       \
        \    \n           `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/customers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/c793af72-8267-45fa-be90-bc183808b22a`\n\
        \           "
      operationId: DeleteContactFromCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id being deleted
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the delete procedure.
          content: {}
        400:
          description: The contact cannot be deleted from the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the customer's
            contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer, or contact of customer does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/customers/{customerId}/phoneNumbers:
    get:
      tags:
      - Customers
      summary: Gets a customer's phone numbers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a customer's phone numbers.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?select=id,number`

        ---

        Filter the results to return just the address types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?filter=areacode in ('02','03')`

        ---

        Get in the required order, e.g. by area code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?orderby=areacode`
      operationId: GetCustomerPhoneNumbers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested customer's phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumbers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Customers
      summary: Adds a new phone number to an existing customer.
      description: |-
        Add a new phone number to an existing customer.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/6A4CF5D1-2FC8-4022-956A-E7F265858FD7/phoneNumbers`
      operationId: CreateCustomerPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The details of the phone number to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberInput'
        required: true
      responses:
        201:
          description: The id and name of the phone number type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The phone number could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/customers/{customerId}/phoneNumbers/{type}:
    get:
      tags:
      - Customers
      summary: Get a customer's phone number.
      description: |-
        Get a customer's phone number by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/fb71355e-13eb-4e4f-9366-9d9422ddd361`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work?select=id,number`
      operationId: GetCustomerPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The customer's specific phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Customers
      summary: Updates a customer's phone number.
      description: |-
        Update a customer's phone number by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phoneNumbers/mobile`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phoneNumbers/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateCustomerPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The phone number.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneNumberInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer's phone number could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer's
            phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Customers
      summary: Deletes an existing customer phone number.
      description: |-
        Delete an existing customer phone number.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/2a1dba1f-6dd9-4731-a5ae-33682abaa81e`
      operationId: DeleteCustomerPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The customer's phone number could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the customer's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Customers
      summary: Updates selected fields of an existing customer phone number.
      description: |-
        Patch an existing customer phone number by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/Mobile`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/444393d3-2199-4eff-b3b2-c04e673fc903`
      operationId: PatchCustomerPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the phone number to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer's phone number could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer's
            phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or phone number type does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/customers/{customerId}/addresses:
    get:
      tags:
      - Customers
      summary: Gets a customer's addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a customer's addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses`

        ---

        Get just the required fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?select=id,postcode`

        ---

        Filter the results to return just the addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?filter=postcode in ('2000','2060')`

        ---

        Get in the required order, e.g. by post code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?orderby=postcode`
      operationId: GetCustomerAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested customer's addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Customers
      summary: Adds a new address to an existing customer.
      description: |-
        Add a new address to an existing customer.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses`
      operationId: CreateCustomerAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        201:
          description: The id of the address that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The customer's address could not be added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create a customer address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: address
  /{bookId}/customers/{customerId}/addresses/{type}:
    get:
      tags:
      - Customers
      summary: Gets a customer's address.
      description: |-
        Get a customer's address by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/work`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/a74ff4e7-9ee4-4908-b43d-6bf0d9e68d27`

        ---

        Get just the selected fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/work?select=id,postcode`
      operationId: GetCustomerAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The customer's specific address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            addresss.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Customers
      summary: Updates a customer's address.
      description: |-
        Update a customer's address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/work`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateCustomerAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer's address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer's
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Customers
      summary: Deletes an existing customer address.
      description: |-
        Delete an existing customer address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/legal`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteCustomerAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The customer's address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the customer's
            addresss.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Customers
      summary: Updates selected fields of an existing customer address.
      description: |-
        Patch an existing customer address.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/9600be24-cb30-4d74-b3c3-47f93cafcc92`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/shipping`
      operationId: PatchCustomerAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the customer's address to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer address could not be patched as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressPatch
  /{bookId}/customers/{customerId}/electronicAddresses/{type}:
    get:
      tags:
      - Customers
      summary: Gets a customer's electronic address.
      description: |-
        Get a customer's electronic address by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresss/07a15606-8ac9-416e-9763-be76b11a1def`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/Web`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/Web?select=id,address`
      operationId: GetCustomerElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The customer's specific electronic address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddress'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Customers
      summary: Updates a customer's electronic address.
      description: |-
        Update a customer's electronic address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/work`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateCustomerElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The electronic address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElectronicAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer's electronic address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the customer's
            electronic address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Customers
      summary: Deletes an existing customer electronic address.
      description: |-
        Delete an existing customer electronic address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/email`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteCustomerElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The customer's electronic address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the customer's
            electronic addresss.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Customers
      summary: Updates selected fields of an existing customer electronic address.
      description: |-
        Patch an existing customer electronic address by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/work`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: PatchCustomerElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the customer's electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify customer's electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, customer or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/customers/{customerId}/electronicAddresses:
    get:
      tags:
      - Customers
      summary: Gets a customer's electronic addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a customer's electronic addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?select=id,address`

        ---

        Filter the results to return just the electronic addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?filter=type.name in ('email','web')`

        ---

        Get in the required order, e.g. by address. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/customers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?orderby=address`
      operationId: GetCustomerElectronicAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested customer's electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the customer's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Customers
      summary: Adds a new electronic address to an existing customer.
      description: |-
        Add a new electronic address to an existing customer.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/customers/6A4CF5D1-2FC8-4022-956A-E7F265858FD7/electronicAddresses`
      operationId: CreateCustomerElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The details of the electronic address to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressInput'
        required: true
      responses:
        201:
          description: The id and name of the electronic address type that has been
            created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The electronic address could not be created as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/departments:
    get:
      tags:
      - Departments
      summary: Gets a list of departments.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of departments for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments`

        ---

        Get a specific page of departments. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments?page=2&perpage=20`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments?select=id,name`

        ---

        Filter the results to return just the departments that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments?filter=status eq "Active"`

        ---

        Sort in the required order, e.g. by status and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments?orderby=status desc,name`
      operationId: GetDepartments
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of departments per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of departments for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Departments
      summary: Creates a new department.
      description: |-
        Create a new department.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/departments`
      operationId: CreateDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new department.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInput'
        required: true
      responses:
        201:
          description: The id of the department that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The department could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: department
  /{bookId}/departments/{departmentId}:
    get:
      tags:
      - Departments
      summary: Gets a department.
      description: |-
        Get a particular department.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments/c3b904ef-c44e-405d-8359-51f1f7068d76`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/departments/c3b904ef-c44e-405d-8359-51f1f7068d76?select=id,name`
      operationId: GetDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or department does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Departments
      summary: Updates an existing department.
      description: |-
        Update an existing department.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/departments/d6302e62-ece7-4dda-8cb2-6cd03a35d6bc`
      operationId: UpdateDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the department.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The department could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or department does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: department
    delete:
      tags:
      - Departments
      summary: Deletes an existing department.
      description: |-
        Delete an existing department.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/departments/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The department could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or department does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Departments
      summary: Updates selected fields of an existing department.
      description: |-
        Patch an existing department.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/departments/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The departments's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The department could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or department does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: department
  /{bookId}/departments/{departmentId}/managers/{employeeId}/link:
    post:
      tags:
      - Departments
      summary: Links a manager to a department.
      description: |-
        Link a manager to a department.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/departments/b57d066c-a0f2-4d85-986c-75c236a1e15a/managers/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkManagerToDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The manager's id to be linked to the department.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking a manager to a department.
          content: {}
        400:
          description: The manager cannot be linked to the department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link a manager to the
            department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, department, or manager does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/departments/{departmentId}/managers/{employeeId}/unlink:
    post:
      tags:
      - Departments
      summary: Unlinks a manager from a department.
      description: |-
        Unlink a manager from a department.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/departments/b57d066c-a0f2-4d85-986c-75c236a1e15a/managers/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/unlink`
      operationId: UnlinkDepartmentLinkedManager
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The manager's id linked to the department.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the unlink procedure.
          content: {}
        400:
          description: The manager cannot be unlinked from the department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink a manager from
            a department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, department, or manager does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/departments/{departmentId}/employees/{employeeId}/link:
    post:
      tags:
      - Departments
      summary: Links an employee to a department.
      description: |-
        Link an employee to a department.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/departments/b57d066c-a0f2-4d85-986c-75c236a1e15a/employees/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkEmployeeToDepartment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employees id to be linked to the department.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking an employee to a department.
          content: {}
        400:
          description: The employee cannot be linked to the department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link an employee to the
            department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, department, or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/departments/{departmentId}/employees/{employeeId}/unlink:
    post:
      tags:
      - Departments
      summary: Unlinks an employee from a department.
      description: |-
        Unlink an employee from a department.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/departments/b57d066c-a0f2-4d85-986c-75c236a1e15a/employees/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/unlink`
      operationId: UnlinkDepartmentLinkedEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: departmentId
        in: path
        description: The department's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employees id linked to the department.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the unlink procedure.
          content: {}
        400:
          description: The employee cannot be unlinked from the department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink an employee from
            a department.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, department, or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/paymentMethods:
    get:
      tags:
      - Payment Methods
      summary: Gets a list of payment methods.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of payment methods for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/paymentmethods`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/paymentmethods?select=id,name`

        ---

        Filter the results to return just the payment methods you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/paymentmethods?filter=name eq 'Mastercard'`

        ---

        Sort in the required order, e.g. by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/paymentmethods?orderby=name`
      operationId: GetPaymentMethods
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of payment methods for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payment methods.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/payments:
    get:
      tags:
      - Payments
      summary: Get a list of payments.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of payments for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments`

        ---

        Get a specific page of payments. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments?select=id,totalAmount`

        ---

        Filter the results to return just the payments you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments?filter=paymentdate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by supplier name and then by date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments?orderby=supplier.name,paymentdate desc`
      operationId: GetPayments
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of payments per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of payments for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/payments/{paymentId}:
    get:
      tags:
      - Payments
      summary: Get a payment.
      description: "Get a particular payment.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`\n\
        \n---\n\nGet just the required fields, e.g. id and total amount. Find out\
        \ more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,totalAmount`\n\
        \n---\n\nGet a receipt as a PDF using a query string parameter.\n    \n`GET\
        \ /5af6572c-9771-4b86-995d-3374d3bc683c/payments/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?format=pdf`\n\
        \n---\n\nGet a payment as a PDF using a header instead of the query string\
        \ parameter : `Accept: application/pdf`.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/payments/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`"
      operationId: GetPayment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: paymentId
        in: path
        description: The payments id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      responses:
        200:
          description: A single payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/permissions:
    get:
      tags:
      - User permissions
      summary: Gets the current user's permissions.
      description: |-
        Get the current user's permissions.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/permissions`

        ---

        Filter the results to return just the permissions that you want to know about. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/permissions?filter=item in ('Invoices_View','Invoices_AddEdit')`
      operationId: GetUserPermissions
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: An array of the current user's permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/receipts:
    get:
      tags:
      - Receipts
      summary: Gets a list of receipts.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of receipts for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts`

        ---

        Get a specific page of receipts. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts?select=id,totalAmount`

        ---

        Filter the results to return just the receipts you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts?filter=receiptdate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by customer name and then by date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts?orderby=customer.name,receiptdate desc`
      operationId: GetReceipts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of receipts per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of receipts for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Receipts
      summary: Creates a new receipt.
      description: |-
        Create a new receipt.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/receipts`
      operationId: CreateReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new receipt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptInput'
        required: true
      responses:
        201:
          description: The id of the receipt that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The receipt could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: receipt
  /{bookId}/receipts/{receiptId}:
    get:
      tags:
      - Receipts
      summary: Gets a receipt.
      description: "Get a particular receipt.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`\n\
        \n---\n\nGet just the required fields, e.g. id and total amount. Find out\
        \ more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,totalAmount`\n\
        \n---\n\nGet a receipt as a PDF using a query string parameter.\n    \n`GET\
        \ /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?format=pdf`\n\
        \n---\n\nGet a receipt as a PDF using a header instead of the query string\
        \ parameter : `Accept: application/pdf`.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`"
      operationId: GetReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      responses:
        200:
          description: The requested receipt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the receipt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Receipts
      summary: Updates an existing receipt.
      description: |-
        Update an existing receipt.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated receipt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The receipt could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: receipt
    delete:
      tags:
      - Receipts
      summary: Deletes an existing receipt.
      description: |-
        Delete an existing receipt.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The receipt could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Receipts
      summary: Updates selected fields of an existing receipt.
      description: |-
        Patch an existing receipt.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the receipt to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The receipt could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: receipt
  /{bookId}/receipts/{receiptId}/lineItems/{lineItemId}:
    get:
      tags:
      - Receipts
      summary: Gets a line item from a receipt.
      description: |-
        Get a line item from an receipt.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineitems/55bc4aef-1492-459e-8fe4-a947c490fe09

        ---

        Get just the required fields, e.g. line id and description. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineitems/55bc4aef-1492-459e-8fe4-a947c490fe09?select=lineid,description`
      operationId: GetReceiptLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The line item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptLineItem'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the receipt line
            item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Receipts
      summary: Updates an existing line item within an existing receipt.
      description: "Update an existing line item within the specified book and receipt.\n\
        \    \n`PUT /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00/lineitems/48ce6d6c-2789-48d3-9435-83239626f701`"
      operationId: UpdateReceiptLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptLineItemInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/receipts/{receiptId}/lineItems:
    post:
      tags:
      - Receipts
      summary: Creates a new line item within an existing receipt.
      description: "Create a new line item within the specified book and receipt.\n\
        \    \n`POST /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b581a643-10dd-4d09-9a63-356654339795/lineitems`"
      operationId: AddLineItemToReceipt
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptLineItemInput'
        required: true
      responses:
        201:
          description: The id of the line item that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The line item could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add line items to receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/receipts/{receiptId}/lineitems/{lineItemId}:
    patch:
      tags:
      - Receipts
      summary: Updates selected fields of an existing line item within an existing
        receipt.
      description: |-
        Patch an existing line item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchReceiptLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to update.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptLineItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit receipt line items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/receipts/{receiptId}/lineitems/{lineId}:
    delete:
      tags:
      - Receipts
      summary: Deletes an existing receipt's line item.
      description: |-
        Delete an existing receipt's line item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00/lineitems/48ce6d6c-2789-48d3-9435-83239626f701`
      operationId: DeleteReceiptLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The receipt's line item id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The receipt or the line item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete a receipt's line
            item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/receipts/{receiptId}/transactionLinks:
    post:
      tags:
      - Receipts
      summary: Creates a new transaction link.
      description: |-
        Create a new transaction link.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks`
      operationId: CreateReceiptTransactionLink
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the transaction to link.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptTransactionLinkInput'
        required: true
      responses:
        201:
          description: The linked transaction's id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringIdResponse'
        400:
          description: The transaction link could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create linked transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or receipt does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: transactionLink
  /{bookId}/receipts/{receiptId}/transactionlinks/{linkId}:
    delete:
      tags:
      - Receipts
      summary: Deletes an existing receipt's linked transaction.
      description: |-
        Delete an existing receipt's linked transaction.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/INV-e16b61d7-e1ed-44de-9e73-0b9ef0405fbe`
      operationId: DeleteReceiptTransactionLink
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: linkId
        in: path
        description: The receipt's allocation link id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The receipt or an allocated transaction could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete an allocated transaction
            of a receipt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or receipt's transaction link does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Receipts
      summary: Updates selected fields of an existing receipt's linked transaction.
      description: |-
        Patch an existing receipt's linked transaction.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/receipts/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/INV-5B6915BB-0352-4D6E-98C4-72E7A9A92562`
      operationId: PatchReceiptTransactionLink
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: receiptId
        in: path
        description: The receipt's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: linkId
        in: path
        description: The linked transaction's id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the linked transaction to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptTransactionLinkPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The receipt's transaction link could not be updated as the
            request contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, receipt or transaction link does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: receiptTransactionLinkPatch
  /{bookId}/roles:
    get:
      tags:
      - Roles
      summary: Gets a list of roles.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of roles for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles`

        ---

        Get a specific page of roles. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles?select=id,name`

        ---

        Filter the results to return just the roles you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles?filter=name eq "Administrator"`

        ---

        Sort in the required order, e.g. by systemRole and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles?orderby=systemRole,name`
      operationId: GetRoles
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of roles per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of roles for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/roles/{roleId}:
    get:
      tags:
      - Roles
      summary: Gets a role.
      description: |-
        Get a role.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/roles/756`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles/756?select=id,name`
      operationId: GetRole
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: roleId
        in: path
        description: The role's id.
        required: true
        schema:
          type: integer
          format: int32
          nullable: false
      responses:
        200:
          description: The requested role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or role does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/roles/{roleId}/users/{userId}/link:
    post:
      tags:
      - Roles
      summary: Links a user to a role.
      description: |-
        Link a user to a role.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/roles/6/users/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkUserToRole
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: roleId
        in: path
        description: The role's id.
        required: true
        schema:
          type: integer
          format: int32
          nullable: false
      - name: userId
        in: path
        description: The user's id to be linked to the role.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking an user to a role.
          content: {}
        400:
          description: The user cannot be linked to the role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link a user to the role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, role, or user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfundProviders:
    get:
      tags:
      - Superfund providers
      summary: Gets a list of super fund providers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of super fund providers for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders`

        ---

        Get a specific page of super fund providers. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders?select=id,name`

        ---

        Filter the results to return just the super fund providers you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders?filter=status eq "active"`

        ---

        Sort in the required order, e.g. by abn and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders?orderby=abn,name desc`
      operationId: GetSuperfundProviders
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super fund providers per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of super fund providers for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperfundProviders'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund
            providers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfundProviders/havingUsi/{usi}:
    get:
      tags:
      - Superfund providers
      summary: Gets a list of super fund providers having a product with the provided
        USI.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of super fund providers having a product with the provided USI for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/havingUsi/NMM0102AU`

        ---

        Get a specific page of super fund providers having a product with the provided USI. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/havingUsi/NMM0102AU?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/havingUsi/NMM0102AU?select=id,name`

        ---

        Filter the results to return just the super fund providers having a product with the provided USI you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/havingUsi/NMM0102AU?filter=status eq "active"`

        ---

        Sort in the required order, e.g. by abn and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/havingUsi/NMM0102AU?orderby=abn,name desc`
      operationId: GetSuperfundProvidersHavingUsi
      parameters:
      - name: bookId
        in: path
        description: The book Id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: usi
        in: path
        description: The USI of a fund product.
        required: true
        schema:
          type: string
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super fund providers having a product with the
          provided USI per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of super fund providers having a product with
            the provided USI for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperfundProviders'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund
            providers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfundProviders/{superfundProviderId}:
    get:
      tags:
      - Superfund providers
      summary: Gets a super fund provider.
      description: |-
        Get a particular super fund provider.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,name`
      operationId: GetSuperfundProvider
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundProviderId
        in: path
        description: The super fund provider's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested super fund provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperfundProvider'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund
            provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund provider does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfundProviders/{superfundProviderId}/products:
    get:
      tags:
      - Superfund providers
      summary: Gets a list of a super fund provider's products.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of a super fund provider's products for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/2c94d683-35d4-4040-993e-a00821c6e39a/products`

        ---

        Get a specific page of a super fund provider's products. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/2c94d683-35d4-4040-993e-a00821c6e39a/products?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/2c94d683-35d4-4040-993e-a00821c6e39a/products?select=id,name`

        ---

        Filter the results to return just the super fund provider's products you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/2c94d683-35d4-4040-993e-a00821c6e39a/products?filter=usi eq "NMM0102AU"`

        ---

        Sort in the required order, e.g. by USI and then by SPIN. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfundProviders/2c94d683-35d4-4040-993e-a00821c6e39a/products?orderby=usi,spin desc`
      operationId: GetSuperfundProviderProducts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundProviderId
        in: path
        description: The super fund provider's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super fund provider products per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of a super fund provider's products for the specified
            book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperfundProviderProducts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund
            provider products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund provider does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/reports:
    get:
      tags:
      - Reports
      summary: Gets a list of reports.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of reports for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports?select=id,name`

        ---

        Filter the results to return just the reports that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports?filter=category eq "Financial"`

        ---

        Sort in the required order, e.g. by category and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports?orderby=category,name`
      operationId: GetReports
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of reports for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the reports.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/reports/payrollLeaveBalancesAndAccrualValue:
    # get:
    #   tags:
    #   - Reports
    #   summary: Gets the payroll leave balances and accrual value report.
    #   description: |-
    #     Get the payroll leave balances and accrual value report.

    #     `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue`

    #     ---

    #     Get the report as, for example, a PDF using a query string parameter.

    #     `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue?format=PDF`

    #     The following formats can be used:

    #     * `JSON`
    #     * `PDF`
    #     * `XLSX`
    #     * `RTF`
    #     * `CSV`
    #     * `HTML`

    #     ---

    #     Get the report as, for example, a PDF using a header instead of the query string parameter: `Accept: application/pdf`

    #     `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue`

    #     The following `Accept` header values can be used:

    #     * `application/json`
    #     * `application/pdf`
    #     * `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
    #     * `application/rtf`
    #     * `text/csv`
    #     * `text/html`
    #   operationId: GetPayrollLeaveBalancesAndAccrualValueReport
    #   parameters:
    #   - name: bookId
    #     in: path
    #     description: The book's id.
    #     required: true
    #     schema:
    #       type: string
    #       format: guid
    #       nullable: false
    #   - name: format
    #     in: query
    #     description: The format to use, e.g. pdf.
    #     schema:
    #       type: string
    #       nullable: true
    #   requestBody:
    #     description: The report parameters.
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReportParameters'
    #     required: true
    #   responses:
    #     200:
    #       description: The report.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReport'
    #     401:
    #       description: The authentication token is missing, expired or invalid.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponseUnauthorized'
    #     403:
    #       description: The user does not have permission to view the report.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponseForbidden'
    #     404:
    #       description: The specified book does not exist.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponseNotFound'
    #   security:
    #   - oauth2: []
    #   x-codegen-request-body-name: parameters
    post:
      tags:
      - Reports
      summary: Gets the payroll leave balances and accrual value report.
      description: |-
        Get the payroll leave balances and accrual value report.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue`

        ---

        Get the report as, for example, a PDF using a query string parameter.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue?format=PDF`

        The following formats can be used:

        * `JSON`
        * `PDF`
        * `XLSX`
        * `RTF`
        * `CSV`
        * `HTML`

        ---

        Get the report as, for example, a PDF using a header instead of the query string parameter: `Accept: application/pdf`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/reports/payrollLeaveBalancesAndAccrualValue`

        The following `Accept` header values can be used:

        * `application/json`
        * `application/pdf`
        * `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
        * `application/rtf`
        * `text/csv`
        * `text/html`
      operationId: GetPayrollLeaveBalancesAndAccrualValueReport2
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      requestBody:
        description: The report parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReportParameters'
        required: true
      responses:
        200:
          description: The report.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReport'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to view the report.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: parameters
  /{bookId}/suppliers:
    get:
      tags:
      - Suppliers
      summary: Gets a list of suppliers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of suppliers for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers`

        ---

        Get a specific page of suppliers. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers?select=id,name`

        ---

        Filter the results to return just the suppliers you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers?orderby=name, status desc`
      operationId: GetSuppliers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of suppliers per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of suppliers for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suppliers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the suppliers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Suppliers
      summary: Creates a new supplier.
      description: |-
        Create a new supplier.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers`
      operationId: CreateSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new supplier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierInput'
        required: true
      responses:
        201:
          description: The id of the supplier that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdNameResponse'
        400:
          description: The supplier could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create suppliers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: supplier
  /{bookId}/suppliers/{supplierId}:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier.
      description: |-
        Get a particular supplier.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Suppliers
      summary: Updates an existing supplier.
      description: |-
        Update an existing supplier.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: UpdateSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The suppliers's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated supplier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: supplier
    delete:
      tags:
      - Suppliers
      summary: Deletes an existing supplier.
      description: |-
        Delete an existing supplier.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The supplier could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete suppliers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Suppliers
      summary: Updates selected fields of an existing supplier.
      description: |-
        Patch an existing supplier.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: PatchSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the supplier to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier could not be patched as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: supplierPatch
  /{bookId}/suppliers/{supplierId}/addresses:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a supplier's addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses`

        ---

        Get just the required fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?select=id,postcode`

        ---

        Filter the results to return just the addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?filter=postcode in ('2000','2060')`

        ---

        Get in the required order, e.g. by post code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?orderby=postcode`
      operationId: GetSupplierAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested supplier's addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Suppliers
      summary: Adds a new address to an existing supplier.
      description: |-
        Add a new address to an existing supplier.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses`
      operationId: CreateSupplierAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier's address could not be added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier's
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
  /{bookId}/suppliers/{supplierId}/addresses/{type}:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's address.
      description: |-
        Get a supplier's address by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/business`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/a74ff4e7-9ee4-4908-b43d-6bf0d9e68d27`

        ---

        Get just the selected fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/work?select=id,postcode`
      operationId: GetSupplierAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of address by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The supplier's requested address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Suppliers
      summary: Updates an existing supplier address.
      description: |-
        Update an existing supplier address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/business`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateSupplierAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier's address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier's
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Suppliers
      summary: Deletes an existing supplier address.
      description: |-
        Delete an existing supplier address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/legal`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/Addresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteSupplierAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The supplier's address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the supplier's
            addresss.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Suppliers
      summary: Updates selected fields of an existing supplier address.
      description: "Patch an existing supplier address.\n\n**Note:** The `Content-Type`\
        \ header must be `application/merge-patch+json`.\n\n`PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/9600be24-cb30-4d74-b3c3-47f93cafcc92`\n\
        \            \n`PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/billing`"
      operationId: PatchSupplierAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the supplier's address to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier address could not be patched as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressPatch
  /{bookId}/suppliers/{supplierId}/contacts:
    get:
      tags:
      - Suppliers
      summary: Gets the supplier's linked contacts.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of a supplier's linked contacts for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts`

        ---

        Get a specific page of a supplier's linked contacts. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts?select=id,name`

        ---

        Filter the results to return just the supplier's linked contacts that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts?orderby=name, status desc`
      operationId: GetSuppliersLinkedContacts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of supplier's contact per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: The requested supplier's linked contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            linked contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Suppliers
      summary: Creates a new contact and links it to the supplier.
      description: |-
        Create a new contact and link it to the supplier.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts`
      operationId: AddNewContactToSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedContactInput'
        required: true
      responses:
        201:
          description: The id of the contact that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The contact could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
  /{bookId}/suppliers/{supplierId}/contacts/{contactId}:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's linked contact details.
      description: |-
        Get a supplier's linked contact details.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts/b2b994b8-0b85-41c9-ad06-7817df4e5fc4`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/contacts/b2b994b8-0b85-41c9-ad06-7817df4e5fc4?select=id,name`
      operationId: GetSuppliersLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The supplier's linked contact id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested supplier's linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            linked contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or supplier's linked contact does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/suppliers/{supplierId}/contacts/{contactId}/link:
    post:
      tags:
      - Suppliers
      summary: Links an existing contact to a supplier.
      description: |-
        Link an existing contact to a supplier.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkExistingContactToSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id to be linked to the supplier.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking an existing contact to a supplier.
          content: {}
        400:
          description: The existing contact cannot be linked to the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link an existing contact
            to the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier, or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/suppliers/{supplierId}/contacts/{contactId}/unlink:
    post:
      tags:
      - Suppliers
      summary: Unlinks a supplier's linked contact.
      description: |-
        Unlink a supplier's linked contact.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/unlink`
      operationId: UnlinkSupplierLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The supplier's linked contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the unlink procedure.
          content: {}
        400:
          description: The contact cannot be unlinked from the supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink the supplier's
            linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier, or linked contact of supplier
            does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/suppliers/{supplierId}/electronicAddresses:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's electronic addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a supplier's electronic addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?select=id,address`

        ---

        Filter the results to return just the electronic addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?filter=type.name in ('email','web')`

        ---

        Get in the required order, e.g. by address. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?orderby=address`
      operationId: GetSupplierElectronicAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested supplier's electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Suppliers
      summary: Adds a new electronic address to an existing supplier.
      description: |-
        Add a new electronic address to an existing supplier.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/6A4CF5D1-2FC8-4022-956A-E7F265858FD7/electronicaddresses`
      operationId: CreateSupplierElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The details of the electronic address to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressInput'
        required: true
      responses:
        201:
          description: The id and name of the electronic address type that has been
            created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The electronic address could not be created as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify suppliers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/suppliers/{supplierId}/electronicAddresses/{type}:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's electronic address.
      description: |-
        Get a supplier's electronic address by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/email`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/07a15606-8ac9-416e-9763-be76b11a1def`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/email?select=id,address`
      operationId: GetSupplierElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address type as either name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The supplier's requested electronic address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddress'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Suppliers
      summary: Updates an existing supplier electronic address.
      description: |-
        Update an existing supplier electronic address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/work`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateSupplierElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the supplier's electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElectronicAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify supplier's electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
    delete:
      tags:
      - Suppliers
      summary: Deletes an existing supplier's electronic address.
      description: |-
        Delete an existing supplier's electronic address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/email`
      operationId: DeleteElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address type's id or name.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The address type could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Suppliers
      summary: Updates selected fields of an existing supplier electronic address.
      description: |-
        Patch an existing supplier electronic address by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/work`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: PatchSupplierElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the supplier's electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify supplier's electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/suppliers/{supplierId}/phoneNumbers:
    get:
      tags:
      - Suppliers
      summary: Gets a supplier's phone numbers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a supplier's phone numbers.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?select=id,number`

        ---

        Filter the results to return just the address types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?filter=areacode in ('02','03')`

        ---

        Get in the required order, e.g. by area code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?orderby=areacode`
      operationId: GetSupplierPhoneNumbers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested supplier's phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumbers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Suppliers
      summary: Adds a new phone number to an existing supplier.
      description: |-
        Add a new phone number to an existing supplier.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers`
      operationId: CreateSupplierPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the phone number to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberInput'
        required: true
      responses:
        201:
          description: The id and name of the phone number type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The phone number could not be added as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/suppliers/{supplierId}/phoneNumbers/{type}:
    get:
      tags:
      - Suppliers
      summary: Get a supplier's phone number.
      description: |-
        Get a supplier's phone number by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/work`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/fb71355e-13eb-4e4f-9366-9d9422ddd361`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/suppliers/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/work?select=id,number`
      operationId: GetSupplierPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The supplier's specific phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the supplier's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Suppliers
      summary: Updates selected fields of an existing supplier phone number.
      description: |-
        Patch an existing supplier phone number.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/Suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/444393d3-2199-4eff-b3b2-c04e673fc903`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/Suppliers/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/Mobile`
      operationId: PatchSupplierPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: supplierId
        in: path
        description: The supplier's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the phone number to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The supplier's phone number could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the supplier's
            phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, supplier or phone number type does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/superfunds:
    get:
      tags:
      - Superfunds
      summary: Gets a list of super funds.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of super funds for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds`

        ---

        Get a specific page of super funds. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds?select=id,name`

        ---

        Filter the results to return just the super funds you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds?orderby=name, status desc`
      operationId: GetSuperfunds
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of super funds for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Superfunds'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Superfunds
      summary: Creates a new super fund.
      description: |-
        Create a new super fund.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds`
      operationId: CreateSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new super fund.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperfundInput'
        required: true
      responses:
        201:
          description: The id of the super fund that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdNameResponse'
        400:
          description: The super fund could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: superfundItem
  /{bookId}/superfunds/{superfundId}:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund.
      description: |-
        Get a particular super fund.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Superfund'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Superfunds
      summary: Updates an existing super fund.
      description: |-
        Update an existing super fund.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: UpdateSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated super fund.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperfundInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The super fund could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: superfundItem
    delete:
      tags:
      - Superfunds
      summary: Deletes an existing super fund.
      description: |-
        Delete an existing super fund.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The super fund could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Superfunds
      summary: Updates selected fields of an existing super fund.
      description: |-
        Patch an existing super fund.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: PatchSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated super fund to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperfundPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The super fund could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: superfundPatch
  /{bookId}/superfunds/{superfundId}/contacts:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's linked contacts.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of a super fund's linked contacts.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts`

        ---

        Get a specific page of a super fund's linked contacts. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts?select=id,name`

        ---

        Filter the results to return just the super fund's linked contacts that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts?orderby=name, status desc`
      operationId: GetSuperfundsLinkedContacts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super fund's contact per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of super fund's linked contacts for the specified
            book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            linked contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund, or linked contacts of super
            fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Superfunds
      summary: Creates a new contact and links it to the super fund.
      description: |-
        Create a new contact and link it to the super fund.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts`
      operationId: AddNewContactToSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedContactInput'
        required: true
      responses:
        201:
          description: The id of the contact that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The contact could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
  /{bookId}/superfunds/{superfundId}/contacts/{contactId}:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's linked contact.
      description: |-
        Get a super fund's linked contact.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b?select=id,name`
      operationId: GetSuperfundsLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The super fund's linked contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A super fund's linked contact for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund, or linked contact of super
            fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfunds/{superfundId}/contacts/{contactId}/link:
    post:
      tags:
      - Superfunds
      summary: Links an existing contact to a specified super fund.
      description: |-
        Link an existing contact to a specified super fund.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/link`
      operationId: LinkExistingContactToSuperfund
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id to be linked to the super fund.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of linking an existing contact to a super fund.
          content: {}
        400:
          description: The existing contact cannot be linked to the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to link an existing contact
            to the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund, or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfunds/{superfundId}/contacts/{contactId}/unlink:
    post:
      tags:
      - Superfunds
      summary: Unlinks a specified super fund's linked contact from that super fund.
      description: |-
        Unlink a super fund's linked contact for the specified super fund.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/b57d066c-a0f2-4d85-986c-75c236a1e15a/contacts/8bcf856e-b6ae-445f-b171-dc51ff4dd51b/unlink`
      operationId: UnlinkSuperfundsLinkedContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The super fund's linked contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the unlink procedure.
          content: {}
        400:
          description: The contact cannot be unlinked from the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink the super fund's
            linked contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund, or linked contact of super
            fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/superfunds/{superfundId}/phoneNumbers:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's phone numbers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a super fund's phone numbers.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?select=id,number`

        ---

        Filter the results to return just the address types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?filter=areacode in ('02','03')`

        ---

        Get in the required order, e.g. by area code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers?orderby=areacode`
      operationId: GetSuperfundPhoneNumbers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested super fund's phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumbers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Superfunds
      summary: Adds a new phone number to an existing super fund.
      description: |-
        Add a new phone number to an existing super fund.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers`
      operationId: CreateSuperfundPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the phone number to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberInput'
        required: true
      responses:
        201:
          description: The id and name of the phone number type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The phone number could not be added as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/superfunds/{superfundId}/phoneNumbers/{type}:
    get:
      tags:
      - Superfunds
      summary: Get a super fund's phone number.
      description: |-
        Get a super fund's phone number by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/work`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/fb71355e-13eb-4e4f-9366-9d9422ddd361`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/phonenumbers/work?select=id,number`
      operationId: GetSuperfundPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The super fund's specific phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Superfunds
      summary: Updates selected fields of an existing super fund phone number.
      description: |-
        Patch an existing super fund phone number by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/444393d3-2199-4eff-b3b2-c04e673fc903`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/Mobile`
      operationId: PatchSuperfundPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the phone number to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The super fund's phone number could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the super fund's
            phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or phone number type does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/superfunds/{superfundId}/addresses:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a super fund's addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses`

        ---

        Get just the required fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?select=id,postcode`

        ---

        Filter the results to return just the addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?filter=postcode in ('2000','2060')`

        ---

        Get in the required order, e.g. by post code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses?orderby=postcode`
      operationId: GetSuperfundAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested super fund's addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Superfunds
      summary: Adds a new address to an existing super fund.
      description: |-
        Add a new address to an existing super fund.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/6A4CF5D1-2FC8-4022-956A-E7F265858FD7/addresses`
      operationId: CreateSuperfundAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The details of the address to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        201:
          description: The id and name of the address type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The address could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: address
  /{bookId}/superfunds/{superfundId}/addresses/{type}:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's address.
      description: |-
        Get a super fund's address by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/business`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/a74ff4e7-9ee4-4908-b43d-6bf0d9e68d27`

        ---

        Get just the selected fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/addresses/work?select=id,postcode`
      operationId: GetSuperfundAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of address by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The super fund's requested address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Superfunds
      summary: Updates an existing super fund address.
      description: |-
        Update an existing super fund address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/business`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateSuperfundAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The super fund's address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the super fund's
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Superfunds
      summary: Deletes an existing super fund address.
      description: |-
        Delete an existing super fund address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/work`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteSuperfundAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The super fund's address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the super fund's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Superfunds
      summary: Updates selected fields of an existing super fund address.
      description: |-
        Patch an existing super fund address by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/postal`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: PatchSuperfundAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the super fund's address to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The super fund's address could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the super fund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressPatch
  /{bookId}/superfunds/{superfundId}/electronicAddresses:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's electronic addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a super fund's electronic addresses.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?select=id,address`

        ---

        Filter the results to return just the electronic addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?filter=type.name in ('email','web')`

        ---

        Get in the required order, e.g. by address. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses?orderby=address`
      operationId: GetSuperfundElectronicAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested super fund's electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Superfunds
      summary: Adds a new electronic address to an existing super fund.
      description: |-
        Add a new electronic address to an existing super fund.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/6A4CF5D1-2FC8-4022-956A-E7F265858FD7/electronicaddresses`
      operationId: CreateSuperfundElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The details of the electronic address to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressInput'
        required: true
      responses:
        201:
          description: The id and name of the electronic address type that has been
            created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The electronic address could not be created as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify super funds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or super fund does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/superfunds/{superfundId}/electronicAddresses/{type}:
    get:
      tags:
      - Superfunds
      summary: Gets a super fund's electronic address.
      description: |-
        Get a super fund's electronic address by name or id.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/email`

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/superfunds/ddca6e60-31ff-43a7-a152-1d08fba97332/electronicAddresses/Web?select=id,address`
      operationId: GetSuperfundElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The super fund's requested electronic address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddress'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the super fund's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Superfunds
      summary: Updates an existing super fund electronic address.
      description: |-
        Update an existing super fund electronic address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/work`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateSuperfundElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the super fund's electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElectronicAddressInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify super fund's electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
    delete:
      tags:
      - Superfunds
      summary: Deletes an existing super fund electronic address.
      description: |-
        Delete an existing super fund electronic address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/work`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteSuperfundPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The super fund's phone number could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the super fund's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Superfunds
      summary: Updates selected fields of an existing super fund electronic address.
      description: |-
        Patch an existing super fund electronic address.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/work`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/superfunds/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: PatchSuperfundElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: superfundId
        in: path
        description: The super fund's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the super fund's electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify super fund's electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, super fund or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/phonetypes:
    get:
      tags:
      - Phone types
      summary: Gets a list of phone types.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of phone types for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes?select=id,name`

        ---

        Filter the results to return just the phone types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes?filter=name in ('Mobile','Fax')`

        ---

        Get in the required order, e.g. by description. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes?orderby=description`
      operationId: GetPhoneTypes
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of phone types for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneTypes'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Phone types
      summary: Creates a new phone type.
      description: |-
        Create a new phone type.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes`
      operationId: CreatePhoneType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new phone type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneTypeInput'
        required: true
      responses:
        201:
          description: The id of the phone type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The phone type could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneType
  /{bookId}/phonetypes/{phoneTypeId}:
    get:
      tags:
      - Phone types
      summary: Gets a phone type.
      description: |-
        Get a particular phone type.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335?select=id,name`
      operationId: GetPhoneType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: phoneTypeId
        in: path
        description: The phone type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested phone type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneType'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or phone type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Phone types
      summary: Updates an existing phone type.
      description: |-
        Update a phone type.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: UpdatePhoneType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: phoneTypeId
        in: path
        description: The phone type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated phone type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneTypeInput'
        required: true
      responses:
        201:
          description: The result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The phone type could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or phone type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneType
    delete:
      tags:
      - Phone types
      summary: Deletes an existing phone type.
      description: |-
        Deletes an existing phone type.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: DeletePhoneType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: phoneTypeId
        in: path
        description: The phone type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The phone type could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or phone type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Phone types
      summary: Updates selected fields of an existing phone type.
      description: |-
        Patch an existing phone type.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/phonetypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: PatchPhoneType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: phoneTypeId
        in: path
        description: The phone type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated phone type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneTypePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The phone type could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update phone types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or phone type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneType
  /{bookId}/addresstypes:
    get:
      tags:
      - Address types
      summary: Gets a list of address types.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of address types.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes?select=id,name`

        ---

        Filter the results to return just the address types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes?filter=name in ('Business','Postal')`

        ---

        Get in the required order, e.g. by description. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes?orderby=description`
      operationId: GetAddressTypes
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of address types for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressTypes'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Address types
      summary: Creates a new address type.
      description: |-
        Create a new address type.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes`
      operationId: CreateAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressTypeInput'
        required: true
      responses:
        201:
          description: The id of the address type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The address type could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressType
  /{bookId}/addresstypes/{addressTypeId}:
    get:
      tags:
      - Address types
      summary: Gets an address type.
      description: |-
        Get a particular address type.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335?select=id,name`
      operationId: GetAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: addressTypeId
        in: path
        description: The address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested address type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressType'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Address types
      summary: Updates an existing address type.
      description: |-
        Update an address type.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: UpdateAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: addressTypeId
        in: path
        description: The address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressTypeInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The address type could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressType
    delete:
      tags:
      - Address types
      summary: Deletes an existing address type.
      description: |-
        Delete an existing address type.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: DeleteAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: addressTypeId
        in: path
        description: The address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The address type could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Address types
      summary: Updates selected fields of an existing address type.
      description: |-
        Patch an existing address type.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/addresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: PatchAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: addressTypeId
        in: path
        description: The address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressTypePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The address type could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update address types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: addressType
  /{bookId}/contacts:
    get:
      tags:
      - Contacts
      summary: Gets a list of contacts.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of contacts.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts`

        ---

        Get a specific page of contacts. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts?select=id,name`

        ---

        Filter the results to return just the contacts you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts?filter=name eq "John Doe"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts?orderby=name, status desc`
      operationId: GetContacts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of contacts per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of contacts for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Contacts
      summary: Creates a new contact.
      description: |-
        Create a new contact.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/contacts`
      operationId: CreateContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
        required: true
      responses:
        201:
          description: The id of the contact that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The contact could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
  /{bookId}/contacts/{contactId}:
    get:
      tags:
      - Contacts
      summary: Gets a contact.
      description: |-
        Get a contact.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Contacts
      summary: Updates an existing contact.
      description: |-
        Update an existing contact.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
    delete:
      tags:
      - Contacts
      summary: Deletes an existing contact.
      description: |-
        Delete an existing contact.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Contacts
      summary: Updates selected fields of an existing contact.
      description: |-
        Patch an existing contact.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: PatchContact
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the contact to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The contact could not be patched as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: contact
  /{bookId}/contacts/{contactId}/electronicAddresses:
    get:
      tags:
      - Contacts
      summary: Gets a contact's electronic addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a contact's electronic addresses.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses?select=id,address`

        ---

        Filter the results to return just the electronic addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses?filter=type.name in ('email','web')`

        ---

        Get in the required order, e.g. by address. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses?orderby=address`
      operationId: GetContactElectronicAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of contact's electronic addresses for the specified
            book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Contacts
      summary: Adds a new electronic address to an existing contact.
      description: |-
        Add a new electronic address to an existing contact.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/1f2a4bdf-5a08-4c4f-bd13-f12b131012e1/electronicaddresses`
      operationId: CreateContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the electronic address to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressInput'
        required: true
      responses:
        201:
          description: The id and name of the contact electronic address type that
            has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The electronic address could not be created as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/contacts/{contactId}/electronicAddresses/{type}:
    get:
      tags:
      - Contacts
      summary: Gets a contact's electronic address.
      description: |-
        Get a contact's electronic address by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/email`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`

        ---

        Get just the required fields, e.g. id and address. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/Web?select=id,address`
      operationId: GetContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: A contact's electronic address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddress'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            electronic addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Contacts
      summary: Updates an existing contact electronic address.
      description: |-
        Update an existing contact electronic address by name or id.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/email`

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The electronic address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElectronicAddressInput'
        required: true
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact's electronic address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the contact's electronic
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Contacts
      summary: Deletes an existing contact electronic address.
      description: |-
        Delete an existing contact electronic address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/email`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicAddresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact's electronic address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the contact's electronic
            address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or electronic address does not
            exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Contacts
      summary: Updates selected fields of an existing contact electronic address.
      description: |-
        Patch an existing contact electronic address by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/email`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/electronicaddresses/3b013e46-637a-4358-8e05-09038c263494`
      operationId: PatchContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The electronic address's type by name or id
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the contact electronic address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address could not be patched as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contact electronic
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or electronic address type does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/contacts/{contactId}/phoneNumbers:
    get:
      tags:
      - Contacts
      summary: Gets a contact's phone numbers.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a contact's phone numbers.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers?select=id,number`

        ---

        Filter the results to return just the phone numbers that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers?filter=areacode in ('02','03')`

        ---

        Get in the required order, e.g. by area code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers?orderby=areacode`
      operationId: GetContactPhoneNumbers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of contact's phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumbers'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Contacts
      summary: Adds a new phone number to an existing contact.
      description: |-
        Add a new phone number to an existing contact.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/1f2a4bdf-5a08-4c4f-bd13-f12b131012e1/phonenumbers`
      operationId: CreateContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the phone number to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberInput'
        required: true
      responses:
        201:
          description: The id and name of the contact phone number type that has been
            created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The phone number could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/contacts/{contactId}/phoneNumbers/{type}:
    get:
      tags:
      - Contacts
      summary: Gets a contact's phone number.
      description: |-
        Get a contact's phone number by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/fb71355e-13eb-4e4f-9366-9d9422ddd361`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work?select=id,number`
      operationId: GetContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: The contact's specific phone number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Contacts
      summary: Updates an existing contact phone number.
      description: |-
        Update an existing contact phone number by name or id.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/1f2a4bdf-5a08-4c4f-bd13-f12b131012e1/phonenumbers/work`

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/1f2a4bdf-5a08-4c4f-bd13-f12b131012e1/phonenumbers/b62461e6-f0d9-4b93-be43-2c2388a265ed`
      operationId: UpdateContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the phone number to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneNumberInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The phone number could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contact phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or phone number type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
    delete:
      tags:
      - Contacts
      summary: Delete an existing contact phone number.
      description: |-
        Delete an existing contact phone number.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/2a1dba1f-6dd9-4731-a5ae-33682abaa81e`
      operationId: DeleteContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact's phone number could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the contact's phone
            numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or phone number does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Contacts
      summary: Updates selected fields of an existing contact phone number.
      description: |-
        Patch an existing contact phone number by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/work`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/phonenumbers/444393d3-2199-4eff-b3b2-c04e673fc903`
      operationId: PatchContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The phone number's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the contact phone number to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The phone number could not be patched as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contact phone numbers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or phone number type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/contacts/{contactId}/addresses:
    get:
      tags:
      - Contacts
      summary: Gets a contact's addresses.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a contact's addresses.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses`

        ---

        Get just the required fields, e.g. id and number. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses?select=id,number`

        ---

        Filter the results to return just the addresses that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses?filter=areacode in ('02','03')`

        ---

        Get in the required order, e.g. by area code. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses?orderby=areacode`
      operationId: GetContactAddresses
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of contact's addresses for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Contacts
      summary: Create a new contact adress.
      description: |-
        Create a new contact address.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/contacts/3b013e46-637a-4358-8e05-09038c263494/addresses`
      operationId: CreateContactAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        201:
          description: The id of the address that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeResponse'
        400:
          description: The contact's address could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create a contact address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or contact does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: address
  /{bookId}/contacts/{contactId}/addresses/{type}:
    get:
      tags:
      - Contacts
      summary: Get a contact's address.
      description: |-
        Get a contact's address by name or id.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/postal`

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/fb71355e-13eb-4e4f-9366-9d9422ddd361`

        ---

        Get just the required fields, e.g. id and post code. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/postal?select=id,postcode`
      operationId: GetContactAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        200:
          description: A contact's address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the contact's
            addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Contacts
      summary: Updates an existing contact address.
      description: "Update an existing contact address by name or id.\n\n`PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/business`\n\
        \            \n`PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/b62461e6-f0d9-4b93-be43-2c2388a265ed`"
      operationId: UpdateContactAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The address.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
        required: true
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact's address could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the contact's address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: input
    delete:
      tags:
      - Contacts
      summary: Deletes an existing contact address.
      description: |-
        Delete an existing contact address.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/postal`

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/3fabc2f7-f52e-4ed3-95fe-7338cf2818df`
      operationId: DeleteContactAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The contact's address could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete the contact's address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or address does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Contacts
      summary: Updates selected fields of an existing contact address.
      description: |-
        Patch an existing contact address by name or id.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/work`

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/contacts/2a8cd401-5e6d-47d4-b5f0-011ff387dd59/addresses/7e3470aa-dcf0-4d95-9935-7e1f3e98360a`
      operationId: PatchContactAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: contactId
        in: path
        description: The contact's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The address's type by name or id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: Details of the contact address to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The address could not be patched as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to modify contact addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, contact or address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: address
  /{bookId}/electronicaddresstypes:
    get:
      tags:
      - Electronic address types
      summary: Gets a list of electronic address types.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of electronic address types for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes?select=id,name`

        ---

        Filter the results to return just the electronic address types that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes?filter=name in ('Business','Postal')`

        ---

        Get in the required order, e.g. by description. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes?orderby=description`
      operationId: GetElectronicAddressTypes
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of electronic address types for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddressTypes'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Electronic address types
      summary: Creates a new electronic address type.
      description: |-
        Create a new electronic address type.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes`
      operationId: CreateElectronicAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new electronic address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressTypeInput'
        required: true
      responses:
        201:
          description: The id of the electronic address type that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The electronic address type could not be created as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddressType
  /{bookId}/electronicaddresstypes/{electronicAddressTypeId}:
    get:
      tags:
      - Electronic address types
      summary: Gets an electronic address type.
      description: |-
        Get a particular electronic address type.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes/fb0e3146-6e67-4a78-bd17-9f5c9db20335?select=id,name`
      operationId: GetElectronicAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: electronicAddressTypeId
        in: path
        description: The electronic address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested electronic address type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectronicAddressType'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or electronic address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Electronic address types
      summary: Updates an existing electronic address type.
      description: |-
        Update an existing electronic address type.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: UpdateElectronicAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: electronicAddressTypeId
        in: path
        description: The electronic address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated electronic address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressTypeInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address type could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or electronic address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddressType
    delete:
      tags:
      - Electronic address types
      summary: Deletes an existing electronic address type.
      description: |-
        Delete an existing electronic address type.

        `DELETE /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: DeleteElectronicAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: electronicAddressTypeId
        in: path
        description: The electronic address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The electronic address type could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or electronic address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Electronic address types
      summary: Updates selected fields of an existing electronic address type.
      description: |-
        Patch an existing electronic address type.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/electronicaddresstypes/6df2ff1f-1565-46ab-8ce8-760f2ae009f8`
      operationId: PatchElectronicAddressType
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: electronicAddressTypeId
        in: path
        description: The electronic address type's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated electronic address type.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddressTypePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The electronic address type could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update electronic address
            types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or electronic address type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddressType
  /{bookId}/ledgeraccounts:
    get:
      tags:
      - Chart of Accounts
      summary: Gets a list of ledger accounts.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of ledger accounts for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts`

        ---

        Get a specific page of ledger accounts. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts?page=2&perpage=20`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts?select=id,name`

        ---

        Filter the results to return just the accounts that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts?filter=accounttype eq "Expense"`

        ---

        Sort in the required order, e.g. by accounttype and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts?orderby=accounttype desc,name`
      operationId: GetLedgerAccounts
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of accounts per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of ledger accounts for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccounts'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the ledger accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Chart of Accounts
      summary: Creates a new ledger account.
      description: |-
        Create a new ledger account.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts`

        ---

        ### Bank accounts
        When creating a bank account, you can provide additional details via the `bankAccount` field. You must **omit** the `parentLedgerAccount` and `defaultTaxRate` fields.

        ### Credit account
        When creating a credit account (for a credit card for example), you can provide additional details via the `creditAccount` field. You must **omit** the `parentLedgerAccount` and `defaultTaxRate` fields.

        ### Any other account
        When creating any other account, you must **omit** the `bankAccount` and `creditAccount` fields.
      operationId: CreateLedgerAccount
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The account to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccountInput'
        required: true
      responses:
        201:
          description: The id of the account that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The ledger account could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create a new ledger account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: account
  /{bookId}/ledgeraccounts/{accountId}:
    get:
      tags:
      - Chart of Accounts
      summary: Gets a ledger account.
      description: |-
        Get a particular ledger account.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts/c3b904ef-c44e-405d-8359-51f1f7068d76`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts/c3b904ef-c44e-405d-8359-51f1f7068d76?select=id,name`
      operationId: GetLedgerAccount
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: accountId
        in: path
        description: The ledger account's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested ledger account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the ledger account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or ledger account does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/ledgeraccounts/{ledgerAccountId}:
    put:
      tags:
      - Chart of Accounts
      summary: Updates an existing ledger account.
      description: |-
        Updates an existing ledger account.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateLedgerAccount
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: ledgerAccountId
        in: path
        description: The ledger account's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated ledger account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccountInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The ledger account could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit ledger accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or ledger account does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: ledgerAccount
    delete:
      tags:
      - Chart of Accounts
      summary: Deletes an existing ledger account.
      description: |-
        Deletes an existing ledger account.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteLedgerAccount
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: ledgerAccountId
        in: path
        description: The ledger account's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The ledger account could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete ledger accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or ledger account does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Chart of Accounts
      summary: Updates selected fields of an existing ledger account.
      description: |-
        Patch an existing ledger account.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/ledgeraccounts/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchLedgerAccount
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: ledgerAccountId
        in: path
        description: The ledger account's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated ledger account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccountPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The ledger account could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit ledger accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or ledger account does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: ledgerAccount
  /{bookId}/banking/financialinstitutions:
    get:
      tags:
      - Banking
      summary: Gets a list of financial institutions.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of filtering, sorting and selecting.

        ---

        Get a list of financial institutions.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/banking/financialinstitutions`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/banking/financialinstitutions?select=id,name`

        ---

        Filter the results to return just the financial institutions that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/banking/financialinstitutions?filter=name in ('Bank A','Bank B')`

        ---

        Get in the required order, e.g. by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/banking/financialinstitutions?orderby=name`
      operationId: GetFinancialInstitutions
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: A list of financial institutions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialInstitutions'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/employees:
    get:
      tags:
      - Employees
      summary: Gets a list of employees.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of employees for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees`

        ---

        Get a specific page of employees. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees?page=2&perpage=20`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees?select=id,name`

        ---

        Filter the results to return just the employees you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees?filter=name eq "Doe Jones"`

        ---

        Sort in the required order, e.g. by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees?orderby=name`
      operationId: GetEmployees
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of employees per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of employees for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Employees
      summary: Creates a new employee.
      description: |-
        Create a new employee.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/employees`
      operationId: CreateEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new employee.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
        required: true
      responses:
        201:
          description: The id of the employee that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The employee could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: employee
  /{bookId}/employees/{employeeId}:
    get:
      tags:
      - Employees
      summary: Gets an employee.
      description: |-
        Get a particular employee.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/employees/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/employees/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employee's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the employee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Employees
      summary: Updates an existing employee.
      description: |-
        Update an existing employee.

        `PUT /e7e3ba02-05e2-4bea-9348-85876c9952ba/employees/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: UpdateEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employee's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated employee.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The employee could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the employee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: employee
    delete:
      tags:
      - Employees
      summary: Deletes an existing employee.
      description: |-
        Delete an existing employee.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/employees/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employee's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The employee could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Employees
      summary: Updates selected fields of an existing employee.
      description: |-
        Patch an existing employee.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /e7e3ba02-05e2-4bea-9348-85876c9952ba/employees/2a8cd401-5e6d-47d4-b5f0-011ff387dd59`
      operationId: PatchEmployee
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: employeeId
        in: path
        description: The employee's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the employee to change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The employee could not be patched as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to update the employee.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or employee does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: employeePatch
  /{bookId}/expenseclaims:
    get:
      tags:
      - Expense Claims
      summary: Gets a list of expense claims.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of expense claims for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims`

        ---

        Get a specific page of expense claims. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims?select=id,totalClaimAmount`

        ---

        Filter the results to return just the expemse claims you want.Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims?filter=claimdate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by employee name and then by date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims?orderby=employee.name,claimdate desc`
      operationId: GetExpenseClaims
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of expense claims per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of expense claims for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaims'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Expense Claims
      summary: Creates a new expense claim.
      description: |-
        Create a new expense claim.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims`
      operationId: CreateExpenseClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new expense claim.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimInput'
        required: true
      responses:
        201:
          description: The id of the expense claim that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The expense claim could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: expenseClaim
  /{bookId}/expenseclaims/{expenseClaimId}:
    get:
      tags:
      - Expense Claims
      summary: Gets an expense claim.
      description: "Get a particular expense claim.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/958f72bd-f382-4fe6-bee5-2218a6aa7671`\n\
        \n---\n\nGet just the required fields, e.g. id and total amount. Find out\
        \ more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/958f72bd-f382-4fe6-bee5-2218a6aa7671?select=id,totalClaimAmount`\n\
        \n---\n\nGet an expense claim as a PDF using query string parameter.\n   \
        \ \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/958f72bd-f382-4fe6-bee5-2218a6aa7671?format=pdf`\n\
        \n---\n\nGet an expense claim as a PDF using a header instead of the query\
        \ string parameter : `Accept: application/pdf`.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/958f72bd-f382-4fe6-bee5-2218a6aa7671`"
      operationId: GetExpenseClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      responses:
        200:
          description: The requested expense claim.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaim'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the expense claim.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or expense claim does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Expense Claims
      summary: Updates an existing expense claim.
      description: |-
        Update an existing expense claim.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/958f72bd-f382-4fe6-bee5-2218a6aa7671`
      operationId: UpdateExpensClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated expense claim.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The expense claim could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or expense claim does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: expenseClaim
    delete:
      tags:
      - Expense Claims
      summary: Deletes an existing expense claim.
      description: |-
        Delete an existing expense claim.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795`
      operationId: DeleteExpenseClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The expense claim could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or expense claim does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Expense Claims
      summary: Updates selected fields of an existing expense claim.
      description: |-
        Patch an existing expense claim.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795`
      operationId: PatchExpenseClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The expense claim could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or expense claim does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: expenseClaim
  /{bookId}/expenseclaims/{expenseClaimId}/lineItems:
    post:
      tags:
      - Expense Claims
      summary: Creates a new line item within an existing expense claim.
      description: "Create a new line item within the specified book and expense claim.\n\
        \    \n`POST /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems`"
      operationId: AddLineItemToExpenseClaim
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimLineItemInput'
        required: true
      responses:
        201:
          description: The id of the line item that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The line item could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add line items to expense
            claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or expense claim does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/expenseclaims/{expenseClaimId}/lineitems/{lineItemId}:
    put:
      tags:
      - Expense Claims
      summary: Updates an existing line item within an existing expense claim.
      description: |-
        Update an existing line item.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: UpdateExpenseClaimLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to update.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimLineItemInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit expense claim line
            items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
    delete:
      tags:
      - Expense Claims
      summary: Deletes an existing line item.
      description: |-
        Delete an existing line item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteExpenseClaimLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The line item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete line items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Expense Claims
      summary: Updates selected fields of an existing line item within an existing
        expense claim.
      description: |-
        Patch an existing line item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchExpenseClaimLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to update.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaimLineItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit expense claim line
            items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/expenseclaims/{expenseClaimId}/lineitems/{lineItemId}/attachments/{attachmentId}:
    get:
      tags:
      - Expense Claims
      summary: Downloads a document that is attached to an expense claim line item.
      description: |-
        Download a document.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973/attachments/0ad21970-f7bf-4fcb-9529-98e45007cb1e`
      operationId: DownloadAttachment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: attachmentId
        in: path
        description: The id of the attachment to download.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The contents of the document and its file name in the X-File-Name
            header.
          content: {}
        400:
          description: The document could not be downloaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to download documents attached
            to expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim, line item or attachment
            does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    delete:
      tags:
      - Expense Claims
      summary: Deletes an attachment.
      description: |-
        Delete an attachment.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973/attachments/0ad21970-f7bf-4fcb-9529-98e45007cb1e`
      operationId: DeleteAttachment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to delete the document from.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: attachmentId
        in: path
        description: The attachment's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The document could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete documents from
            expense claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim, line item or attachment
            does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/expenseclaims/{expenseClaimId}/lineitems/{lineItemId}/attachments:
    post:
      tags:
      - Expense Claims
      summary: Attaches one or more documents to an expense claim line item.
      description: "Note that this endpoint will return 201 Created as the response.\
        \ Be sure to check the response body for the response for each document that\
        \ was sent.\n\nAttach a single document, passing the file contents as binary\
        \ content in the body.\n\n`POST /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973/attachments?filename=file.pdf`\n\
        \n---\n\nAttach up to 3 documents using a MIME multipart request.\n    \n\
        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/expenseclaims/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973/attachments`"
      operationId: AddAttachment
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: expenseClaimId
        in: path
        description: The expense claim's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to attach the document(s) to.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: fileName
        in: query
        description: The name of the file when passing a single document in the body
          of the request.
        schema:
          type: string
          nullable: true
      responses:
        201:
          description: A list of document attachment responses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAttachmentResponses'
        400:
          description: The document could not be added as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add documents to expense
            claims.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, expense claim or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /heartbeat:
    get:
      tags:
      - Heartbeat
      summary: Reckon One API heartbeat.
      description: |-
        Confirms that the Reckon One API is running and provides basic details including the current version.

        `GET /heartbeat`
      operationId: GetHeartbeat
      responses:
        200:
          description: The status of the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartbeatStatus'
      security:
      - oauth2: []
  /{bookId}/classifications:
    get:
      tags:
      - Classifications
      summary: Gets a list of classifications.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of classifications for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications`

        ---

        Get a specific page of classifications. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications?select=id,name`

        ---

        Filter the results to return just the classifications you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications?filter=name eq "A Classification"`

        ---

        Sort in the required order, e.g. by name and then by status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications?orderby=name, status desc`
      operationId: GetClassifications
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of classifications per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of classifications for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classifications'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the classifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Classifications
      summary: Creates a new classification.
      description: |-
        Create a new classification.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications`
      operationId: CreateClassification
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new classification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassificationInput'
        required: true
      responses:
        201:
          description: The id of the classification that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The classification could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create classifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: classification
  /{bookId}/classifications/{classificationId}:
    get:
      tags:
      - Classifications
      summary: Gets a classification.
      description: |-
        Get a classification.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/classifications/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/classifications/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name`
      operationId: GetClassification
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: classificationId
        in: path
        description: The classification's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested classification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the classification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or classification does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Classifications
      summary: Updates an existing classification.
      description: |-
        Update an existing classification.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/classifications/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateClassification
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: classificationId
        in: path
        description: The classification's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated classification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassificationInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit classifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or classification does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: classification
    delete:
      tags:
      - Classifications
      summary: Deletes an existing classification.
      description: |-
        Delete an existing classification.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/classifications/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteClassification
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: classificationId
        in: path
        description: The classification's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The classification could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete classifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or classification does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Classifications
      summary: Updates selected fields of an existing classification.
      description: |-
        Patch an existing classification.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/classifications/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchClassification
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: classificationId
        in: path
        description: The classification's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassificationPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The classification could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit classifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or classification does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: classification
  /{bookId}/terms:
    get:
      tags:
      - Payment Terms
      summary: Gets a list of payment terms.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of payment terms for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms`

        ---

        Get a specific page of payment terms. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms?select=id,name,description`

        ---

        Filter the results to return just the payment terms you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms?filter=isduedateweekend eq true`

        ---

        Sort in the required order, e.g. by name and then by netDueDay. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms?orderby=name,netdueday desc`
      operationId: GetPaymentTerms
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of payment term per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of payment terms for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTerms'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payment terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Payment Terms
      summary: Creates a new payment term.
      description: |-
        Create a new payment term.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms`
      operationId: CreatePaymentTerm
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new payment term.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTermInput'
        required: true
      responses:
        201:
          description: The id of the payment term that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The payment term could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create payment term.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: paymentTerm
  /{bookId}/terms/{termId}:
    get:
      tags:
      - Payment Terms
      summary: Gets a payment term.
      description: |-
        Get a particular payment term.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/terms/ddca6e60-31ff-43a7-a152-1d08fba97332`

        ---

        Get just the selected fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms/ddca6e60-31ff-43a7-a152-1d08fba97332?select=id,name,description`
      operationId: GetPaymentTerm
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: termId
        in: path
        description: The term's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested payment term.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTerm'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payment term.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or payment term does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Payment Terms
      summary: Updates an existing payment term.
      description: |-
        Update an existing payment term.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/terms/ddca6e60-31ff-43a7-a152-1d08fba97332`
      operationId: UpdatePaymentTerm
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: termId
        in: path
        description: The term's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated payment term.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTermInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The payment term could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit payment terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or payment term does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: paymentTerm
    delete:
      tags:
      - Payment Terms
      summary: Deletes an existing payment term.
      description: |-
        Delete an existing payment term.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/terms/ddca6e60-31ff-43a7-a152-1d08fba97332`
      operationId: DeletePaymentTerm
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: termId
        in: path
        description: The term's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The payment term could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete payment terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or payment term does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Payment Terms
      summary: Updates an existing payment term.
      description: |-
        Patch an existing payment term.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/terms/ddca6e60-31ff-43a7-a152-1d08fba97332`
      operationId: PatchPaymentTerm
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: termId
        in: path
        description: The term's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated payment term.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTermPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The payment term could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit payment terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or payment term does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: paymentTerm
  /{bookId}/terms/{termId}/duedate/basedate/{baseDate}:
    get:
      tags:
      - Payment Terms
      summary: Gets a calculated due date from a specified base date.
      description: |-
        Get a calculated due date from a specified base date.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/terms/49a2b705-ebf4-46a2-933b-fbb730584b0f/duedate/basedate/2020-07-29`
      operationId: GetPaymentTermDueDate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: termId
        in: path
        description: The term's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: baseDate
        in: path
        description: A base date
        required: true
        schema:
          type: string
          format: date-time
          nullable: false
      responses:
        200:
          description: A calculated due date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTermDueDate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the payment terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or payment term does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices:
    get:
      tags:
      - Invoices
      summary: Gets a list of invoices.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of invoices for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices`

        ---

        Get a specific page of invoices. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and total amount. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices?select=id,totalAmount`

        ---

        Filter the results to return just the invoices you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices?filter=invoicedate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by customer name and then by date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices?orderby=customer.name,invoicedate desc`
      operationId: GetInvoices
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of invoices per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of invoices for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Invoices
      summary: Creates a new invoice.
      description: |-
        Create a new invoice.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices`
      operationId: CreateInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new invoice.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceInput'
        required: true
      responses:
        201:
          description: The id of the invoice that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The invoice could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: invoice
  /{bookId}/invoices/{invoiceId}:
    get:
      tags:
      - Invoices
      summary: Gets an invoice.
      description: "Get a particular invoice.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`\n\
        \n---\n\nGet just the required fields, e.g. id and total amount. Find out\
        \ more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,totalAmount`\n\
        \n---\n\nGet an invoice as a PDF using a query string parameter.\n    \n`GET\
        \ /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?format=pdf`\n\
        \n---\n\nGet an invoice as a PDF using a header instead of the query string\
        \ parameter : `Accept: application/pdf`.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`"
      operationId: GetInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: format
        in: query
        description: The format to use, e.g. pdf.
        schema:
          type: string
          nullable: true
      responses:
        200:
          description: The requested invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Invoices
      summary: Updates an existing invoice.
      description: |-
        Update an existing invoice.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated invoice.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The invoice could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: invoice
    delete:
      tags:
      - Invoices
      summary: Deletes an existing invoice.
      description: |-
        Delete an existing invoice.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The invoice could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Invoices
      summary: Updates selected fields of an existing invoice.
      description: |-
        Patch an existing invoice.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoicePatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The invoice could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: invoice
  /{bookId}/invoices/summary:
    get:
      tags:
      - Invoices
      summary: Gets a summary of a book's invoices.
      description: |-
        Get a summary of a book's invoices.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/summary?baseDate=2021-11-23`
      operationId: GetInvoiceSummary
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: baseDate
        in: query
        description: The base date to use when checking for overdue invoices.
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        200:
          description: A summary of a book's invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesSummary'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices/summary/{customerId}:
    get:
      tags:
      - Invoices
      summary: Gets a summary of a book's invoices for a given customer.
      description: |-
        Get a summary of a book's invoices for a given customer.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/summary/80a6a8b9-8493-487c-9085-2328eb29a111?baseDate=2021-11-23`
      operationId: GetCustomerInvoiceSummary
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: customerId
        in: path
        description: The customer id to filter on.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: baseDate
        in: query
        description: The base date to use when checking for overdue invoices.
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        200:
          description: A summary of a book's invoices for a given customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesSummary'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices/convertfrom:
    post:
      tags:
      - Invoices
      summary: Creates a new invoice from an estimate.
      description: |-
        Create a new invoice from an estimate.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/convertfrom`
      operationId: ConvertInvoiceFrom
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to convert into an invoice.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceConvertFromInput'
        required: true
      responses:
        201:
          description: The id of the invoice that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The invoice could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: invoice
  /{bookId}/invoices/{invoiceId}/transactionlinks/{linkId}:
    delete:
      tags:
      - Invoices
      summary: Unlinks an existing transaction from an invoice.
      description: |-
        Unlink an existing receipt from an invoice.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/REC-8c642b15-c66f-4876-9a4d-bc5ea7c0ceb6`

        ---

        Unlink an existing credit note from an invoice.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/transactionlinks/CAN-018103e6-78c3-430d-b996-895e00f5f311`
      operationId: UnlinkInvoiceTransaction
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: linkId
        in: path
        description: The link's id.
        required: true
        schema:
          type: string
          nullable: false
      responses:
        204:
          description: The result of the request to unlink the transaction.
          content: {}
        400:
          description: The transaction could not be unlinked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to unlink transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, invoice or transaction link does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices/{invoiceId}/email:
    get:
      tags:
      - Invoices
      summary: Gets an email template populated with details from the specified invoice.
      description: |-
        Get the populated email template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/email`
      operationId: GetPopulatedEmail
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The populated email template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        400:
          description: The template could not be populated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to email invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Invoices
      summary: Emails an existing invoice.
      description: |-
        Email an existing invoice.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/email`
      operationId: EmailInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of an email to send.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailInput'
        required: true
      responses:
        204:
          description: The invoice sent.
          content: {}
        400:
          description: The invoice could not be sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to email invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: email
  /{bookId}/invoices/{invoiceId}/email/markAsSent:
    post:
      tags:
      - Invoices
      summary: Marks an existing invoice as sent.
      description: |-
        Mark an existing invoice as sent.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/email/markassent`
      operationId: MarkInvoiceEmailAsSent
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the request to mark the invoice as sent.
          content: {}
        400:
          description: The invoice could not be marked as sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to email invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices/{invoiceId}/email/markAsUnsent:
    post:
      tags:
      - Invoices
      summary: Marks an existing invoice as unsent.
      description: |-
        Mark an existing invoice as unsent.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/e6abf51e-2052-43c7-be02-4146cbfe9d00/email/markasunsent`
      operationId: MarkInvoiceEmailAsUnsent
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the request to mark the invoice as unsent.
          content: {}
        400:
          description: The invoice could not be marked as sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to email invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/invoices/{invoiceId}/lineItems/{lineItemId}:
    get:
      tags:
      - Invoices
      summary: Gets a line item from an invoice.
      description: |-
        Get a line item from an invoice.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineitems/55bc4aef-1492-459e-8fe4-a947c490fe09

        ---

        Get just the required fields, e.g. line id and description. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2/lineitems/55bc4aef-1492-459e-8fe4-a947c490fe09?select=lineid,description`
      operationId: GetInvoiceLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The line item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceLineItem'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the invoice line
            item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, invoice or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Invoices
      summary: Updates an existing line item within an existing invoice.
      description: "Update an existing line item within the specified book and invoice.\n\
        \    \n`PUT /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b581a643-10dd-4d09-9a63-356654339795/lineitems/04613F45-665B-4C78-9C37-9772151BF7B3`"
      operationId: UpdateInvoiceLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The line item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceLineItemInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, invoice or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/invoices/{invoiceId}/lineItems:
    post:
      tags:
      - Invoices
      summary: Creates a new line item within an existing invoice.
      description: "Create a new line item within the specified book and invoice.\n\
        \    \n`POST /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b581a643-10dd-4d09-9a63-356654339795/lineitems`"
      operationId: AddLineItemToInvoice
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new line item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceLineItemInput'
        required: true
      responses:
        201:
          description: The id of the line item that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The line item could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add line items to invoices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or invoice does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/invoices/{invoiceId}/lineitems/{lineItemId}:
    delete:
      tags:
      - Invoices
      summary: Deletes an existing line item.
      description: |-
        Delete an existing line item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteInvoiceLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The line item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete line items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, invoice or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Invoices
      summary: Updates selected fields of an existing line item within an existing
        invoice.
      description: |-
        Patch an existing line item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/b581a643-10dd-4d09-9a63-356654339795/lineitems/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchInvoiceLineItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: invoiceId
        in: path
        description: The invoice's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineItemId
        in: path
        description: The id of the line item to update.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceLineItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The line item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit invoice line items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, invoice or line item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: lineItem
  /{bookId}/invoices/recurringTemplates/{templateId}:
    get:
      tags:
      - Invoices
      summary: Gets a recurring invoice template.
      description: |-
        Get the specified recurring invoice template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/recurringTemplates/13924799-108b-4b77-88a8-11045d50187d`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/invoices/recurringTemplates/13924799-108b-4b77-88a8-11045d50187d?select=id,name`
      operationId: GetRecurringInvoiceTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested recurring invoice template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringInvoiceTemplate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the recurring
            invoice templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or recurring invoice template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/projects:
    get:
      tags:
      - Projects
      summary: Gets a list of projects.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of projects for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects`

        ---

        Get a specific page of projects. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects?page=3&perpage=15`

        ---

        Get just the required fields, e.g. id and status. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects?select=id,status`

        ---

        Filter the results to return just the projects you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects?filter=startdate le "2020-03-31"`

        ---

        Sort in the required order, e.g. by project name and then by start date. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects?orderby=name,startdate desc`
      operationId: GetProjects
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of projects per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of projects for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Projects
      summary: Creates a new project.
      description: |-
        Create a new project.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/projects`
      operationId: CreateProject
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
        required: true
      responses:
        201:
          description: The id of the project that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The project could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: project
  /{bookId}/projects/{projectId}:
    get:
      tags:
      - Projects
      summary: Gets a project.
      description: |-
        Get a particular project.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects/0b8d94fc-f0d3-4b13-9aa9-dd59c2d4267c`

        ---

        Get just the required fields, e.g. id and status. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/projects/0b8d94fc-f0d3-4b13-9aa9-dd59c2d4267c?select=id,status`
      operationId: GetProject
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or project does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Projects
      summary: Updates an existing project.
      description: |-
        Update an existing project.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795`
      operationId: UpdateProject
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The project could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or project does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: project
    delete:
      tags:
      - Projects
      summary: Deletes an existing project.
      description: |-
        Delete an existing project.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795`
      operationId: DeleteProject
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The project could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or project does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Projects
      summary: Updates selected fields of an existing project.
      description: |-
        Patch an existing project.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795
      operationId: PatchProject
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The project's details being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The project could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or project does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: project
  /{bookId}/projects/{projectId}/items/{lineId}:
    delete:
      tags:
      - Projects
      summary: Deletes an existing project item.
      description: |-
        Delete an existing project item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/items/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteProjectItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The id of the project item to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The project item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete project items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Projects
      summary: Updates selected fields of an existing project item within an existing
        project.
      description: |-
        Patch an existing project item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/items/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchProjectItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The project item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The project item's details being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The project item could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit project items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: projectItem
  /{bookId}/projects/{projectId}/customers/{lineId}:
    delete:
      tags:
      - Projects
      summary: Deletes an existing project customer.
      description: |-
        Delete an existing project customer.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/customers/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteProjectCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The id of the project customer to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The project customer could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete project customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Projects
      summary: Updates selected fields of an existing project customer within an existing
        project.
      description: |-
        Patch an existing project customer.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/customers/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchProjectCustomer
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The project customer's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The project customer's details being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCustomerPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit project customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: projectCustomer
  /{bookId}/projects/{projectId}/suppliers/{lineId}:
    delete:
      tags:
      - Projects
      summary: Deletes an existing project supplier.
      description: |-
        Delete an existing project supplier.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/suppliers/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: DeleteProjectSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The id of the project supplier to delete.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The project supplier could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete project suppliers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Projects
      summary: Updates selected fields of an existing project supplier within an existing
        project.
      description: |-
        Patch an existing project supplier.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/projects/b581a643-10dd-4d09-9a63-356654339795/suppliers/907f8858-91c5-47f7-ba92-42d4b4b27973`
      operationId: PatchProjectSupplier
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: projectId
        in: path
        description: The project's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: lineId
        in: path
        description: The project suppliers's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The project suppliers's details being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSupplierPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The customer could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit project supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book, project or project supplier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: projectSupplier
  /{bookId}/settings:
    get:
      tags:
      - Settings
      summary: Get a book's general settings.
      description: |-
        Get general settings for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings`

        ---

        Get just the required fields, e.g. book name and start date. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings?select=bookname,startdate`
      operationId: GetSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The general settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's settings.
      description: |-
        Patch a book's general settings, excluding the book's name. A book's name can only be changed via Reckon Portal.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings`
      operationId: PatchSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book settings being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/addresses/{type}:
    patch:
      tags:
      - Settings
      summary: Updates selected fields of an address in a book's settings.
      description: |-
        Patch an address in a book's general settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/addresses/legal
      operationId: PatchSettingsAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of address. This can either be `legal`, `physical` or
          the address type id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The address being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: address
  /{bookId}/settings/contact/phoneNumbers/{type}:
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a contact phone number in a book's settings.
      description: |-
        Patch a contact phone number in a book's general settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/contact/phoneNumbers/mobile
      operationId: PatchSettingsContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of phone number. This can either be `phone`, `mobile`,
          `fax` or the phone number type id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The phone number being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/settings/contact/electronicAddresses/{type}:
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a contact electronic address in a book's
        settings.
      description: |-
        Patch a contact electronic address in a book's general settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/contact/electronicAddresses/web`
      operationId: PatchSettingsContactElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of electronic address. This can either be `email` or
          `web`.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The electronic address being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/settings/tax:
    get:
      tags:
      - Settings
      summary: Get a book's tax settings.
      description: "Get tax settings for the specified book.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/tax`\n\
        \ \n---\n\nGet just the required fields, e.g. ReportingBasis and TaxRegistered.\
        \ Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/tax?select=TaxRegistered,ReportingBasis`"
      operationId: GetTaxSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The tax settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's tax
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's tax settings.
      description: |-
        Patch a book's tax settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/tax`
      operationId: PatchTaxSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's tax settings being updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's tax settings could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book's tax settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/invoice:
    get:
      tags:
      - Settings
      summary: Gets a book's invoice settings.
      description: |-
        Get invoice settings for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/invoice`

        ---

        Get just the required fields, e.g. approvalEnabled and prefix. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/invoice?select=approvalEnabled,prefix`
      operationId: GetInvoiceSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The invoice settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's invoice
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's invoice settings.
      description: |-
        Patch a book's invoice settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/invoice`
      operationId: PatchInvoiceSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's invoice settings to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's invoice settings could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit the book's invoice
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/creditNote:
    get:
      tags:
      - Settings
      summary: Gets a book's credit note settings.
      description: |-
        Get credit note settings for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/creditnote`

        ---

        Get just the required fields, e.g. defaultTemplate and prefix. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/creditnote?select=defaultTemplate,prefix`
      operationId: GetCreditNoteSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The credit note settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's credit
            note settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's credit note settings.
      description: |-
        Patch a book's credit note settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/creditnote`
      operationId: PatchCreditNoteSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's credit note settings to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's credit note settings could not be updated as the
            request contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit the book's credit
            note settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/receipt:
    get:
      tags:
      - Settings
      summary: Gets a book's receipt settings.
      description: |-
        Get receipt settings for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/receipt`

        ---

        Get just the required fields, e.g. approvalEnabled and prefix. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/receipt?select=approvalEnabled,prefix`
      operationId: GetReceiptSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The receipt settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's receipt
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's receipt settings.
      description: |-
        Patch a book's receipt settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/receipt`
      operationId: PatchReceiptSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's receipt settings to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceiptSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's receipt settings could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit the book's receipt
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/payroll:
    get:
      tags:
      - Settings
      summary: Get a book's payroll settings.
      description: "Get payroll settings for the specified book.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/payroll`\n\
        \ \n---\n\nGet just the required fields, e.g. automaticPayrollPayments. Find\
        \ out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/payroll?select=automaticPayrollPayments`"
      operationId: GetPayrollSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The payroll settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayrollSettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's payroll
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's payroll settings.
      description: |-
        Patch a book's payroll settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/payroll`
      operationId: PatchPayrollSettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's payroll settings being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayrollSettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's payroll settings could not be updated as the request
            contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit book's payroll settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/settings/payroll/legalContact/phoneNumbers/{type}:
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a legal contact's phone number in a book's
        payroll settings.
      description: |-
        Patch a legal contact's phone number in a book's payroll settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/payroll/legalContact/phoneNumbers/phone`
      operationId: PatchPayrollSettingsContactPhoneNumber
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of phone number. This can either be `phone` or the phone
          number type id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The phone number being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPhoneNumberPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The payroll settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit payroll settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: phoneNumber
  /{bookId}/settings/payroll/legalContact/electronicAddresses/{type}:
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a legal contact's electronic address in
        a book's payroll settings.
      description: |-
        Patch a legal contact's electronic address in a book's payroll settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/payroll/legalContact/electronicAddresses/email`
      operationId: PatchPayrollSettingsElectronicAddress
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: type
        in: path
        description: The type of electronic address. This can either be `email` or
          the email type id.
        required: true
        schema:
          type: string
          nullable: false
      requestBody:
        description: The electronic address being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookElectronicAddressPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The payroll settings could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit payroll settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: electronicAddress
  /{bookId}/settings/timeEntries:
    get:
      tags:
      - Settings
      summary: Get a book's time entry settings.
      description: "Get time entry settings for the specified book.\n\n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/timeEntries`\n\
        \ \n---\n\nGet just the required fields, e.g. approvalEnabled. Find out more\
        \ about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).\n\
        \n`GET /5af6572c-9771-4b86-995d-3374d3bc683c/settings/timeEntries?select=approvalEnabled`"
      operationId: GetTimeEntrySettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The time entry settings for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntrySettings'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the book's time
            entry settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Settings
      summary: Updates selected fields of a book's time entry settings.
      description: |-
        Patch a book's time entry settings.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/settings/timeEntries`
      operationId: PatchTimeEntrySettings
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The book's time entry settings being altered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntrySettingsPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The book's time entry settings could not be updated as the
            request contains invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit the book's time entry
            settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: settings
  /{bookId}/templates:
    get:
      tags:
      - Templates
      summary: Gets a list of templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates?filter=type eq "Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates?orderby=name,fontSize desc`
      operationId: GetTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTypeRef'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/{templateId}/logo:
    get:
      tags:
      - Templates
      summary: Gets a template's logo for the specified book.
      description: |-
        Get a template's logo for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/c037dc0c-15c8-44d8-a1de-f274853b212c/logo`
      operationId: GetTemplateLogo
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentResult'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist or the template
            does not have a logo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/invoices:
    get:
      tags:
      - Templates
      summary: Gets a list of invoice templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices?orderby=name,fontSize desc`
      operationId: GetInvoiceTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of invoices templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/invoices/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets an invoice template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/invoices/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetInvoiceTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/estimates:
    get:
      tags:
      - Templates
      summary: Gets a list of estimate templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates?orderby=name,fontSize desc`
      operationId: GetEstimateTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of estimates templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateTemplates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/estimates/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets an estimate template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/estimates/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetEstimateTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateTemplate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/customerAdjustmentNotes:
    get:
      tags:
      - Templates
      summary: Gets a list of customer adjustment note templates for the specified
        book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes?orderby=name,fontSize desc`
      operationId: GetCustomerAdjustmentNotesTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of customer adjustment notes templates for the specified
            book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/customerAdjustmentNotes/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets a customer adjustment note template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerAdjustmentNotes/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetCustomerAdjustmentNotesTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/bills:
    get:
      tags:
      - Templates
      summary: Gets a list of bill templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills?orderby=name,fontSize desc`
      operationId: GetBillTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of bills templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/bills/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets a bill template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/bills/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetBillTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/supplierAdjustmentNotes:
    get:
      tags:
      - Templates
      summary: Gets a list of supplier adjustment note templates for the specified
        book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes?orderby=name,fontSize desc`
      operationId: GetSupplierAdjustmentNotesTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of supplier adjustment notes templates for the specified
            book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/supplierAdjustmentNotes/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets a supplier adjustment note template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/supplierAdjustmentNotes/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetSupplierAdjustmentNotesTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/expenseclaims:
    get:
      tags:
      - Templates
      summary: Gets a list of expense claim templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims?orderby=name,fontSize desc`
      operationId: GetExpenseclaimsTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of expense claims templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/expenseclaims/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets an expense claim template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/expenseclaims/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetExpenseclaimssTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/customerStatements:
    get:
      tags:
      - Templates
      summary: Gets a list of customer statement templates for the specified book.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a list of templates of the given type for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements`

        ---

        Get a specific page of templates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements?select=id,name`

        ---

        Filter the results to return just the templates you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements?filter=name eq "Professional Invoice"`

        ---

        Sort in the required order, e.g. by template name and then by font size. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements?orderby=name,fontSize desc`
      operationId: GetCustomerStatementsTemplates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of super funds per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A list of customer statements templates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatementsTemplates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/templates/customerStatements/{templateId}:
    get:
      tags:
      - Templates
      summary: Gets a customer statement template for the specified book.
      description: |-
        Get a template.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements/9daff407-c6f8-492b-8ba2-bf6a94078fa9`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/templates/customerStatements/9daff407-c6f8-492b-8ba2-bf6a94078fa9?select=id,name`
      operationId: GetCustomerStatementsTemplate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: templateId
        in: path
        description: The template's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatementsTemplate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or template does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/taxgroups/{effectiveDate}:
    get:
      tags:
      - Tax
      summary: Gets a paged list of tax groups for the specified book.
      operationId: GetTaxGroups
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: effectiveDate
        in: path
        description: The effective date for the tax rates.
        required: true
        schema:
          type: string
          format: date-time
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of groups per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of tax groups for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxGroups'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the tax groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/taxgroups/{taxGroupId}/{effectiveDate}:
    get:
      tags:
      - Tax
      summary: Gets a tax group with tax rates as at the supplied effective date.
      operationId: GetTaxGroup
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: taxGroupId
        in: path
        description: The tax group's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: effectiveDate
        in: path
        description: The effective date for the tax rates.
        required: true
        schema:
          type: string
          format: date-time
          nullable: false
      responses:
        200:
          description: The requested tax group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxGroups'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the tax groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or tax group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/taxrates/{effectiveDate}:
    get:
      tags:
      - Tax
      summary: Gets tax rates as at the supplied effective date.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of tax rates for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/2020-01-31`

        ---

        Get a specific page of tax rates. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/2020-01-31?page=2&perpage=10`

        ---

        Get just the required fields, e.g. id, name and rate. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/2020-01-31?select=id,name,rate`

        ---

        Filter the results to return just the tax rates that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/2020-01-31?filter=name eq "GST"`

        ---

        Sort in the required order, e.g. rate and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/2020-01-31?orderby=rate desc,name`
      operationId: GetTaxRates
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: effectiveDate
        in: path
        description: The effective date for the tax rates.
        required: true
        schema:
          type: string
          format: date-time
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of rates per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of tax rates for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRates'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the tax rates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/taxrates/{taxRateId}/{effectiveDate}:
    get:
      tags:
      - Tax
      summary: Gets a tax rate as at the supplied effective date.
      description: |-
        Get a particular tax rate.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/b485e04d-f69b-4876-b576-bac3958f2490/2020-01-31`

        ---

        Get just the required fields, e.g. id, name and rate. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/taxrates/b485e04d-f69b-4876-b576-bac3958f2490/2020-01-31?select=id,name,rate`
      operationId: GetTaxRate
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: taxRateId
        in: path
        description: The tax rate's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: effectiveDate
        in: path
        description: The effective date for the tax rate.
        required: true
        schema:
          type: string
          format: date-time
          nullable: false
      responses:
        200:
          description: The requested tax rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRate'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the tax rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or tax rate does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/items:
    get:
      tags:
      - Items
      summary: Gets a list of items.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of items for the specified book.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items`

        ---

        Get a specific page of items. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items?page=2&perpage=20`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items?select=id,name`

        ---

        Filter the results to return just the accounts that you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items?filter=name eq "Product A"`

        ---

        Sort in the required order, e.g. by itemtype and then by name. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items?orderby=itemtype desc,name`
      operationId: GetItems
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of items per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of items for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    post:
      tags:
      - Items
      summary: Creates a new item.
      description: |-
        Create a new item.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/items`
      operationId: CreateItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: The item to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
        required: true
      responses:
        201:
          description: The id of the item that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The item could not be created as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to add a new item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: item
  /{bookId}/items/{itemId}:
    get:
      tags:
      - Items
      summary: Gets an item.
      description: |-
        Get a particular item.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items/9f26ffa4-861e-4bcd-a59a-fcf7232b08ee`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/items/9f26ffa4-861e-4bcd-a59a-fcf7232b08ee?select=id,name`
      operationId: GetItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: itemId
        in: path
        description: The item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Items
      summary: Updates an existing item.
      description: |-
        Update an existing item.

        `PUT /5af6572c-9771-4b86-995d-3374d3bc683c/items/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: itemId
        in: path
        description: The item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The item could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: item
    delete:
      tags:
      - Items
      summary: Deletes an existing item.
      description: |-
        Delete an existing item.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/items/c6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: itemId
        in: path
        description: The item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the deletion.
          content: {}
        400:
          description: The item could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    patch:
      tags:
      - Items
      summary: Updates selected fields of an existing item.
      description: |-
        Patch an existing item.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/items/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchItem
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: itemId
        in: path
        description: The item's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The item could not be updated as the request contains invalid
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or item does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: item
  /{bookId}/timeEntries:
    get:
      tags:
      - Time entries
      summary: Gets a list of time entries.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of time entries for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries`

        ---

        Get a specific page of time entries. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and employee. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?select=id,employee`

        ---

        Filter the results to return just the time entries you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?filter=employee.name eq "Joe Bloggs"`

        ---

        Get the details of a single employee's time entries for a single day.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?filter=employee.id eq "d90ae40d-fe8c-4b77-8c75-aa5ad8351eed" and timeEntryDate eq "2021-10-19"`

        ---

        Get the details of multiple employees' time entries for a single day.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?filter=employee.id in ("d90ae40d-fe8c-4b77-8c75-aa5ad8351eed","61cf7acb-4519-4718-b1ed-1857ca9cc070") and timeEntryDate eq "2021-10-19"`

        ---

        Get the details of a single employee's time entries for a week.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?filter=employee.id eq "d90ae40d-fe8c-4b77-8c75-aa5ad8351eed" and timeEntryDate ge "2021-10-01" and timeEntryDate le "2021-10-07"`

        ---

        Sort in the required order, e.g. by time entry date and then by approval status. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries?orderby=timeEntryDate, approvalStatus desc`
      operationId: GetTimeEntries
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of time entries per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of time entries for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntries'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the time entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/timeEntries/{timeEntryId}:
    get:
      tags:
      - Time entries
      summary: Gets a time entry.
      description: |-
        Get a particular time entry.

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/timeentries/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2`

        ---

        Get just the required fields, e.g. id and name. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /5af6572c-9771-4b86-995d-3374d3bc683c/timeentries/b696b9f5-e1e7-41f1-9f44-fa047e5e9ad2?select=id,time`
      operationId: GetTimeEntry
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: timeEntryId
        in: path
        description: The time entry's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        200:
          description: The requested time entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve the time entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or time entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
    put:
      tags:
      - Time entries
      summary: Updates an existing time entry.
      description: |-
        Update an existing time entry.

        `POST /5af6572c-9771-4b86-995d-3374d3bc683c/timeentries/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: UpdateTimeEntry
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: timeEntryId
        in: path
        description: The time entry's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the updated time entry.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryInput'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The time entry could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit time entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or time entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: timeEntry
    delete:
      tags:
      - Time entries
      summary: Deletes an existing time entry.
      description: |-
        Deletes an existing time entry.

        `DELETE /5af6572c-9771-4b86-995d-3374d3bc683c/timeentries/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: DeleteTimeEntry
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: timeEntryId
        in: path
        description: The time entry's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      responses:
        204:
          description: The result of the delete.
          content: {}
        400:
          description: The time entry could not be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to delete time entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or time entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
  /{bookId}/timeentries:
    post:
      tags:
      - Time entries
      summary: Creates a new time entry.
      description: |-
        Create a new time entry.

        `POST /e7e3ba02-05e2-4bea-9348-85876c9952ba/timeentries`
      operationId: CreateTimeEntry
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details of the new time entry.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryInput'
        required: true
      responses:
        201:
          description: The id of the time entry that has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: The time entry could not be created as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to create time entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
      x-codegen-request-body-name: timeEntry
  /{bookId}/timeentries/{timeEntryId}:
    patch:
      tags:
      - Time entries
      summary: Updates selected fields of a time entry.
      description: |-
        Patch an existing time entry.

        **Note:** The `Content-Type` header must be `application/merge-patch+json`.

        `PATCH /5af6572c-9771-4b86-995d-3374d3bc683c/timeentries/e6abf51e-2052-43c7-be02-4146cbfe9d00`
      operationId: PatchTimeEntry
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: timeEntryId
        in: path
        description: The time entry's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      requestBody:
        description: Details to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryPatch'
        required: true
      responses:
        204:
          description: The result of the update.
          content: {}
        400:
          description: The time entry could not be updated as the request contains
            invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to edit time entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book or time entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
        415:
          description: The request must use Content-Type `application/merge-patch+json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnsupportedMediaType'
      security:
      - oauth2: []
      x-codegen-request-body-name: timeEntry
  /{bookId}/users:
    get:
      tags:
      - Users
      summary: Gets a list of users.
      description: |-
        See [here](https://help.reckon.com/category/t3ohcrldj7) for details of paging, filtering, sorting and selecting.

        ---

        Get a paged list of users for the specified book.

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/users`

        ---

        Get a specific page of users. Find out more about [paging](https://help.reckon.com/article/6dwfu9hgta-reckon-one-api-v2-paging).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/users?page=2&perpage=2`

        ---

        Get just the required fields, e.g. id and employee. Find out more about [selecting](https://help.reckon.com/article/h9sxz6smwn-reckon-one-api-v2-selecting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/users?select=id,employee`

        ---

        Filter the results to return just the users you want. Find out more about [filtering](https://help.reckon.com/article/ksqce865me-reckon-one-api-v2-filtering).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/users?filter=employee.name eq "Joe Bloggs"`

        ---

        Sort in the required order, e.g. by last logged in. Find out more about [sorting](https://help.reckon.com/article/e0iok3ydto-reckon-one-api-v2-sorting).

        `GET /e7e3ba02-05e2-4bea-9348-85876c9952ba/users?orderby=lastLoggedInDateTime desc`
      operationId: GetUsers
      parameters:
      - name: bookId
        in: path
        description: The book's id.
        required: true
        schema:
          type: string
          format: guid
          nullable: false
      - name: page
        in: query
        description: The page to retrieve.
        schema:
          type: integer
          format: int32
          nullable: false
          default: 1
      - name: perPage
        in: query
        description: The number of users per page.
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      responses:
        200:
          description: A paged list of users for the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        401:
          description: The authentication token is missing, expired or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseUnauthorized'
        403:
          description: The user does not have permission to retrieve users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseForbidden'
        404:
          description: The specified book does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseNotFound'
      security:
      - oauth2: []
components:
  schemas:
    Books:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Book'
      description: Books.
    Book:
      required:
      - bookCreated
      - id
      - ownership
      - status
      type: object
      properties:
        id:
          type: string
          description: The book's id.
          format: guid
          example: 5c933c97-e9bf-427c-a2b5-a4ddd539d575
        name:
          type: string
          description: The book's name.
          example: My book
        status:
          type: object
          description: The book's status.
          example: Active
          $ref: '#/components/schemas/BookStatus'
        ownership:
          type: object
          description: Who owns the book.
          example: Owned
          $ref: '#/components/schemas/BookOwnership'
        country:
          type: string
          description: The book's country code.
          example: AU
        bookCreated:
          type: boolean
          description: Whether book creation has been completed.
          example: true
        products:
          type: array
          description: The products that are currently licensed.
          items:
            $ref: '#/components/schemas/BookProduct'
      description: Details of a book.
    BookStatus:
      type: string
      description: A book's status.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    BookOwnership:
      type: string
      description: Book ownership.
      enum:
      - Owned
      - Shared
      - Partner
      x-enumNames:
      - Owned
      - Shared
      - Partner
    BookProduct:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The products's id.
          format: guid
          example: 7445ce22-d894-4fe4-88ee-ed96862939ca
        name:
          type: string
          description: The product's name.
          example: InvoicingMedium
        portalProductId:
          type: string
          description: The Portal's product id.
          example: CICL0UD1M
      description: Details of a book product.
    ErrorResponseNotFound:
      required:
      - code
      type: object
      properties:
        message:
          type: string
          description: The description of the error.
          example: Resource not found.
        code:
          type: integer
          description: The HTTP status code of the error.
          format: int32
          example: 404
      description: Response sent when a 404 Forbidden error occurs.
    ErrorResponseUnauthorized:
      required:
      - code
      type: object
      properties:
        message:
          type: string
          description: The description of the error.
          example: Authorization has been denied for this request.
        code:
          type: integer
          description: The HTTP status code of the error.
          format: int32
          example: 401
      description: Response sent when a 401 Unauthorized error occurs.
    CreditNotes:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/CreditNote'
      description: A list of credit notes.
    CreditNote:
      required:
      - amountTaxStatus
      - balance
      - creditNoteDate
      - emailStatus
      - id
      - status
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: The credit note's unique id.
          format: guid
          example: 8aa81e9a-d5e9-4cdb-8079-2d7acecf35f0
        creditNoteNumber:
          type: string
          description: The credit note's number.
          example: CAN0123
        customer:
          type: object
          description: The customer that the credit note was issued to.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        billingAddress:
          type: object
          description: The address that the credit note was sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        shippingAddress:
          type: object
          description: The address that the credit note was sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        creditNoteDate:
          type: string
          description: The date of the credit note.
          format: date-time
        totalAmount:
          type: number
          description: The total amount of the credit note.
          format: decimal
          example: 110.0
        balance:
          type: number
          description: The balance that has not yet been paid by the customer.
          format: decimal
          example: 54.0
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the credit note.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        totalTaxAmount:
          type: number
          description: The total tax amount of the credit note.
          format: decimal
          example: 10.0
        status:
          type: object
          description: The status of the credit note.
          example: Approved
          $ref: '#/components/schemas/CreditNoteStatus'
        reference:
          type: string
          description: The credit note reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: object
          description: The accounts receivable ledger account.
          example:
            id: a2ac7ae9-8916-433c-8f22-e8cac71a3a37
            name: Accounts Receivable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 9c533a04-8580-4513-ab12-129d99e53b5f
            name: My classification
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        template:
          type: object
          description: The template used to print or email the credit note.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Professional Credit Note
          allOf:
          - $ref: '#/components/schemas/TemplateRef'
        transactionLinks:
          type: array
          description: Details of transactions (e.g. Invoices) that are linked to
            the credit note.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the credit note.
          items:
            $ref: '#/components/schemas/CreditNoteLineItem'
        notes:
          type: string
          description: Notes related to the credit note.
          example: This is a note.
        emailStatus:
          type: object
          description: Whether the credit note has been emailed to the customer.
          example: Sent
          $ref: '#/components/schemas/EmailStatus'
      description: A credit note.
    ContactRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a contact.
    Address:
      type: object
      properties:
        id:
          type: string
          description: The address's unique id.
        type:
          type: object
          description: The address type.
          example:
            id: ae515c41-ce3a-4097-bb53-823fbac54791
            name: Billing
          allOf:
          - $ref: '#/components/schemas/AddressTypeRef'
        line1:
          type: string
          description: Line 1 of the address.
          example: Level 2
        line2:
          type: string
          description: Line 2 of the address.
          example: 100 Pacific Highway
        line3:
          type: string
          description: Line 3 of the address.
          example: Line 3
        suburb:
          type: string
          description: The suburb.
          example: North Sydney
        town:
          type: string
          description: The town.
          example: Sydney
        state:
          type: string
          description: The state.
          example: NSW
        postcode:
          type: string
          description: The post code.
          example: "2060"
        country:
          type: string
          description: The country.
          example: Australia
      description: An address.
    AddressTypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to an address type.
    AmountTaxStatus:
      type: string
      description: The tax status of an amount.
      enum:
      - NonTaxed
      - Inclusive
      - Exclusive
      x-enumNames:
      - NonTaxed
      - Inclusive
      - Exclusive
    CreditNoteStatus:
      type: string
      description: The status of a credit note.
      enum:
      - Draft
      - Approved
      - Closed
      x-enumNames:
      - Draft
      - Approved
      - Closed
    LedgerAccountRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a ledger account.
    ClassificationRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a classification.
    TemplateRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a template.
    TransactionLink:
      required:
      - transactionId
      - transactionType
      type: object
      properties:
        linkId:
          type: string
          description: The link's unique id.
          example: EST-8cc23593-4790-4f56-b2a1-92396b3f2aaf
        transactionType:
          type: object
          description: The type of linked transaction.
          example: Estimate
          $ref: '#/components/schemas/LinkedTransactionType'
        transactionId:
          type: string
          description: The unique id of the linked transaction.
          format: guid
          example: 8cc23593-4790-4f56-b2a1-92396b3f2aaf
        transactionNumber:
          type: string
          description: The transaction number of the linked transaction.
          example: EST0028
        transactionDate:
          type: string
          description: The transaction's date.
          format: date-time
        transactionReference:
          type: string
          description: The transaction's reference.
          example: Ref 1234
        transactionAmount:
          type: number
          description: The transacion's amount.
          format: decimal
          example: 1000.0
        href:
          type: string
          description: The URL to use to retrieve the linked transaction.
          example: /a5f4afcc-e50c-4780-909d-a9fffe16ba26/estimates/8cc23593-4790-4f56-b2a1-92396b3f2aaf
      description: A transaction linked to another transaction.
    LinkedTransactionType:
      type: string
      description: Type of transaction linked to an invoice.
      enum:
      - Estimate
      - Expense
      - Timesheet
      - Receipt
      - CreditNote
      - Payment
      - Invoice
      - Journal
      x-enumNames:
      - Estimate
      - Expense
      - Timesheet
      - Receipt
      - CreditNote
      - Payment
      - Invoice
      - Journal
    CreditNoteLineItem:
      required:
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on a credit note line item.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on a credit note line item.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemAccountDetails'
        description:
          type: string
          description: The description of the item.
          example: My item
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 2d276d3a-85cb-4ae3-b23c-cfcdb26510b8
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
      description: A credit note line item.
    ProjectRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a project.
    CreditNoteLineItemItemDetails:
      type: object
      properties:
        item:
          type: object
          description: The id and full name of the item that the line relates to.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Parent item:Child item
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
      description: Details of an item used on an credit note line item.
    ItemRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to an item.
    CreditNoteLineItemAccountDetails:
      type: object
      properties:
        ledgerAccount:
          type: object
          description: The id and full name of the ledger account that the line relates
            to.
          example:
            id: 9e59aeeb-d5b4-4e4d-bed7-22bf68cd5f32
            name: Expenses:Accounting Fees
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount.
          format: decimal
          example: 110.0
      description: Details of an account used on a credit note line item.
    TaxRateRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a tax rate.
    EmailStatus:
      type: string
      description: The status of an emailed invoice.
      enum:
      - Unsent
      - Processing
      - Processed
      - Sent
      - Failed
      x-enumNames:
      - Unsent
      - Processing
      - Processed
      - Sent
      - Failed
    ErrorResponseForbidden:
      required:
      - code
      type: object
      properties:
        message:
          type: string
          description: The description of the error.
          example: User does not have permission to access this resource.
        code:
          type: integer
          description: The HTTP status code of the error.
          format: int32
          example: 403
      description: Response sent when a 403 Forbidden error occurs.
    IdResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The resource's id.
          format: guid
      description: A response that contains the resource's id.
      example:
        id: 4914677a-e30e-4cfb-aef7-15ac09c697e6
    ErrorResponse:
      required:
      - code
      type: object
      properties:
        message:
          type: string
          description: The description of the error.
          example: Something went wrong.
        code:
          type: integer
          description: The HTTP status code of the error.
          format: int32
          example: 400
        errors:
          type: array
          description: An array of specific errors where relevant.
          items:
            $ref: '#/components/schemas/ErrorDetail'
      description: Response sent when an error occurs.
    ErrorDetail:
      type: object
      properties:
        location:
          type: string
          description: The location/path of the source of the error.
          example: password
        message:
          type: string
          description: The description of what was wrong at this location.
          example: The value entered is not a valid password.
      description: Details of a specific error.
    CreditNoteInput:
      required:
      - amountTaxStatus
      - creditNoteDate
      - customer
      type: object
      properties:
        customer:
          minLength: 1
          type: string
          description: The customer that the credit note will be issued to.
          example: Company Ltd
        creditNoteDate:
          type: string
          description: The date of the credit note.
          format: date-time
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the credit note.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        reference:
          type: string
          description: The credit note reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: string
          description: |-
            The accounts receivable ledger account.
            _Note:_ It is not currently possible to create multiple Accounts Receivable accounts so this field is read-only and will be ignored.
          readOnly: true
          example: Accounts Receivable
          default: The default Accounts Receivable account
        classification:
          type: string
          description: The classification.
          example: My classification
          default: null
        template:
          type: string
          description: The template used to print or email the credit note.
          example: Professional Customer Adjustment Note
          default: The default credit note template
        lineItems:
          type: array
          description: The individual items that make up the credit note.
          items:
            $ref: '#/components/schemas/CreditNoteLineItemInput'
        notes:
          type: string
          description: Notes related to the credit note.
          example: This is a note.
          default: null
      description: Details of a credit note to create or update.
    CreditNoteLineItemInput:
      required:
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
          default: null
        itemDetails:
          type: object
          description: |-
            Details of an item used on an invoice line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemItemDetailsInput'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an invoice line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemAccountDetailsInput'
        description:
          type: string
          description: The description of the line.
          example: This is my new line
          default: null
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
          default: null
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          readOnly: true
          example: false
          default: false
      description: Details of a credit note line item to create or update.
    CreditNoteLineItemItemDetailsInput:
      required:
      - item
      type: object
      properties:
        item:
          minLength: 1
          type: string
          description: |-
            The id or full name of the item that the line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
      description: Details of an item used on a credit note line item.
    CreditNoteLineItemAccountDetailsInput:
      required:
      - ledgerAccount
      type: object
      properties:
        ledgerAccount:
          minLength: 1
          type: string
          description: |-
            The id or full name of the ledger account that the line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on a credit note line item.
    ErrorResponseUnsupportedMediaType:
      required:
      - code
      type: object
      properties:
        message:
          type: string
          description: The description of the error.
          example: application/json is not supported. Please use content-type application/merge-patch+json.
        code:
          type: integer
          description: The HTTP status code of the error.
          format: int32
          example: 415
      description: Response sent when a 415 Unsupported media type error occurs.
    CreditNotePatch:
      type: object
      properties:
        customer:
          type: string
          description: The customer that the credit note will be issued to.
          example: Company Ltd
        creditNoteDate:
          type: string
          description: The date of the credit note.
          format: date-time
        status:
          type: object
          description: |-
            The status of the credit note.
            _Note:_ This cannot be set via the POST or PUT endpoints. Please use the PATCH endpoint instead.
          example: Approved
          $ref: '#/components/schemas/CreditNoteStatus'
        reference:
          type: string
          description: The credit note reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: string
          description: |-
            The accounts receivable ledger account.
            _Note:_ It is not currently possible to create multiple Accounts Receivable accounts so this field is read-only and will be ignored.
          readOnly: true
          example: Accounts Receivable
        classification:
          type: string
          description: The classification.
          example: My classification
        template:
          type: string
          description: The template used to print or email the credit note.
          example: Professional Customer Adjustment Note
        notes:
          type: string
          description: Notes related to the credit note.
          example: This is a note.
      description: Details of a credit note to patch.
    CreditNoteLineItemPatch:
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
        itemDetails:
          type: object
          description: |-
            Details of an item used on an invoice line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemItemDetailsPatch'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an invoice line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/CreditNoteLineItemAccountDetailsPatch'
        description:
          type: string
          description: The description of the line.
          example: This is my new line
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
      description: Details of a credit note line item to create or update.
    CreditNoteLineItemItemDetailsPatch:
      type: object
      properties:
        item:
          type: string
          description: |-
            The id or full name of the item that the line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
      description: Details of an item used on a credit note line item.
    CreditNoteLineItemAccountDetailsPatch:
      type: object
      properties:
        ledgerAccount:
          type: string
          description: |-
            The id or full name of the ledger account that the line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on a credit note line item.
    StringIdResponse:
      type: object
      properties:
        id:
          type: string
          description: The resource's id.
      description: A response that contains the resource's id.
      example:
        id: ABC-4914677a-e30e-4cfb-aef7-15ac09c697e6
    CreditNoteTransactionLinkInput:
      required:
      - transactionAmount
      - transactionId
      - transactionType
      type: object
      properties:
        transactionId:
          type: string
          description: The unique id of the linked transaction.
          format: guid
          example: 8cc23593-4790-4f56-b2a1-92396b3f2aaf
        transactionAmount:
          type: number
          description: The transaction's amount.
          format: decimal
          example: 1000.0
        transactionType:
          type: object
          description: The type of linked transaction.
          example: Invoice
          $ref: '#/components/schemas/LinkedTransactionType'
      description: Details of a transaction to link to a credit note.
    CreditNoteTransactionLinkPatch:
      required:
      - transactionAmount
      type: object
      properties:
        transactionAmount:
          type: number
          description: The transaction's amount.
          format: decimal
          example: 1000.0
      description: Selected fields to update in a credit note's transaction link.
    Customers:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Customer'
      description: A list of customers.
    Customer:
      required:
      - id
      - lastModifiedDateTime
      type: object
      properties:
        id:
          type: string
          description: The organisation's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          type: string
          description: The organisation's name.
          example: My customer Pty Ltd
        branch:
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          type: string
          description: The organisation's notes.
          example: the notes
        businessNumber1:
          type: string
          description: The organisation's business number 1.
          example: "18001234"
        businessNumber2:
          type: string
          description: The organisation's business number 2.
          example: "18001234"
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            isCustomer: false
            isSupplier: true
            isEmployee: false
            isSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        status:
          type: string
          description: The organisation's status (Active or Inactive).
          example: Active
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumber'
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/Address'
        contacts:
          type: array
          description: The organisation's contacts list.
          items:
            $ref: '#/components/schemas/ContactRef'
        balance:
          type: number
          description: The organisation's current balance.
          format: decimal
          example: 5789.35
        lastModifiedDateTime:
          type: string
          description: The organisation's last modified date.
          format: date-time
        creditLimit:
          type: number
          description: The customer's credit limit (null for other types).
          format: decimal
          example: 12.5
        paymentTerms:
          type: object
          description: The customer's peyment term (null for other types).
          example:
            id: 4cafd978-14ae-4dbe-8774-e86c29fabdc4
            name: Widgets Ltd
          allOf:
          - $ref: '#/components/schemas/PaymentTermRef'
        invoiceCount:
          type: integer
          description: The total number of invoices that have been issued to the organisation.
          format: int32
          example: 42
      description: A customer
    EntityType:
      type: object
      properties:
        isCustomer:
          type: boolean
          description: Is the entity a customer.
          example: false
        isSupplier:
          type: boolean
          description: Is the entity a suppleir.
          example: false
        isEmployee:
          type: boolean
          description: Is the entity an employee.
          example: false
        isSuperfund:
          type: boolean
          description: Is the entity a superfund.
          example: false
      description: Contact's entity types.
    ElectronicAddress:
      type: object
      properties:
        id:
          type: string
          description: The electronic address's unique id.
        type:
          type: object
          description: Type of electronic address.
          example:
            id: a9628717-f060-4565-8e37-21ef430c1410
            name: Email
          allOf:
          - $ref: '#/components/schemas/ElectronicAddressTypeRef'
        address:
          type: string
          description: The electronic address.
          example: x@y.com
      description: An electronic address.
    ElectronicAddressTypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to an electronic address type.
    PhoneNumber:
      type: object
      properties:
        id:
          type: string
          description: The phone number's unique id.
        type:
          type: object
          description: The type of phone number.
          example:
            id: 87e5acc1-814b-49e6-90e8-847e3ffd7671
            name: Work
          allOf:
          - $ref: '#/components/schemas/PhoneTypeRef'
        countryCode:
          type: string
          description: The country code.
          example: "61"
        areaCode:
          type: string
          description: The area code.
          example: "02"
        number:
          type: string
          description: The number.
          example: "90101234"
        extension:
          type: string
          description: The extension.
          example: "4321"
      description: A phone number.
    PhoneTypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a phone type.
    PaymentTermRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a payment term.
    IdNameResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The resource's id.
          format: guid
        name:
          type: string
          description: The resource's display name.
      description: A response that contains the resource's id and display name.
      example:
        id: 4914677a-e30e-4cfb-aef7-15ac09c697e6
        name: Reckon co.
    CustomerInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            IsCustomer: false
            IsSupplier: true
            IsEmployee: false
            IsSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        creditLimit:
          type: number
          description: The customer's credit limit.
          format: decimal
          example: 12.5
        paymentTerms:
          type: string
          description: The customer's payment term id.
          example: 4cafd978-14ae-4dbe-8774-e86c29fabdc4
      description: Details of a customer to create or update.
    AddressInput:
      required:
      - type
      type: object
      properties:
        line1:
          maxLength: 80
          type: string
          description: Line 1 of the address.
          example: Level 2
        line2:
          maxLength: 80
          type: string
          description: Line 2 of the address.
          example: 100 Pacific Highway
        line3:
          maxLength: 80
          type: string
          description: Line 3 of the address.
          example: Line 3
        suburb:
          maxLength: 80
          type: string
          description: The suburb.
          example: North Sydney
        town:
          maxLength: 80
          type: string
          description: The town.
          example: Sydney
        state:
          maxLength: 80
          type: string
          description: The state.
          example: NSW
        postcode:
          maxLength: 30
          type: string
          description: The post code.
          example: "2060"
        country:
          maxLength: 30
          type: string
          description: The country.
          example: Australia
        type:
          minLength: 1
          type: string
          description: The id or name of the address type.
          example: Billing
      description: Details of an address to create or update.
    PhoneNumberInput:
      required:
      - type
      type: object
      properties:
        countryCode:
          maxLength: 10
          type: string
          description: The country code.
          example: "61"
        areaCode:
          maxLength: 10
          type: string
          description: The area code.
          example: "02"
        number:
          maxLength: 30
          type: string
          description: The number.
          example: "90101234"
        extension:
          maxLength: 10
          type: string
          description: The extension.
          example: "4321"
        type:
          minLength: 1
          type: string
          description: The id or name of the phone number type.
          example: Work
      description: Details of a phone number to create or update.
    ElectronicAddressInput:
      required:
      - type
      type: object
      properties:
        type:
          minLength: 1
          type: string
          description: The id or name of the electronic address type.
          example: Email
        address:
          maxLength: 100
          type: string
          description: The electronic address.
          example: x@y.com
      description: Details of an electronic address to create or update.
    CustomerPatch:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        entityTypes:
          type: object
          description: If the entity has other entity types.
          example:
            IsCustomer: false
            IsSupplier: true
          allOf:
          - $ref: '#/components/schemas/EntityTypePatch'
        creditLimit:
          type: number
          description: The customer's credit limit.
          format: decimal
          example: 12.5
        paymentTerms:
          type: string
          description: The customer's peyment term id.
          example: 4cafd978-14ae-4dbe-8774-e86c29fabdc4
      description: Details of a customer to patch.
    EntityTypePatch:
      type: object
      properties:
        isCustomer:
          type: boolean
          description: Is the entity a customer.
          example: false
        isSupplier:
          type: boolean
          description: Is the entity a supplier.
          example: false
        isEmployee:
          type: boolean
          description: Is the entity an employee.
          example: false
        isSuperfund:
          type: boolean
          description: Is the entity a superfund.
          example: false
      description: Contact's entity types.
    LinkedContactInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The contact's display name.
          example: John Doe
        salutation:
          maxLength: 100
          type: string
          description: The salutation to use in communications.
          example: Hello
        department:
          maxLength: 100
          type: string
          description: The contact's department.
          example: Accounts receivable
        position:
          maxLength: 100
          type: string
          description: The contact's position.
          example: Credit controller
        status:
          type: object
          description: The contact's status.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        notes:
          maxLength: 1000
          type: string
          description: Notes for the contact.
          example: The person to call.
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
      description: Details of a contact to create or update within an existing organisation.
    ContactStatus:
      type: string
      description: The status of a contact.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    Contact:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: string
          description: The contact's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The contact's display name.
          example: John Doe
        salutation:
          type: string
          description: The salutation to use in communications.
          example: Hello
        department:
          type: string
          description: The contact's department.
          example: Accounts receivable
        position:
          type: string
          description: The contact's position.
          example: Credit controller
        organisation:
          type: object
          description: The organisation that the contact is associated with.
          example:
            id: 4cafd978-14ae-4dbe-8774-e86c29fabdc4
            name: Widgets Ltd
          allOf:
          - $ref: '#/components/schemas/OrganisationRef'
        status:
          type: object
          description: The contact's status.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        notes:
          type: string
          description: Notes for the contact.
          example: The person to call.
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/Address'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumber'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
      description: A contact.
    OrganisationRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Link to an organisation.
    PhoneNumbers:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/PhoneNumber'
      description: A list of phone numbers.
    TypeResponse:
      type: object
      properties:
        id:
          type: string
          description: The resource's id.
        type:
          type: object
          description: Reference to a type.
          allOf:
          - $ref: '#/components/schemas/TypeRef'
      description: A response that contains the resource's type id and name.
      example:
        id: da3f3581-580e-4861-b4ba-b335e9a02356_4914677a-e30e-4cfb-aef7-15ac09c697e6
        type:
          id: 4914677a-e30e-4cfb-aef7-15ac09c697e6
          name: Email
    TypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a type.
    PhoneNumberPatch:
      type: object
      properties:
        countryCode:
          maxLength: 10
          type: string
          description: The country code.
          example: "61"
        areaCode:
          maxLength: 10
          type: string
          description: The area code.
          example: "02"
        number:
          maxLength: 30
          type: string
          description: The number.
          example: "90101234"
        extension:
          maxLength: 10
          type: string
          description: The extension.
          example: "4321"
      description: Details of a phone number to update.
    UpdatePhoneNumberInput:
      type: object
      properties:
        countryCode:
          maxLength: 10
          type: string
          description: The country code.
          example: "61"
        areaCode:
          maxLength: 10
          type: string
          description: The area code.
          example: "02"
        number:
          maxLength: 30
          type: string
          description: The number.
          example: "90101234"
        extension:
          maxLength: 10
          type: string
          description: The extension.
          example: "4321"
      description: Details of a phone number to update.
    Addresses:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Address'
      description: A list of electronic addresses.
    UpdateAddressInput:
      type: object
      properties:
        line1:
          maxLength: 80
          type: string
          description: Line 1 of the address.
          example: Level 2
        line2:
          maxLength: 80
          type: string
          description: Line 2 of the address.
          example: 100 Pacific Highway
        line3:
          maxLength: 80
          type: string
          description: Line 3 of the address.
          example: Line 3
        suburb:
          maxLength: 80
          type: string
          description: The suburb.
          example: North Sydney
        town:
          maxLength: 80
          type: string
          description: The town.
          example: Sydney
        state:
          maxLength: 80
          type: string
          description: The state.
          example: NSW
        postcode:
          maxLength: 30
          type: string
          description: The post code.
          example: "2060"
        country:
          maxLength: 30
          type: string
          description: The country.
          example: Australia
      description: Details of an address to update.
    AddressPatch:
      type: object
      properties:
        line1:
          maxLength: 80
          type: string
          description: Line 1 of the address.
          example: Level 2
        line2:
          maxLength: 80
          type: string
          description: Line 2 of the address.
          example: 100 Pacific Highway
        line3:
          maxLength: 80
          type: string
          description: Line 3 of the address.
          example: Line 3
        suburb:
          maxLength: 80
          type: string
          description: The suburb.
          example: North Sydney
        town:
          maxLength: 80
          type: string
          description: The town.
          example: Sydney
        state:
          maxLength: 80
          type: string
          description: The state.
          example: NSW
        postcode:
          maxLength: 30
          type: string
          description: The post code.
          example: "2060"
        country:
          maxLength: 30
          type: string
          description: The country.
          example: Australia
      description: Details of an address to update.
    ElectronicAddressPatch:
      type: object
      properties:
        address:
          type: string
          description: The electronic address.
          example: x@y.com
      description: Details of a electronic address to update.
    UpdateElectronicAddressInput:
      type: object
      properties:
        address:
          maxLength: 100
          type: string
          description: The electronic address.
          example: x@y.com
      description: Details of a electronic address to update.
    ElectronicAddresses:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
      description: A list of electronic addresses.
    Departments:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Department'
      description: A list of departments.
    Department:
      required:
      - createdDateTime
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The department's unique id.
          format: guid
          example: a8dbd9c4-00b3-4bbf-ae2c-224894159147
        name:
          type: string
          description: The department's unique name.
          example: Finance
        code:
          type: string
          description: The department's unique code.
          example: "1234"
        status:
          type: object
          description: The department's status.
          example: Active
          $ref: '#/components/schemas/DepartmentStatus'
        notes:
          type: string
          description: Notes about the department.
          example: This is the finance department.
        managers:
          type: array
          description: A list of managers assigned to the department.
          items:
            $ref: '#/components/schemas/EmployeeRef'
        employees:
          type: array
          description: A list of employees assigned to the department.
          items:
            $ref: '#/components/schemas/EmployeeRef'
        createdDateTime:
          type: string
          description: The date and time when the department was created.
          format: date-time
          example: 2021-10-01T10:20:46.15Z
        lastModifiedDateTime:
          type: string
          description: The date and time when the department was last modified.
          format: date-time
          example: 2021-10-02T22:12:34.95Z
      description: Details of a department.
    DepartmentStatus:
      type: string
      description: The status of a department.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    EmployeeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to an employee.
    DepartmentInput:
      required:
      - name
      - status
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 1
          type: string
          description: The department's unique name.
          example: Finance
        code:
          maxLength: 50
          type: string
          description: The department's unique code.
          example: "1234"
        status:
          type: object
          description: The department's status.
          example: Active
          $ref: '#/components/schemas/DepartmentStatus'
        notes:
          maxLength: 500
          type: string
          description: Notes about the department.
          example: This is the finance department.
        managers:
          type: array
          description: A list of managers assigned to the department.
          items:
            $ref: '#/components/schemas/DepartmentManagerInput'
        employees:
          type: array
          description: A list of employees assigned to the department.
          items:
            $ref: '#/components/schemas/DepartmentEmployeeInput'
      description: The department being created or updated.
    DepartmentManagerInput:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: A manager's Id.
          format: guid
      description: Manager belonging to department.
    DepartmentEmployeeInput:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: An employee's Id.
          format: guid
      description: Employee belonging to department.
    DepartmentPatch:
      type: object
      properties:
        name:
          maxLength: 50
          type: string
          description: The department's unique name.
          example: Finance
        code:
          maxLength: 50
          type: string
          description: The department's unique code.
          example: "1234"
        status:
          type: object
          description: The department's status.
          example: Active
          $ref: '#/components/schemas/DepartmentStatus'
        notes:
          maxLength: 500
          type: string
          description: Notes about the department.
          example: This is the finance department.
      description: ThDetails of an department to patch.
    PaymentMethods:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/PaymentMethod'
      description: Payment methods.
    PaymentMethod:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The payment method's id.
          format: guid
          example: 187e4148-22b4-45d3-873b-967faae37330
        name:
          type: string
          description: The payment method's name.
          example: MasterCard
      description: Details of a payment method.
    Payments:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Payment'
      description: A list of payments.
    Payment:
      required:
      - allocateFullAmount
      - id
      - lastModifiedDateTime
      - paymentDate
      - reconciliationStatus
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: The payments unique id.
          format: guid
          example: 9d21eace-44a1-4a1f-bfbc-90f4f7315962
        paymentNumber:
          type: string
          description: The payments number.
          example: PMNT0015
        supplier:
          type: object
          description: The supplier that made the payment.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        paymentDate:
          type: string
          description: The date of the payment.
          format: date-time
        ledgerAccount:
          type: object
          description: The id of the bank/cash/credit account where the money was
            paid from.
          example:
            id: a16f00e5-0960-4449-9fa5-53e4c76df36d
            name: Bank account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        allocateFullAmount:
          type: boolean
          description: Whether the full amount of the payment has been allocated.
          example: true
        paymentMethod:
          type: object
          description: The payment method.
          example:
            id: 8c03b982-9309-4c9d-ba7a-3f2adf9572a8
            Name: Mastercard
          allOf:
          - $ref: '#/components/schemas/PaymentMethodRef'
        reference:
          type: string
          description: The payment reference.
          example: My reference
        notes:
          type: string
          description: Notes related to the payment.
          example: This is a note.
        totalAmount:
          type: number
          description: The total amount of the bill.
          format: decimal
          example: 110.0
        reconciliationStatus:
          type: object
          description: The payments reconciliation status.
          example: Cleared
          $ref: '#/components/schemas/ReconciliationStatus'
        internalNotes:
          type: string
          description: Internal Notes related to the payment.
          example: This is an internal note.
        recurring:
          type: object
          description: Details of the recurring transaction.
          example:
            id: a4e07562-16c3-4f7e-86b9-d481ee670a8f
            name: Monthly rent
          allOf:
          - $ref: '#/components/schemas/RecurringTransactionRef'
        accountsPayableLedgerAccount:
          type: object
          description: The accounts receivable ledger account.
          example:
            id: a2ac7ae9-8916-433c-8f22-e8cac71a3a37
            name: Accounts Payable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 9c533a04-8580-4513-ab12-129d99e53b5f
            name: My classification
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        transactionLinks:
          type: array
          description: Details of transactions that the payment has been allocated
            to.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the payment.
          items:
            $ref: '#/components/schemas/PaymentLineItem'
        lastModifiedDateTime:
          type: string
          description: The last modified date of the payment
          format: date-time
      description: A Payment.
    PaymentMethodRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a payment method.
    ReconciliationStatus:
      type: string
      description: Reconciliation status.
      enum:
      - Uncleared
      - Cleared
      - Reconciled
      x-enumNames:
      - Uncleared
      - Cleared
      - Reconciled
    RecurringTransactionRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a recurring transaction.
    PaymentLineItem:
      required:
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on a payment line item.
          allOf:
          - $ref: '#/components/schemas/PaymentLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on a payment line item.
          allOf:
          - $ref: '#/components/schemas/PaymentLineItemAccountDetails'
        description:
          type: string
          description: The description of the item.
          example: My item
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 2d276d3a-85cb-4ae3-b23c-cfcdb26510b8
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 13.54
      description: A payment line item.
    PaymentLineItemItemDetails:
      type: object
      properties:
        item:
          type: object
          description: The id and full name of the item that the line relates to.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Parent item:Child item
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on a payment line item.
    PaymentLineItemAccountDetails:
      type: object
      properties:
        ledgerAccount:
          type: object
          description: The id and full name of the ledger account that the line relates
            to.
          example:
            id: 9e59aeeb-d5b4-4e4d-bed7-22bf68cd5f32
            name: Expenses:Accounting Fees
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount.
          format: decimal
          example: 110.0
      description: Details of an account used on a payment line item.
    Permissions:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            type: string
      description: List of permissions.
      example:
        list:
        - Invoices_View
        - Invoices_AddEdit
        - Receipts_View
        - Receipts_AddEdit
    Receipts:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Receipt'
      description: A list of receipts.
    Receipt:
      required:
      - allocateFullAmount
      - id
      - receiptDate
      - reconciliationStatus
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: The receipt's unique id.
          format: guid
          example: 9d21eace-44a1-4a1f-bfbc-90f4f7315962
        receiptNumber:
          type: string
          description: The receipt's number.
          example: RCPT0015
        customer:
          type: object
          description: The customer that made the payment.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        receiptDate:
          type: string
          description: The date of the receipt.
          format: date-time
        ledgerAccount:
          type: object
          description: The id of the bank/cash/credit account where the money was
            received.
          example:
            id: a16f00e5-0960-4449-9fa5-53e4c76df36d
            name: Bank account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        allocateFullAmount:
          type: boolean
          description: Whether the full amount of the receipt has been allocated.
          example: true
        paymentMethod:
          type: object
          description: The payment method.
          example:
            id: 8c03b982-9309-4c9d-ba7a-3f2adf9572a8
            Name: Mastercard
          allOf:
          - $ref: '#/components/schemas/PaymentMethodRef'
        reference:
          type: string
          description: The receipt reference.
          example: My reference
        notes:
          type: string
          description: Notes related to the receipt.
          example: This is a note.
        totalAmount:
          type: number
          description: The total amount of the invoice.
          format: decimal
          example: 110.0
        reconciliationStatus:
          type: object
          description: The receipt's reconciliation status.
          example: Cleared
          $ref: '#/components/schemas/ReconciliationStatus'
        internalNotes:
          type: string
          description: Internal Notes related to the receipt.
          example: This is an internal note.
        recurring:
          type: object
          description: Details of the recurring transaction.
          example:
            id: a4e07562-16c3-4f7e-86b9-d481ee670a8f
            name: Monthly rent
          allOf:
          - $ref: '#/components/schemas/RecurringTransactionRef'
        accountsReceivableLedgerAccount:
          type: object
          description: The accounts receivable ledger account.
          example:
            id: a2ac7ae9-8916-433c-8f22-e8cac71a3a37
            name: Accounts Receivable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 9c533a04-8580-4513-ab12-129d99e53b5f
            name: My classification
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        transactionLinks:
          type: array
          description: Details of transactions that the receipt has been allocated
            to.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the receipt.
          items:
            $ref: '#/components/schemas/ReceiptLineItem'
      description: A receipt.
    ReceiptLineItem:
      required:
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on a receipt line item.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on a receipt line item.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemAccountDetails'
        description:
          type: string
          description: The description of the item.
          example: My item
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 2d276d3a-85cb-4ae3-b23c-cfcdb26510b8
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 13.54
      description: A receipt line item.
    ReceiptLineItemItemDetails:
      type: object
      properties:
        item:
          type: object
          description: The id and full name of the item that the line relates to.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Parent item:Child item
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on a receipt line item.
    ReceiptLineItemAccountDetails:
      type: object
      properties:
        ledgerAccount:
          type: object
          description: The id and full name of the ledger account that the line relates
            to.
          example:
            id: 9e59aeeb-d5b4-4e4d-bed7-22bf68cd5f32
            name: Expenses:Accounting Fees
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount.
          format: decimal
          example: 110.0
      description: Details of an account used on a receipt line item.
    ReceiptInput:
      required:
      - customer
      - receiptDate
      - totalAmount
      type: object
      properties:
        customer:
          minLength: 1
          type: string
          description: The customer that is being invoiced.
          example: Company Ltd
        receiptDate:
          type: string
          description: The date of the receipt.
          format: date-time
        ledgerAccount:
          type: string
          description: The id or name of the bank/cash/credit account where the money
            was received.
          example: My bank account
          default: The default bank account.
        paymentMethod:
          type: string
          description: The id or name of the payment method used.
          example: Mastercard
        reference:
          maxLength: 200
          type: string
          description: The receipt reference.
          example: My reference
          default: null
        notes:
          maxLength: 255
          type: string
          description: Notes related to the receipt.
          example: This is a note.
          default: null
        totalAmount:
          type: number
          description: The total amount of the invoice.
          format: decimal
          example: 110.0
        reconciliationStatus:
          type: object
          description: |-
            The receipt's reconciliation status.
            Note that this can only be initially set to Cleared or Uncleared and that it can only be updated via a bank reconciliation.
          example: Cleared
          $ref: '#/components/schemas/ReconciliationStatus'
        internalNotes:
          maxLength: 400
          type: string
          description: Internal Notes related to the receipt.
          example: This is an internal note.
          default: null
        accountsReceivableLedgerAccount:
          type: string
          description: |-
            The accounts receivable ledger account.
            _Note:_ It is not currently possible to create multiple Accounts Receivable accounts so this field is read-only and will be ignored.
          readOnly: true
          example: Accounts Receivable
          default: The default Accounts Receivable account
        classification:
          type: string
          description: The classification.
          example: My classification
          default: null
        lineItems:
          type: array
          description: The individual items that make up the receipt.
          items:
            $ref: '#/components/schemas/ReceiptLineItemInput'
        transactionLinks:
          type: array
          description: Details of transactions that the receipt should be allocated
            to.
          items:
            $ref: '#/components/schemas/ReceiptTransactionLinkInput'
      description: Details of a receipt to create or update.
    ReceiptLineItemInput:
      required:
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
          default: null
        itemDetails:
          type: object
          description: |-
            Details of an item used on an invoice line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemItemDetailsInput'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an invoice line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemAccountDetailsInput'
        description:
          maxLength: 1000
          type: string
          description: The description of the line.
          example: This is my new line
          default: null
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
          default: null
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          readOnly: true
          example: false
          default: false
      description: Details of a receipt line item to create or update.
    ReceiptLineItemItemDetailsInput:
      required:
      - item
      type: object
      properties:
        item:
          minLength: 1
          type: string
          description: |-
            The id or full name of the item that the line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on an receipt line item.
    ReceiptLineItemAccountDetailsInput:
      required:
      - ledgerAccount
      type: object
      properties:
        ledgerAccount:
          minLength: 1
          type: string
          description: |-
            The id or full name of the ledger account that the line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an receipt line item.
    ReceiptTransactionLinkInput:
      required:
      - transactionAmount
      - transactionId
      - transactionType
      type: object
      properties:
        transactionId:
          type: string
          description: The unique id of the linked transaction.
          format: guid
          example: 8cc23593-4790-4f56-b2a1-92396b3f2aaf
        transactionAmount:
          type: number
          description: The transaction's amount.
          format: decimal
          example: 1000.0
        transactionType:
          type: object
          description: The type of linked transaction.
          example: Invoice
          $ref: '#/components/schemas/LinkedTransactionType'
      description: Details of a transaction to link to a receipt.
    ReceiptPatch:
      required:
      - totalAmount
      type: object
      properties:
        customer:
          type: string
          description: The customer that is being invoiced.
          example: Company Ltd
        receiptDate:
          type: string
          description: The date of the receipt.
          format: date-time
        ledgerAccount:
          type: string
          description: The id or name of the bank/cash/credit account where the money
            was received.
          example: My bank account
        paymentMethod:
          type: string
          description: The id or name of the payment method used.
          example: Mastercard
        reference:
          type: string
          description: The receipt reference.
          example: My reference
        notes:
          type: string
          description: Notes related to the receipt.
          example: This is a note.
        totalAmount:
          type: number
          description: The total amount of the invoice.
          format: decimal
          example: 110.0
        reconciliationStatus:
          type: object
          description: |-
            The receipt's reconciliation status.
            Note that this can only be initially set to Cleared or Uncleared and that it can only be updated via a bank reconciliation.
          example: Cleared
          $ref: '#/components/schemas/ReconciliationStatus'
        internalNotes:
          type: string
          description: Internal Notes related to the receipt.
          example: This is an internal note.
        classification:
          type: string
          description: The classification.
          example: My classification
      description: Details of a receipt to update.
    ReceiptLineItemPatch:
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
        itemDetails:
          type: object
          description: |-
            Details of an item used on an receipt line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemItemDetailsPatch'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an receipt line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ReceiptLineItemAccountDetailsPatch'
        description:
          type: string
          description: The description of the line.
          example: This is my new line
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
      description: Details of a receipt line item to update.
    ReceiptLineItemItemDetailsPatch:
      type: object
      properties:
        item:
          type: string
          description: |-
            The id or full name of the item that the invoice line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Test Item 2
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the invoice's `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on an receipt line item.
    ReceiptLineItemAccountDetailsPatch:
      type: object
      properties:
        ledgerAccount:
          type: string
          description: |-
            The id or full name of the ledger account that the invoice line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the invoice's
            `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an receipt line item.
    ReceiptTransactionLinkPatch:
      required:
      - transactionAmount
      type: object
      properties:
        transactionAmount:
          type: number
          description: The transaction's amount.
          format: decimal
          example: 1000.0
      description: Selected fields to update in receipt's transaction link.
    Roles:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Role'
      description: A list of roles.
    Role:
      required:
      - id
      - systemRole
      type: object
      properties:
        id:
          type: integer
          description: The role's unique id.
          format: int32
          example: 1532
        name:
          type: string
          description: The role's unique name.
          example: Administrator
        description:
          type: string
          description: A description of the role.
          example: These users have full access to the book. Owners of a book are
            automatically assigned to this role.
        systemRole:
          type: boolean
          description: |-
            Whether or not the role is a system role.
            System roles cannot be modified or deleted.
          example: true
        permissions:
          type: object
          description: The role's detailed permissions.
          allOf:
          - $ref: '#/components/schemas/RolePermissions'
        users:
          type: array
          description: The users that are assigned to the role.
          example:
          - id: 3072ec37-0c1f-4f5f-8f13-b058590c826f
            name: joebloggs@company.com
          items:
            $ref: '#/components/schemas/UserRef'
      description: A role.
    RolePermissions:
      type: object
      properties:
        accountEnquiryReport:
          type: object
          description: Permissions for the Account Enquiry report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        accountListReport:
          type: object
          description: Permissions for the Account List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        accounts:
          type: object
          description: Permissions for the Chart of Accounts.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        activityStatements:
          type: object
          description: Permissions for Activity Statements.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailLodge'
        agedCreditorsSummaryReport:
          type: object
          description: Permissions for the Aged Creditors summary report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        agedCreditorsTransactionsReport:
          type: object
          description: Permissions for the Aged Creditors transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        agedDebtorsSummaryReport:
          type: object
          description: Permissions for the Aged Debtors summary report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        agedDebtorsTransactionsReport:
          type: object
          description: Permissions for the Aged Debtors transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        balanceSheetReport:
          type: object
          description: Permissions for the Balance Sheet report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        bankAccounts:
          type: object
          description: Permissions for bank accounts.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForBankAccounts'
        bankPayments:
          type: object
          description: Permissions for bank payments.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        bankReconciliationReport:
          type: object
          description: Permissions for the Bank Reconciliation report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        bankStatementReport:
          type: object
          description: Permissions for the Bank Statement report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        bankTransfers:
          type: object
          description: Permissions for bank transfers.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        billListReport:
          type: object
          description: Permissions for the Bill List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        bills:
          type: object
          description: Permissions for bills.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailApprove'
        bookSettings:
          type: object
          description: Permissions for book settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        budgets:
          type: object
          description: Permissions for budgets.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        budgetsReport:
          type: object
          description: Permissions for the Budgets report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        classifications:
          type: object
          description: Permissions for classifications.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        contactDetailTypes:
          type: object
          description: Permissions for contact detail types.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        contacts:
          type: object
          description: Permissions for contacts.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        creditNotes:
          type: object
          description: Permissions for credit notes.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailApprove'
        customerListReport:
          type: object
          description: Permissions for the Customer List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        customers:
          type: object
          description: Permissions for customers.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        customerStatements:
          type: object
          description: Permissions for customer statements.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForCustomerStatements'
        customerTransactionsReport:
          type: object
          description: Permssions for the Customer Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        departments:
          type: object
          description: Permissions for departments.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        documentStorage:
          type: object
          description: Permissions for document storage.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForDocumentStorage'
        emails:
          type: object
          description: Permissions for emails.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForEmails'
        emailSettings:
          type: object
          description: Permissions for email settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        employees:
          type: object
          description: Permissions for employees.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForEmployees'
        employeeListReport:
          type: object
          description: Permissions for the Employee List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        estimateListReport:
          type: object
          description: Permissions for the Estimate List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        estimates:
          type: object
          description: Permissions for estimates.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmail'
        expenseClaimListReport:
          type: object
          description: Permissions for the Expense Claim List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        expenseClaims:
          type: object
          description: Permissions for expense claims.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailApproveManage'
        expenseClaimSettings:
          type: object
          description: Permissions for expense claim settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        expenseClaimTransactionsReport:
          type: object
          description: Permissions for the Expense Claim Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        gstSummaryReport:
          type: object
          description: Permissions for the GST Summary report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        invoiceListReport:
          type: object
          description: Permissions for the Invoice List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        invoices:
          type: object
          description: Permissions for invoices.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailApprove'
        itemListReport:
          type: object
          description: Permissions for the Item List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        items:
          type: object
          description: Permissions for items.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        journalListReport:
          type: object
          description: Permissions for the Journal List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        journals:
          type: object
          description: Permissions for journals.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintApprove'
        ledgerTransactionsReport:
          type: object
          description: Permissions for the Ledger Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        moneyInSettings:
          type: object
          description: Settings for money in settings (invoices, receipts, credit
            notes etc.).
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        moneyOutSettings:
          type: object
          description: Permissions for money out settings (bills, payments, supplier
            credit notes etc.).
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        paymentListReport:
          type: object
          description: Permissions for the Payment List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payments:
          type: object
          description: Permissions for payments.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmail'
        payrollAdjustments:
          type: object
          description: Permissions for payroll adjustments.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        payrollDetailReport:
          type: object
          description: Permissions for the Payroll Detail report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollEmployeeListReport:
          type: object
          description: Permissions for the Payroll Employee List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollItems:
          type: object
          description: Permissions for payroll pay items.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        payrollLeaveBalancesReport:
          type: object
          description: Permissions for the Payroll Leave Balances report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollPayments:
          type: object
          description: Permissions for payroll payments.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        payrollPaymentScheduleReport:
          type: object
          description: Permissions for the Payroll Payment Schedule report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollSettings:
          type: object
          description: Permissions for payroll settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        payrollSummaryReport:
          type: object
          description: Permissions for the Payroll Summary report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollTransactionSummaryReport:
          type: object
          description: Permissions for the Payroll Transaction Summary report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        payrollPaymentSummaries:
          type: object
          description: Permissions for payroll payment summaries.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        payruns:
          type: object
          description: Permissions for pay runs.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithApproveManage'
        paySlips:
          type: object
          description: Permissions for pay slips.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForPaySlips'
        profitAndLossReport:
          type: object
          description: Permissions for the Profit And Loss report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        projectListReport:
          type: object
          description: Permissions for the Project List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        projects:
          type: object
          description: Permissions for projects.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        receiptListReport:
          type: object
          description: Permissions for the Receipts List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        receipts:
          type: object
          description: Permissons for receipts.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmail'
        recurringTransactions:
          type: object
          description: Permissions for recurring transactions.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        reportSettings:
          type: object
          description: Permissions for settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        restHooks:
          type: object
          description: Permissions for REST hooks.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForRestHooks'
        roles:
          type: object
          description: Permissions for roles.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        salesByItemReport:
          type: object
          description: Permissions for the Sales By Item report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        singleTouchPayroll:
          type: object
          description: Permissions for Single Touch Payroll.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForStp'
        statementSettings:
          type: object
          description: Permissions for statements.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        superContributionsByEmployeeReport:
          type: object
          description: Permissions for the Super Contributions By Employee report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        superFunds:
          type: object
          description: Permissions for super funds.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        superStream:
          type: object
          description: Permissions for SuperStream
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSuperStream'
        superTransactionsReport:
          type: object
          description: Permissions for the Super Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        supplierCreditNotes:
          type: object
          description: Permissions for supplier credit notes.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintApprove'
        supplierListReport:
          type: object
          description: Permissions for the Supplier List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        suppliers:
          type: object
          description: Permissions for suppliers.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        supplierTransactionsReport:
          type: object
          description: Permissions for the Supplier Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        taxCodeExceptionReport:
          type: object
          description: Permissions for the Tax Code Exception report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        taxCodeListReport:
          type: object
          description: Permissions for the Tax Code List report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        taxCodeTransactionsReport:
          type: object
          description: Permissions for the Tax Code Transactions report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        taxSettings:
          type: object
          description: Permissions for tax settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForTaxSettings'
        terms:
          type: object
          description: Permissions for payment terms.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsCommon'
        timeEntries:
          type: object
          description: Permissions for time entries.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForTimeEntries'
        timeEntriesReport:
          type: object
          description: Permissions for the Time Entries report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        timeSettings:
          type: object
          description: Permissions for time settings.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForSettings'
        topCustomersReport:
          type: object
          description: Permissions for the Top 10 Customers report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        topExpenseAccountsReport:
          type: object
          description: Permissions for the Top 10 Expense Accounts report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        topIncomeAccountsReport:
          type: object
          description: Permissions for the Top 10 Income Accounts report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        topSuppliersReport:
          type: object
          description: Permissions for the Top 10 Suppliers report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        tpar:
          type: object
          description: Permissions for TPAR.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsWithPrintEmailLodge'
        transactionLineItemsReport:
          type: object
          description: Permissions for the Transaction Line Items report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        trialBalanceReport:
          type: object
          description: Permissions for the Trial Balance report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        uninvoicedAmountsByCustomerReport:
          type: object
          description: Permissions for the Uninvoiced Amounts By Customer report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        uninvoicedAmountsByProjectReport:
          type: object
          description: Permissions for the Uninvoiced Amounts By Project report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        uninvoicedTransactionsByCustomerReport:
          type: object
          description: Permissions for the Uninvoiced Amounts By Customer report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        uninvoicedTransactionsByProjectReport:
          type: object
          description: Permissions for the Uninvoiced Amounts By Project report.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForReport'
        users:
          type: object
          description: Permissions for users.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForUsers'
        vat:
          type: object
          description: Permissions for UK VAT.
          allOf:
          - $ref: '#/components/schemas/RolePermissionsForVat'
      description: Role permissions.
    RolePermissionsForReport:
      required:
      - export
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view the report.
          example: true
        export:
          type: boolean
          description: Whether the role has permission to export the report.
          example: false
      description: Role permissions for a report.
    RolePermissionsCommon:
      required:
      - create
      - delete
      - edit
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
      description: Common role permissions.
    RolePermissionsWithPrintEmailLodge:
      required:
      - create
      - delete
      - edit
      - email
      - lodge
      - print
      - view
      type: object
      properties:
        email:
          type: boolean
          description: Whether the role has permission to email.
          example: true
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        lodge:
          type: boolean
          description: Whether the role has permission to lodge.
          example: true
      description: Common role permissions plus print, email and lodge actions.
    RolePermissionsForBankAccounts:
      required:
      - create
      - delete
      - edit
      - import
      - reconcile
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        import:
          type: boolean
          description: Whether the role has permission to import bank data.
          example: true
        reconcile:
          type: boolean
          description: Whether the role has permission to reconcile a bank account.
          example: false
      description: Role permissions for bank accounts.
    RolePermissionsWithPrintEmailApprove:
      required:
      - approve
      - create
      - delete
      - edit
      - email
      - print
      - view
      type: object
      properties:
        email:
          type: boolean
          description: Whether the role has permission to email.
          example: true
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        approve:
          type: boolean
          description: Whether the role has permission to approve.
          example: false
      description: Common role permissions plus print, email and approve actions.
    RolePermissionsForSettings:
      required:
      - edit
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
      description: Role permissions for settings.
    RolePermissionsForCustomerStatements:
      required:
      - create
      type: object
      properties:
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
      description: Role permissions for customer statements.
    RolePermissionsForDocumentStorage:
      required:
      - delete
      - download
      - upload
      type: object
      properties:
        upload:
          type: boolean
          description: Whether the role has permission to upload.
          example: false
        download:
          type: boolean
          description: Whether the role has permission to download.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
      description: Role permissions for document storage.
    RolePermissionsForEmails:
      required:
      - resend
      - viewHistory
      type: object
      properties:
        viewHistory:
          type: boolean
          description: Whether the role has permission to view history.
          example: false
        resend:
          type: boolean
          description: Whether the role has permission to resend.
          example: true
      description: Role permissions for emails.
    RolePermissionsForEmployees:
      required:
      - create
      - delete
      - edit
      - editOwnDetails
      - managePayrollEmployeeDetails
      - view
      - viewOwnDetails
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        managePayrollEmployeeDetails:
          type: boolean
          description: Whether the role can manage payroll employee's details.
          example: false
        viewOwnDetails:
          type: boolean
          description: Whether the role can view own employee details.
          example: true
        editOwnDetails:
          type: boolean
          description: Whether the role can edit own employee details.
          example: true
      description: Role permissions for employees.
    RolePermissionsWithPrintEmail:
      required:
      - create
      - delete
      - edit
      - email
      - print
      - view
      type: object
      properties:
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        email:
          type: boolean
          description: Whether the role has permission to email.
          example: true
      description: Common role permissions plus print and email actions.
    RolePermissionsWithPrintEmailApproveManage:
      required:
      - approve
      - create
      - delete
      - edit
      - email
      - manage
      - print
      - view
      type: object
      properties:
        approve:
          type: boolean
          description: Whether the role has permission to approve.
          example: false
        email:
          type: boolean
          description: Whether the role has permission to email.
          example: true
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        manage:
          type: boolean
          description: Whether the role has permission to manage.
          example: false
      description: Common role permissions plus print, email, approve and manage actions.
    RolePermissionsWithPrintApprove:
      required:
      - approve
      - create
      - delete
      - edit
      - print
      - view
      type: object
      properties:
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        approve:
          type: boolean
          description: Whether the role has permission to approve.
          example: false
      description: Common role permissions plus print and approve actions.
    RolePermissionsWithApproveManage:
      required:
      - approve
      - create
      - delete
      - edit
      - manage
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        approve:
          type: boolean
          description: Whether the role has permission to approve.
          example: false
        manage:
          type: boolean
          description: Whether the role has permission to manage.
          example: false
      description: Common role permissions plus approve and manage actions.
    RolePermissionsForPaySlips:
      required:
      - email
      - manage
      - print
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        manage:
          type: boolean
          description: Whether the role has permission to manage.
          example: true
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        email:
          type: boolean
          description: Whether the role has permission to email.
          example: true
      description: Role permissions for pay slips.
    RolePermissionsForRestHooks:
      required:
      - modify
      type: object
      properties:
        modify:
          type: boolean
          description: Whether the role can modify REST hooks.
          example: false
      description: Role permissions for REST hooks.
    RolePermissionsForStp:
      required:
      - create
      - edit
      - send
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        send:
          type: boolean
          description: Whether the role has permission to send.
          example: false
      description: Role permissions for Single Touch Payroll.
    RolePermissionsForSuperStream:
      required:
      - canLodge
      - create
      - delete
      - edit
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        canLodge:
          type: boolean
          description: Whether the role has permission to lodge SuperStream.
          example: true
      description: Role permissions for SuperStream.
    RolePermissionsForTaxSettings:
      required:
      - canDeleteCodeGroup
      - edit
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        canDeleteCodeGroup:
          type: boolean
          description: Whether the role has permission to delete tax codes and tax
            groups.
          example: true
      description: Role permissions for tax settings.
    RolePermissionsForTimeEntries:
      required:
      - approve
      - assignPayItem
      - create
      - delete
      - edit
      - manage
      - print
      - view
      type: object
      properties:
        approve:
          type: boolean
          description: Whether the role has permission to approve.
          example: false
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        manage:
          type: boolean
          description: Whether the role has permission to manage.
          example: false
        assignPayItem:
          type: boolean
          description: Whether the role has permission to assign a payroll pay item
            to a time entry.
          example: true
      description: Role permissions for time entries.
    RolePermissionsForUsers:
      required:
      - create
      - delete
      - edit
      - editOtherUser
      - invite
      - view
      type: object
      properties:
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: true
        create:
          type: boolean
          description: Whether the role has permission to create.
          example: true
        edit:
          type: boolean
          description: Whether the role has permission to edit/update/modify.
          example: true
        delete:
          type: boolean
          description: Whether the role has permission to delete.
          example: false
        editOtherUser:
          type: boolean
          description: Whether the role has permission to edit another user's details.
          example: false
        invite:
          type: boolean
          description: Whether the role has permission to invite a user.
          example: true
      description: Role permissions for users.
    RolePermissionsForVat:
      required:
      - authorise
      - print
      - submit
      - view
      type: object
      properties:
        authorise:
          type: boolean
          description: Whether the role has permission to authorise.
          example: true
        print:
          type: boolean
          description: Whether the role has permission to print.
          example: true
        submit:
          type: boolean
          description: Whether the role has permission to submit.
          example: true
        view:
          type: boolean
          description: Whether the role has permission to view.
          example: false
      description: Role permissions for UK VAT.
    UserRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a user.
    SuperfundProviders:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/SuperfundProvider'
      description: A list of super fund providers.
    SuperfundProvider:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: string
          description: The super fund provider's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The super fund provider's name.
          example: My Super
        abn:
          type: string
          description: The super fund provider's ABN.
          example: "51824753556"
        status:
          type: object
          description: The super fund provider's status.
          example: Active
          $ref: '#/components/schemas/SuperfundProviderStatus'
      description: A super fund provider.
    SuperfundProviderStatus:
      type: string
      description: The status of a super fund provider.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    SuperfundProviderProducts:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/SuperfundProviderProduct'
      description: A list of a super fund provider's products.
    SuperfundProviderProduct:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The super fund provider product's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The super fund provider product's name.
          example: MySuper Balanced
        usi:
          type: string
          description: The unique superannuation identifier (USI).
          example: MYS0001BL
        spin:
          type: string
          description: The superannuation product identification number (SPIN).
          example: MYS0001BL
      description: A super fund provider's product.
    Reports:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/ReportDefinition'
      description: Reports
    ReportDefinition:
      required:
      - category
      - favourite
      - id
      type: object
      properties:
        id:
          type: string
          description: The report's unique id.
          format: guid
          example: 5e5be443-32cd-41de-bef0-537fe85ec1a0
        name:
          type: string
          description: The reports name.
          example: Account enquiry
        description:
          type: string
          description: A description of the report.
          example: This shows all entered transactions for selected accounts. This
            report is also known as a general ledger listing.
        favourite:
          type: boolean
          description: Whether the report is a favourite of the user.
          example: true
        category:
          type: object
          description: The report's category.
          example: Financial
          $ref: '#/components/schemas/ReportCategory'
      description: Details of a report definition.
    ReportCategory:
      type: string
      description: Report categories.
      enum:
      - Banking
      - VAT
      - Accountant
      - Suppliers
      - Analytics
      - Favourites
      - Advisor
      - Timesheets
      - EmployeeExpenses
      - Payroll
      - Financial
      - Customers
      - Others
      - Lists
      - Projects
      - Tax
      x-enumNames:
      - Banking
      - VAT
      - Accountant
      - Suppliers
      - Analytics
      - Favourites
      - Advisor
      - Timesheets
      - EmployeeExpenses
      - Payroll
      - Financial
      - Customers
      - Others
      - Lists
      - Projects
      - Tax
    PayrollLeaveBalancesAndAccrualValueReport:
      type: object
      properties:
        data:
          type: array
          description: The report's data.
          items:
            $ref: '#/components/schemas/LeaveBalanceItem'
        metaData:
          type: object
          description: Data about the report.
          allOf:
          - $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueMetaData'
        message:
          type: string
          description: A message that might contain warnings or additional information
            about the report contents.
          example: Additional information.
      description: The Payroll Leave Balances and Accrual report.
    LeaveBalanceItem:
      required:
      - leaveBalance
      - leaveLoadingValue
      - oteValue
      - totalValue
      type: object
      properties:
        payItem:
          type: object
          description: The pay item.
          example:
            id: 9c9456f7-c74c-4bd6-907d-7ffd9ad4acd9
            name: Annual leave
          allOf:
          - $ref: '#/components/schemas/PayItemRef'
        employee:
          type: object
          description: The employee.
          example:
            id: f757807e-a294-494e-81c9-2b2bb9fa1d37
            name: Joe Bloggs
          allOf:
          - $ref: '#/components/schemas/EmployeeRef'
        leaveBalance:
          type: number
          description: The leave balance.
          format: decimal
          example: 123.45
        leaveLoadingValue:
          type: number
          description: The leave loading currency value.
          format: decimal
          example: 3254.54
        oteValue:
          type: number
          description: The ordinary time earnings value.
          format: decimal
          example: 2376.43
        totalValue:
          type: number
          description: The total value.
          format: decimal
          example: 5630.97
      description: Details of a leave balance item.
    PayItemRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a payroll pay item.
    PayrollLeaveBalancesAndAccrualValueMetaData:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The report's unique id.
          format: guid
          example: b5dd1bd6-18f7-45ec-92a7-d32aa9d8724e
        reportName:
          type: string
          description: The report's name.
          example: Payroll leave balances and accrual value
        bookName:
          type: string
          description: The book's name.
          example: My book.
        companyName:
          type: string
          description: The company's name.
          example: My company.
        period:
          type: object
          description: The period.
          example: AsAtToday
          $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReportPeriod'
        asAtDate:
          type: string
          description: When using AsAtDate, the date that was used.
          format: date-time
      description: Meta data for the Payroll Leave Balances and Accrual report.
    PayrollLeaveBalancesAndAccrualValueReportPeriod:
      type: string
      description: Periods that can be used for the Payroll Leave Balances And Accrual
        Value report.
      enum:
      - AsAtDate
      x-enumNames:
      - AsAtDate
    PayrollLeaveBalancesAndAccrualValueReportParameters:
      type: object
      properties:
        period:
          type: object
          description: The period.
          example: AsAtDate
          $ref: '#/components/schemas/PayrollLeaveBalancesAndAccrualValueReportPeriod'
        asAtDate:
          type: string
          description: When using AsAtDate, the date to use.
          format: date-time
        leaveItems:
          type: array
          description: |-
            A list of leave item IDs to include in the report.
            If omitted, all leave items will be included.
          example:
          - a16010b7-43a0-40cc-a3de-151420659df7
          items:
            type: string
            format: guid
        employees:
          type: array
          description: |-
            A list of employee IDs to include in the report.
            If omitted, all employees will be included.
          example:
          - 3e3b17cc-9071-4822-893e-9ef67dbf572c
          items:
            type: string
            format: guid
      description: The parameters for the Payroll Leave Balances And Accrual Value
        report.
    Suppliers:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Supplier'
      description: A list of suppliers.
    Supplier:
      required:
      - id
      - lastModifiedDateTime
      type: object
      properties:
        id:
          type: string
          description: The organisation's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          type: string
          description: The organisation's name.
          example: My customer Pty Ltd
        branch:
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          type: string
          description: The organisation's notes.
          example: the notes
        businessNumber1:
          type: string
          description: The organisation's business number 1.
          example: "18001234"
        businessNumber2:
          type: string
          description: The organisation's business number 2.
          example: "18001234"
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            isCustomer: false
            isSupplier: true
            isEmployee: false
            isSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        status:
          type: string
          description: The organisation's status (Active or Inactive).
          example: Active
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumber'
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/Address'
        contacts:
          type: array
          description: The organisation's contacts list.
          items:
            $ref: '#/components/schemas/ContactRef'
        balance:
          type: number
          description: The organisation's current balance.
          format: decimal
          example: 5789.35
        lastModifiedDateTime:
          type: string
          description: The organisation's last modified date.
          format: date-time
        isTpar:
          type: boolean
          description: If the supplier is Tpar (null for other types).
          example: true
        billCount:
          type: integer
          description: The total number of bills that have been received from the
            organisation.
          format: int32
          example: 12
        bankDetails:
          type: object
          description: The supplier's bank account details.
          allOf:
          - $ref: '#/components/schemas/SupplierBankDetails'
      description: A supplier.
    SupplierBankDetails:
      type: object
      properties:
        name:
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a supplier's bank account.
    SupplierInput:
      required:
      - isTpar
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            IsCustomer: false
            IsSupplier: true
            IsEmployee: false
            IsSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        isTpar:
          type: boolean
          description: If the supplier is Tpar.
          example: true
        bankDetails:
          type: object
          description: The supplier's bank account details.
          allOf:
          - $ref: '#/components/schemas/SupplierBankDetailsInput'
      description: Details of a supplier to create or update.
    SupplierBankDetailsInput:
      type: object
      properties:
        name:
          maxLength: 50
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          maxLength: 10
          pattern: ^[0-9]*$
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          maxLength: 50
          pattern: ^[0-9]*$
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a supplier's bank account to create or update.
    SupplierPatch:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        entityTypes:
          type: object
          description: If the entity has other entity types.
          example:
            IsCustomer: false
            IsSupplier: true
          allOf:
          - $ref: '#/components/schemas/EntityTypePatch'
        isTpar:
          type: boolean
          description: If the supplier is Tpar.
          example: true
        bankDetails:
          type: object
          description: The supplier's bank account details.
          allOf:
          - $ref: '#/components/schemas/SupplierBankDetailsPatch'
      description: Details of a supplier to patch.
    SupplierBankDetailsPatch:
      type: object
      properties:
        name:
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a supplier's bank account to patch.
    Contacts:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Contact'
      description: A list of contacts.
    Superfunds:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Superfund'
      description: A list of super funds.
    Superfund:
      required:
      - id
      - lastModifiedDateTime
      type: object
      properties:
        id:
          type: string
          description: The organisation's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          type: string
          description: The organisation's name.
          example: My customer Pty Ltd
        branch:
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          type: string
          description: The organisation's notes.
          example: the notes
        businessNumber1:
          type: string
          description: The organisation's business number 1.
          example: "18001234"
        businessNumber2:
          type: string
          description: The organisation's business number 2.
          example: "18001234"
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            isCustomer: false
            isSupplier: true
            isEmployee: false
            isSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        status:
          type: string
          description: The organisation's status (Active or Inactive).
          example: Active
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumber'
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/Address'
        contacts:
          type: array
          description: The organisation's contacts list.
          items:
            $ref: '#/components/schemas/ContactRef'
        balance:
          type: number
          description: The organisation's current balance.
          format: decimal
          example: 5789.35
        lastModifiedDateTime:
          type: string
          description: The organisation's last modified date.
          format: date-time
        bankDetails:
          type: object
          description: The superfund's bank account details.
          allOf:
          - $ref: '#/components/schemas/SuperfundBankDetails'
        superfundDetails:
          type: object
          description: The superfund fund details
          allOf:
          - $ref: '#/components/schemas/SuperfundDetails'
        employees:
          type: array
          description: The linked employee's.
          items:
            $ref: '#/components/schemas/SuperfundEmployee'
      description: An organisations superfund.
    SuperfundBankDetails:
      type: object
      properties:
        name:
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a superfund's bank account.
    SuperfundDetails:
      type: object
      properties:
        superfundProvider:
          type: object
          description: The superfund provider details
          allOf:
          - $ref: '#/components/schemas/SuperfundProvider2'
        smsf:
          type: object
          description: The SMSF provider details
          allOf:
          - $ref: '#/components/schemas/SelfManagedSuperfund'
      description: Details of a superfund to create or update.
    SuperfundProvider2:
      type: object
      properties:
        fund:
          type: object
          description: The superfund provider details
          allOf:
          - $ref: '#/components/schemas/FundDetails'
        employerNumber:
          type: string
          description: APRA type employee number
          example: E123456
      description: Superfundâ€™s details
    FundDetails:
      type: object
      properties:
        id:
          type: string
          description: The super fund provider's unique id.
          format: guid
          example: c4e3cc74-8e81-4ae0-90d2-324d1e1a4479
        name:
          type: string
          description: The name of the superfund
          example: APRA Superannuation Company
      description: Class for the fund details of the superfund provider
    SelfManagedSuperfund:
      type: object
      properties:
        fundName:
          type: string
          description: The self-managed super fundâ€™s (SMSF) name.
          example: iAccess Personal Superannuation
        electronicServiceAddress:
          type: string
          description: The electronic address for service
          example: x@y.com
      description: A superfundâ€™s details.
    SuperfundEmployee:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Id of an employee.
          format: guid
          example: 21ddbc6c-0840-48b2-ac59-7dc8f2bf2e34
        name:
          type: string
          description: Name of an employee.
          example: John Smith
      description: An employee linked to a superfund.
    SuperfundInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
        entityTypes:
          type: object
          description: The organisation's entity types.
          example:
            IsCustomer: false
            IsSupplier: true
            IsEmployee: false
            IsSuperfund: false
          allOf:
          - $ref: '#/components/schemas/EntityType'
        bankDetails:
          type: object
          description: The superfund's bank account details.
          allOf:
          - $ref: '#/components/schemas/SuperfundBankDetailsInput'
        superFundDetails:
          type: object
          description: The superfund's details.
          allOf:
          - $ref: '#/components/schemas/SuperfundDetailsInput'
      description: Details of a superfund to create or update.
    SuperfundBankDetailsInput:
      type: object
      properties:
        name:
          maxLength: 50
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          maxLength: 10
          pattern: ^[0-9]*$
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          maxLength: 50
          pattern: ^[0-9]*$
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a superfund's bank account to create or update.
    SuperfundDetailsInput:
      type: object
      properties:
        superfundProvider:
          type: object
          description: The superfundProvider details
          allOf:
          - $ref: '#/components/schemas/SuperfundProviderInput'
        smsf:
          type: object
          description: The SMSF provider details
          allOf:
          - $ref: '#/components/schemas/SelfManagedSuperfundInput'
      description: Details of a superfund to create or update.
    SuperfundProviderInput:
      type: object
      properties:
        fund:
          type: string
          description: The superfund provider id
          example: 8B395C9B-1EFE-4703-8F50-00AD238A755A
        employerNumber:
          maxLength: 100
          type: string
          description: APRA type employee number
          example: E123456
      description: Superfundâ€™s details to create or update
    SelfManagedSuperfundInput:
      type: object
      properties:
        fundName:
          maxLength: 100
          type: string
          description: The SelfManagedSuperfund (SMSF) Name
          example: iAccess Personal Superannuation
        electronicServiceAddress:
          maxLength: 100
          type: string
          description: The electronic address for service
          example: x@y.com
      description: Superfundâ€™s details to create or update.
    SuperfundPatch:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: The organisation's display name.
          example: John Doe
        organisationName:
          maxLength: 100
          type: string
          description: The organisation's name.
          example: Reckon Co.
        branch:
          maxLength: 100
          type: string
          description: The organisation's branch.
          example: "1234"
        notes:
          maxLength: 1000
          type: string
          description: Notes for the organisation.
          example: The person to call.
        businessNumber1:
          maxLength: 20
          type: string
          description: The organisation's business number 1.
          example: "0218001234"
        businessNumber2:
          maxLength: 20
          type: string
          description: The organisation's business number 2.
          example: "0218001234"
        status:
          type: string
          description: The status of the organisation. (Active/Inactive)
          example: Active
        entityTypes:
          type: object
          description: If the entity has other entity types.
          example:
            IsCustomer: false
            IsSupplier: true
          allOf:
          - $ref: '#/components/schemas/EntityTypePatch'
        bankDetails:
          type: object
          description: The superfund's bank account details.
          allOf:
          - $ref: '#/components/schemas/SuperfundBankDetailsPatch'
        superFundDetails:
          type: object
          description: The superfund's details.
          allOf:
          - $ref: '#/components/schemas/SuperfundDetailsPatch'
      description: Details of the superfund to patch.
    SuperfundBankDetailsPatch:
      type: object
      properties:
        name:
          type: string
          description: The bank account's name.
          example: My bank account
        bankBranchNumber:
          type: string
          description: The bank account's branch number.
          example: "123456"
        bankAccountNumber:
          type: string
          description: The bank account's number.
          example: "444555"
      description: Details of a superfund's bank account to patch.
    SuperfundDetailsPatch:
      type: object
      properties:
        superfundProvider:
          type: object
          description: The superfundProvider details
          allOf:
          - $ref: '#/components/schemas/SuperfundProviderPatch'
        smsf:
          type: object
          description: The SMSF provider details
          allOf:
          - $ref: '#/components/schemas/SelfManagedSuperfundPatch'
      description: Details of a superfund to patch.
    SuperfundProviderPatch:
      type: object
      properties:
        fund:
          type: string
          description: The superfund provider id
          example: 8B395C9B-1EFE-4703-8F50-00AD238A755A
        employerNumber:
          type: string
          description: APRA type employee number
          example: E123456
      description: Superfundâ€™s details to patch
    SelfManagedSuperfundPatch:
      type: object
      properties:
        fundName:
          type: string
          description: The SelfManagedSuperfund (SMSF) Name
          example: iAccess Personal Superannuation
        electronicServiceAddress:
          type: string
          description: The electronic address for service
          example: x@y.com
      description: Superfundâ€™s details to patch.
    PhoneTypes:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/PhoneType'
      description: Phone types.
    PhoneType:
      required:
      - createdDateTime
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The type's id.
          format: guid
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
        createdDateTime:
          type: string
          description: The creation UTC date time.
          format: date-time
        lastModifiedDateTime:
          type: string
          description: The last modified UTC date time.
          format: date-time
      description: Details of a phone type.
      example:
        id: cced4b14-59b9-4fbc-b2b1-2cd315db2887
        name: Mobile
        description: Mobile phone
        status: Active
        createdDateTime: 2020-12-08T04:16:46.9503065+00:00
        lastModifiedDateTime: 2020-12-08T04:16:46.9503065+00:00
    TypeStatus:
      type: string
      description: Type status.
      enum:
      - Inactive
      - Active
      x-enumNames:
      - Inactive
      - Active
    PhoneTypeInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 25
          minLength: 1
          type: string
          description: The type's name.
        description:
          maxLength: 100
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of a phone type to create or update.
      example:
        name: Mobile
        description: Mobile phone
        status: Active
    PhoneTypePatch:
      type: object
      properties:
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of a phone type to create or update.
      example:
        name: Mobile
        description: Mobile phone
        status: Active
    AddressTypes:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/AddressType'
      description: Address types.
    AddressType:
      required:
      - createdDateTime
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The type's id.
          format: guid
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
        createdDateTime:
          type: string
          description: The creation UTC date time.
          format: date-time
        lastModifiedDateTime:
          type: string
          description: The last modified UTC date time.
          format: date-time
      description: Details of an address type.
      example:
        id: cced4b14-59b9-4fbc-b2b1-2cd315db2887
        name: Business
        description: Business address
        status: Active
        createdDateTime: 2020-12-08T04:16:46.9503065+00:00
        lastModifiedDateTime: 2020-12-08T04:16:46.9503065+00:00
    AddressTypeInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 25
          minLength: 1
          type: string
          description: The type's name.
        description:
          maxLength: 100
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of an address type to create or update.
      example:
        name: Business
        description: Business address
        status: Active
    AddressTypePatch:
      type: object
      properties:
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of an address type to create or update.
      example:
        name: Business
        description: Business address
        status: Active
    ContactInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The contact's display name.
          example: John Doe
        salutation:
          maxLength: 100
          type: string
          description: The salutation to use in communications.
          example: Hello
        department:
          maxLength: 100
          type: string
          description: The contact's department.
          example: Accounts receivable
        position:
          maxLength: 100
          type: string
          description: The contact's position.
          example: Credit controller
        status:
          type: object
          description: The contact's status.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        notes:
          maxLength: 1000
          type: string
          description: Notes for the contact.
          example: The person to call.
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
        organisation:
          type: string
          description: The id or name of the organisation that the contact is associated
            with.
          example: Widgets Ltd
      description: Details of a contact to create or update.
    ContactPatch:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: The contact's display name.
          example: John Doe
        salutation:
          maxLength: 100
          type: string
          description: The salutation to use in communications.
          example: Hello
        department:
          maxLength: 100
          type: string
          description: The contact's department.
          example: Accounts receivable
        position:
          maxLength: 100
          type: string
          description: The contact's position.
          example: Credit controller
        organisation:
          type: string
          description: The id or name of the organisation that the contact is associated
            with.
          example: Widgets Ltd
        status:
          type: object
          description: The contact's status.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        notes:
          maxLength: 1000
          type: string
          description: Notes for the contact.
          example: The person to call.
      description: Details of a contact to patch.
    ElectronicAddressTypes:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/ElectronicAddressType'
      description: Electronic address types.
    ElectronicAddressType:
      required:
      - createdDateTime
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The type's id.
          format: guid
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
        createdDateTime:
          type: string
          description: The creation UTC date time.
          format: date-time
        lastModifiedDateTime:
          type: string
          description: The last modified UTC date time.
          format: date-time
      description: Details of an electronic address type.
      example:
        id: cced4b14-59b9-4fbc-b2b1-2cd315db2887
        name: Email
        description: Email address
        status: Active
        createdDateTime: 2020-12-08T04:16:46.9503065+00:00
        lastModifiedDateTime: 2020-12-08T04:16:46.9503065+00:00
    ElectronicAddressTypeInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 25
          minLength: 1
          type: string
          description: The type's name.
        description:
          maxLength: 100
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of an electronic address type to create or update.
      example:
        name: Email
        description: Email address
        status: Active
    ElectronicAddressTypePatch:
      type: object
      properties:
        name:
          type: string
          description: The type's name.
        description:
          type: string
          description: The type's description.
        status:
          type: object
          description: The type's status.
          $ref: '#/components/schemas/TypeStatus'
      description: Details of an electronic address type to create or update.
      example:
        name: Email
        description: Email address
        status: Active
    LedgerAccounts:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/LedgerAccount'
      description: A list of ledger accounts.
    LedgerAccount:
      required:
      - accountType
      - id
      - isDebit
      - lastModifiedDateTime
      - sortOrder
      - status
      type: object
      properties:
        id:
          type: string
          description: The account's unique id.
          format: guid
          example: 671d6728-110b-43b3-867d-d3cdd6ff6843
        name:
          type: string
          description: The name of the account.
          example: Account name
        description:
          type: string
          description: The description of the account.
          example: Account description
        fullName:
          type: string
          description: The full name of the account.
          example: Parent account name:Account name
        isDebit:
          type: boolean
          description: Whether amounts in this account are usually debits.
          example: true
        parentLedgerAccount:
          type: object
          description: The parent ledger account if there is one.
          example:
            id: d4012795-b884-47a9-a6bb-eb4bb7d2B374
            name: Parent account name
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        sortOrder:
          type: integer
          description: The order in which the user would like to sort the account
            relative to other accounts.
          format: int32
          example: 14
        status:
          type: object
          description: The account status.
          example: Active
          $ref: '#/components/schemas/LedgerAccountStatus'
        defaultTaxRate:
          type: object
          description: The default tax rate for the account.
          example:
            id: 4fd92639-7b2b-473e-9f66-38880edaD933
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRef'
        accountType:
          type: object
          description: The account type.
          example: Income
          $ref: '#/components/schemas/LedgerAccountType'
        accountCode:
          type: string
          description: The account code.
          example: 4-0000
        exportCode:
          type: string
          description: The export code for the account.
          example: "230"
        bankAccount:
          type: object
          description: The bank account details when the `accountType` is `CurrentAsset_Bank`.
          allOf:
          - $ref: '#/components/schemas/BankAccount'
        creditAccount:
          type: object
          description: The credit account details when the `accountType` is `CurrentLiability_CreditCard`.
          allOf:
          - $ref: '#/components/schemas/CreditAccount'
        balance:
          type: number
          description: The account's balance as of now.
          format: decimal
          example: 83712.15
        lastModifiedDateTime:
          type: string
          description: The date and time when the account was last modified.
          format: date-time
          example: 2019-09-27T10:20:46.15Z
      description: Details of a ledger account.
    LedgerAccountStatus:
      type: string
      description: The status of a ledger account.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    TaxRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a tax rate.
    LedgerAccountType:
      type: string
      description: The ledger account type.
      enum:
      - Income
      - Expense
      - CurrentAsset_Other
      - CurrentLiability_Other
      - Equity
      - Income_Other
      - Expense_Other
      - Expense_CostOfGoodsSold
      - CurrentAsset_Bank
      - CurrentAsset_AccountsReceivable
      - NonCurrentAsset_Fixed
      - NonCurrentAsset_Other
      - CurrentLiability_CreditCard
      - CurrentLiability_AccountsPayable
      - NonCurrentLiability
      x-enumNames:
      - Income
      - Expense
      - CurrentAsset_Other
      - CurrentLiability_Other
      - Equity
      - Income_Other
      - Expense_Other
      - Expense_CostOfGoodsSold
      - CurrentAsset_Bank
      - CurrentAsset_AccountsReceivable
      - NonCurrentAsset_Fixed
      - NonCurrentAsset_Other
      - CurrentLiability_CreditCard
      - CurrentLiability_AccountsPayable
      - NonCurrentLiability
    BankAccount:
      required:
      - includeBalancingTransaction
      - isCash
      type: object
      properties:
        dateOpened:
          type: string
          description: When the account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        bankBranchNumber:
          type: string
          description: The branch number (BSB or Sort Code).
          example: "123456"
        bankAccountNumber:
          type: string
          description: The account number.
          example: "987654"
        openingBalance:
          type: number
          description: The opening balance, if there is one.
          format: decimal
          example: 1456.43
        isCash:
          type: boolean
          description: Whether the account is cash.
          example: false
        financialInstitution:
          type: object
          description: Details of the financial institution.
          example:
            id: 7323d45f-6432-4990-8129-bfd0f91eeeb4
            name: Westpac Banking Corporation
          allOf:
          - $ref: '#/components/schemas/FinancialInstitutionRef'
        includeBalancingTransaction:
          type: boolean
          description: Whether to include a balancing transaction.
          example: false
        payerIdentifier:
          type: string
          description: The APCA number to identify the payer.
          example: "125876"
      description: Details of a bank account.
    FinancialInstitutionRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a financial institution.
    CreditAccount:
      type: object
      properties:
        dateOpened:
          type: string
          description: When the account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        openingBalance:
          type: number
          description: The opening balance, if there is one.
          format: decimal
          example: 1456.43
      description: Details of a credit account.
    LedgerAccountInput:
      required:
      - accountType
      - name
      type: object
      properties:
        name:
          maxLength: 260
          minLength: 1
          type: string
          description: The name of the account.
          example: Widget income
        description:
          maxLength: 300
          type: string
          description: The description of the account.
          example: Income from sales of widgets
          default: empty string
        parentLedgerAccount:
          type: string
          description: The parent ledger account if there is one.
          example: Income
          default: null
        sortOrder:
          type: integer
          description: The order in which the user would like to sort the account
            relative to other accounts.
          format: int32
          example: 1
          default: 0
        status:
          type: object
          description: The account status.
          example: Active
          $ref: '#/components/schemas/LedgerAccountStatus'
        defaultTaxRate:
          type: string
          description: The default tax rate for the account.
          example: NCG
          default: null
        accountType:
          type: object
          description: The account type.
          example: Income
          $ref: '#/components/schemas/LedgerAccountType'
        accountCode:
          maxLength: 10
          type: string
          description: The account code.
          example: 2-2040
          default: null
        exportCode:
          maxLength: 30
          type: string
          description: The export code for the account.
          example: ABC-99
          default: null
        bankAccount:
          type: object
          description: The bank account details - **only** when the `accountType`
            is `CurrentAsset_Bank`.
          allOf:
          - $ref: '#/components/schemas/LedgerAccountBankInput'
        creditAccount:
          type: object
          description: The credit account details - **only** when the `accountType`
            is `CurrentLiability_CreditCard`.
          allOf:
          - $ref: '#/components/schemas/LedgerAccountCreditInput'
      description: Details of a ledger account to create or update.
    LedgerAccountBankInput:
      required:
      - includeBalancingTransaction
      type: object
      properties:
        dateOpened:
          type: string
          description: When the bank account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        bankBranchNumber:
          type: string
          description: The bank branch number (BSB in Australia, Sort Code in UK).
          example: "123456"
          default: null
        bankAccountNumber:
          type: string
          description: The bank account number.
          example: "987654"
          default: null
        openingBalance:
          type: number
          description: The bank account's opening balance.
          format: decimal
          example: 1000.0
        financialInstitution:
          type: string
          description: The id of the financial institution.
          format: guid
          example: 76efba3f-2483-4bb8-88e3-7f0786366a6c
        includeBalancingTransaction:
          type: boolean
          description: Whether to include a balancing transaction.
          example: false
        payerIdentifier:
          type: string
          description: The APCA number to identify the payer.
          example: "125876"
      description: Bank account details.
    LedgerAccountCreditInput:
      type: object
      properties:
        dateOpened:
          type: string
          description: When the credit account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        openingBalance:
          type: number
          description: The credit account's opening balance.
          format: decimal
          example: 1000.0
      description: Credit account details.
    LedgerAccountPatch:
      type: object
      properties:
        name:
          type: string
          description: The name of the account.
          example: Widget income
        description:
          type: string
          description: The description of the account.
          example: Income from sales of widgets
        parentLedgerAccount:
          type: string
          description: The parent ledger account if there is one.
          example: Income
        sortOrder:
          type: integer
          description: The order in which the user would like to sort the account
            relative to other accounts.
          format: int32
          example: 1
        status:
          type: object
          description: The account status.
          example: Active
          $ref: '#/components/schemas/LedgerAccountStatus'
        defaultTaxRate:
          type: string
          description: The default tax rate for the account.
          example: NCG
        accountCode:
          type: string
          description: The account code.
          example: 2-2040
        exportCode:
          type: string
          description: The export code for the account.
          example: ABC-99
        bankAccount:
          type: object
          description: The bank account details - **only** when the `accountType`
            is `CurrentAsset_Bank`.
          allOf:
          - $ref: '#/components/schemas/LedgerAccountBankPatch'
        creditAccount:
          type: object
          description: The credit account details - **only** when the `accountType`
            is `CurrentLiability_CreditCard`.
          allOf:
          - $ref: '#/components/schemas/LedgerAccountCreditPatch'
      description: Details of a ledger account to patch.
    LedgerAccountBankPatch:
      required:
      - includeBalancingTransaction
      type: object
      properties:
        dateOpened:
          type: string
          description: When the bank account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        bankBranchNumber:
          type: string
          description: The bank branch number (BSB in Australia, Sort Code in UK).
          example: "123456"
        bankAccountNumber:
          type: string
          description: The bank account number.
          example: "987654"
        openingBalance:
          type: number
          description: The bank account's opening balance.
          format: decimal
          example: 1000.0
        financialInstitution:
          type: string
          description: The id of the financial institution.
          format: guid
          example: 76efba3f-2483-4bb8-88e3-7f0786366a6c
        includeBalancingTransaction:
          type: boolean
          description: Whether to include a balancing transaction.
          example: false
        payerIdentifier:
          type: string
          description: The APCA number to identify the payer.
          example: "125876"
      description: Bank account details.
    LedgerAccountCreditPatch:
      type: object
      properties:
        dateOpened:
          type: string
          description: When the credit account was opened.
          format: date-time
        lockoffDate:
          type: string
          description: |-
            The date when transactions are locked.
            Transactions dated on or before this date cannot be amended.
          format: date-time
        openingBalance:
          type: number
          description: The credit account's opening balance.
          format: decimal
          example: 1000.0
      description: Credit account details.
    FinancialInstitutions:
      type: object
      properties:
        list:
          type: array
          description: The list of financial institutions.
          items:
            $ref: '#/components/schemas/FinancialInstitution'
      description: A list of financial institutions.
    FinancialInstitution:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The financial institution's unique id.
          format: guid
          example: 9192c1ea-931c-4d93-a152-ab5cc7a90045
        code:
          type: string
          description: The financial institution's unique code.
          example: WBC
        name:
          type: string
          description: The financial institution's name.
          example: Westpac Banking Corporation
      description: Details of a financial institution.
    Employees:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Employee'
      description: A list of employees.
    Employee:
      required:
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The employee's unique id.
          format: guid
          example: 99979512-98b3-42ca-a0f4-a9bd6b725857
        name:
          type: string
          description: The employee's display name.
          example: Joe Bloggs
        firstName:
          type: string
          description: The employee's first name.
          example: Joe
        surname:
          type: string
          description: The employee's last name.
          example: Bloggs
        notes:
          type: string
          description: Additional notes about the employee.
          example: Notes about the employee.
        businessNumber1:
          type: string
          description: The employee's business number 1.
          example: "14003348730"
        businessNumber2:
          type: string
          description: The employee's business number 2.
          example: "14003348731"
        addresses:
          type: array
          description: The employee's addresses.
          items:
            $ref: '#/components/schemas/Address'
        status:
          type: object
          description: The status of the employee.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddress'
        phoneNumbers:
          type: array
          description: List of phone numbers
          items:
            $ref: '#/components/schemas/PhoneNumber'
        otherEntityTypes:
          type: array
          description: A list of other entity types this employee is assigned to.
          items:
            $ref: '#/components/schemas/EntityType'
        lastModifiedDateTime:
          type: string
          description: The UTC date and time when the employee's details were last
            modified.
          format: date-time
          example: 2019-10-15T01:43:25.703Z
      description: Details of an employee.
    EmployeeInput:
      required:
      - firstName
      - name
      - surname
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The employee's display name.
          example: Joe Bloggs
        firstName:
          maxLength: 100
          minLength: 1
          type: string
          description: The employee's first name.
          example: Joe
        surname:
          maxLength: 100
          minLength: 1
          type: string
          description: The employee's last name.
          example: Bloggs
        notes:
          maxLength: 1000
          type: string
          description: Additional notes about the employee.
          example: Notes about the employee.
        businessNumber1:
          maxLength: 30
          type: string
          description: The employee's business number 1.
          example: "14003348730"
        businessNumber2:
          maxLength: 30
          type: string
          description: The employee's business number 2.
          example: "14003348731"
        status:
          type: object
          description: The status of the employee.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/AddressInput'
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumberInput'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/ElectronicAddressInput'
      description: Details of an employee.
    EmployeePatch:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: The employee's display name.
          example: Joe Bloggs
        firstName:
          maxLength: 100
          type: string
          description: The employee's first name.
          example: Joe
        surname:
          maxLength: 100
          type: string
          description: The employee's last name.
          example: Bloggs
        notes:
          maxLength: 1000
          type: string
          description: Additional notes about the employee.
          example: Notes about the employee.
        businessNumber1:
          maxLength: 30
          type: string
          description: The employee's business number 1.
          example: "14003348730"
        businessNumber2:
          maxLength: 30
          type: string
          description: The employee's business number 2.
          example: "14003348731"
        status:
          type: object
          description: The status of the employee.
          example: Active
          $ref: '#/components/schemas/ContactStatus'
      description: Details of an employee.
    ExpenseClaims:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/ExpenseClaim'
      description: A list of expense claims.
    ExpenseClaim:
      required:
      - amountTaxStatus
      - balance
      - claimDate
      - id
      - status
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: The expense claim's unique id.
          format: guid
          example: 786f3374-90ad-4670-9a91-07046e02f1a0
        claimNumber:
          type: string
          description: The expense claim's number.
          example: EXP0014
        employee:
          type: object
          description: The employee who lodged the expense claim.
          example:
            id: c826f62a-bc45-40b9-af01-2ce6f3a8f23f
            name: Joe Bloggs
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        claimDate:
          type: string
          description: The date of the expense claim.
          format: date-time
        reference:
          type: string
          description: The reference entered by the employee.
          example: My reference
        project:
          type: object
          description: The project that the expense claim relates to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        customer:
          type: object
          description: The customer that the expense claim relates to.
          example:
            id: 50383990-9147-423c-b0a5-bc08ea0b2192
            name: Customer A
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        totalAmount:
          type: number
          description: The total amount of the expense claim.
          format: decimal
          example: 110.0
        balance:
          type: number
          description: The balance that has not yet been reimbursed to the employee.
          format: decimal
          example: 34.0
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the expense claim.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        totalTaxAmount:
          type: number
          description: The total tax amount of the expense claim.
          format: decimal
          example: 10.0
        status:
          type: object
          description: The status of the expense claim.
          example: Approved
          $ref: '#/components/schemas/ExpenseClaimStatus'
        transactionLinks:
          type: array
          description: Details of transactions (e.g. payments) that are linked to
            the expense claim.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the expense claim.
          items:
            $ref: '#/components/schemas/ExpenseClaimLineItem'
        notes:
          type: string
          description: The notes entered by the employee.
          example: This is a note.
        declineReason:
          type: string
          description: When an expense claim has been declined, this field will provide
            the reason.
          example: Please attach receipts.
      description: An expense claim.
    ExpenseClaimStatus:
      type: string
      description: The status of an expense claim.
      enum:
      - Draft
      - Approved
      - Paid
      - Submitted
      - Declined
      x-enumNames:
      - Draft
      - Approved
      - Paid
      - Submitted
      - Declined
    ExpenseClaimLineItem:
      required:
      - billableStatus
      - date
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        date:
          type: string
          description: The date of the line item.
          format: date-time
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on an expense claim line item.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on an expense claim line item.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemAccountDetails'
        supplier:
          type: object
          description: The supplier that the line item relates to.
          example:
            id: 12314a3a-4934-4174-82ac-d01fece4cd1f
            name: Supplier A
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        customer:
          type: object
          description: The customer that the line item relates to.
          example:
            id: 50383990-9147-423c-b0a5-bc08ea0b2192
            name: Customer A
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        isBillable:
          type: boolean
          description: Whether the line item is billable to the customer.
          example: true
        billableStatus:
          type: object
          description: The billable status of the line item.
          example: Billable
          $ref: '#/components/schemas/BillableStatus'
        description:
          type: string
          description: The description of the expense.
          example: My expense
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 9f85a156-8a3b-449a-893b-02d603daee3b
            name: NCG
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
        notes:
          type: string
          description: Notes relating to the expense.
          example: This is what I spent
        attachments:
          type: array
          description: Document attachments related to the expense.
          example:
          - id: 4978ed8b-e8ee-4ac7-9d70-6eb8cdfdfb68
            name: My document.pdf
            url: /a5f4afcc-e50c-4780-909d-a9fffe16ba26/expenseclaims/786f3374-90ad-4670-9a91-07046e02f1a0/items/d2dbe1ff-5c32-4ee3-b333-643aae358338/attachments/4978ed8b-e8ee-4ac7-9d70-6eb8cdfdfb68
          items:
            $ref: '#/components/schemas/DocumentAttachment'
      description: An expense claim line item.
    ExpenseClaimLineItemItemDetails:
      type: object
      properties:
        item:
          type: object
          description: The id and full name of the item that the expense claim line
            relates to.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Parent item:Child item
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
      description: Details of an item used on an expense claim line item.
    ExpenseClaimLineItemAccountDetails:
      type: object
      properties:
        ledgerAccount:
          type: object
          description: The id and full name of the ledger account that the expense
            claim line relates to.
          example:
            id: 9e59aeeb-d5b4-4e4d-bed7-22bf68cd5f32
            name: Expenses:Accounting Fees
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount.
          format: decimal
          example: 110.0
      description: Details of an account used on an expense claim line item.
    BillableStatus:
      type: string
      description: The billable status.
      enum:
      - Unbillable
      - Billable
      - Invoiced
      - Billed
      x-enumNames:
      - Unbillable
      - Billable
      - Invoiced
      - Billed
    DocumentAttachment:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The attachment's unique id.
          format: guid
        name:
          type: string
          description: The attachment's name or file name.
        url:
          type: string
          description: The URL to use to retrieve the attachment.
      description: A document attachment.
    ExpenseClaimInput:
      required:
      - amountTaxStatus
      - claimDate
      - employee
      type: object
      properties:
        employee:
          minLength: 1
          type: string
          description: The employee who lodged the expense claim.
          example: Joe Bloggs
        claimDate:
          type: string
          description: The date of the expense claim.
          format: date-time
        reference:
          type: string
          description: The reference entered by the employee.
          example: My reference
          default: null
        project:
          type: string
          description: The project that the expense claim relates to.
          example: Project A
          default: null
        customer:
          type: string
          description: The customer that the expense claim relates to.
          example: Customer A
          default: null
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the invoice.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        status:
          type: object
          description: The status of the expense claim.
          example: Approved
          $ref: '#/components/schemas/ExpenseClaimStatus'
        lineItems:
          type: array
          description: The individual items that make up the expense claim.
          items:
            $ref: '#/components/schemas/ExpenseClaimLineItemInput'
        notes:
          type: string
          description: The notes entered by the employee.
          example: This is a note.
      description: Details of an expense claim to create or update.
    ExpenseClaimLineItemInput:
      required:
      - date
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        date:
          type: string
          description: The date of the line item.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
          default: The project from the expense claim header
        supplier:
          type: string
          description: The supplier that the line item relates to.
          example: Supplier A
          default: null
        customer:
          type: string
          description: The customer that the line item relates to.
          example: Customer B
          default: The customer from the expense claim header
        isBillable:
          type: boolean
          description: Whether the line item is billable to the customer.
          example: false
          default: false
        billableStatus:
          type: object
          description: The billable status of the line item.
          example: Unbillable
          $ref: '#/components/schemas/BillableStatus'
        itemDetails:
          type: object
          description: |-
            Details of an item used on an expense claim line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemItemDetailsInput'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an expense claim line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemAccountDetailsInput'
        description:
          type: string
          description: The description of the expense.
          example: This is my new line
          default: null
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: NCG
          default: null
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
          default: false
        notes:
          type: string
          description: Notes relating to the expense.
          example: Notes about this line.
          default: null
      description: Details of an expense claim line item to create or update.
    ExpenseClaimLineItemItemDetailsInput:
      required:
      - item
      type: object
      properties:
        item:
          minLength: 1
          type: string
          description: |-
            The id or full name of the item that the expense claim line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
      description: Details of an item used on an expense claim line item.
    ExpenseClaimLineItemAccountDetailsInput:
      required:
      - ledgerAccount
      type: object
      properties:
        ledgerAccount:
          minLength: 1
          type: string
          description: |-
            The id or full name of the ledger account that the expense claim line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the expense
            claim's `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an expense claim line item.
    ExpenseClaimPatch:
      type: object
      properties:
        employee:
          type: string
          description: The employee who lodged the expense claim.
          example: Joe Bloggs
        claimDate:
          type: string
          description: The date of the expense claim.
          format: date-time
          example: 2020-02-06T00:00:00Z
        reference:
          type: string
          description: The reference entered by the employee.
          example: My reference
        project:
          type: string
          description: The project that the expense claim relates to.
          example: Project A
        customer:
          type: string
          description: The customer that the expense claim relates to.
          example: Customer A
        status:
          type: object
          description: The status of the expense claim.
          example: Approved
          $ref: '#/components/schemas/ExpenseClaimStatus'
        declineReason:
          type: string
          description: |-
            The decline reason when the status is set to Declined.
            This cannot be used with any other status.
          example: Please attach receipts.
        notes:
          type: string
          description: The notes entered by the employee.
          example: This is a note.
      description: Details of an expense claim to patch.
    ExpenseClaimLineItemPatch:
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        date:
          type: string
          description: The date of the line item.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
        supplier:
          type: string
          description: The supplier that the line item relates to.
          example: Supplier A
        customer:
          type: string
          description: The customer that the line item relates to.
          example: Customer B
        isBillable:
          type: boolean
          description: Whether the line item is billable to the customer.
          example: false
        billableStatus:
          type: object
          description: The billable status of the line item.
          example: Unbillable
          $ref: '#/components/schemas/BillableStatus'
        itemDetails:
          type: object
          description: |-
            Details of an item used on an expense claim line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemItemDetailsPatch'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an expense claim line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/ExpenseClaimLineItemAccountDetailsPatch'
        description:
          type: string
          description: The description of the expense.
          example: This is my new line
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 9.09
        taxRate:
          type: string
          description: The tax rate.
          example: NCG
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
        notes:
          type: string
          description: Notes relating to the expense.
          example: Notes about this line.
      description: Details of an expense claim line item to patch.
    ExpenseClaimLineItemItemDetailsPatch:
      type: object
      properties:
        item:
          type: string
          description: |-
            The id or full name of the item that the expense claim line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
      description: Details of an item used on an expense claim line item.
    ExpenseClaimLineItemAccountDetailsPatch:
      type: object
      properties:
        ledgerAccount:
          type: string
          description: |-
            The id or full name of the ledger account that the expense claim line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the expense
            claim's `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an expense claim line item.
    AddAttachmentResponses:
      type: object
      properties:
        list:
          type: array
          description: The list of responses for each document in the request.
          items:
            $ref: '#/components/schemas/AddAttachmentResponse'
      description: A list of document attachment responses.
    AddAttachmentResponse:
      required:
      - code
      type: object
      properties:
        fileName:
          type: string
          description: The name of the document.
          example: file.pdf
        code:
          type: integer
          description: The HTTP status code for this particular document.
          format: int32
          example: 201
        error:
          type: string
          description: The error message if a document could not be attached.
          example: The document could not be attached.
        id:
          type: string
          description: The attached document's id.
          format: guid
          example: 9c9c4ad0-df3c-4790-970a-5ee1cba3076f
        url:
          type: string
          description: The URL to retrieve the document.
          example: (The full URL to download the document.)
      description: A response that contains the outcome of a document attachment request.
    HeartbeatStatus:
      type: object
      properties:
        status:
          type: string
          description: The status of the API.
        version:
          type: string
          description: The current API version.
        description:
          type: string
          description: The description of the API.
      description: The current API status.
      example:
        status: OK
        version: 1.0.5473.0
        description: R1 Public API Version 2
    Classifications:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Classification'
      description: A list of classifications.
    Classification:
      required:
      - id
      - isDefault
      - status
      type: object
      properties:
        id:
          type: string
          description: The classification's unique id.
          format: guid
          example: 8cc92cb2-a156-4677-9c09-0598a97653b6
        name:
          type: string
          description: The classification's name.
          example: Small business sales classification
        description:
          type: string
          description: The classification's description.
          example: Small business sales classification.
        status:
          type: object
          description: Active/Inactive status of the classification.
          example: Active
          $ref: '#/components/schemas/ClassificationStatus'
        isDefault:
          type: boolean
          description: Whether the classification is the default for the transaction.
          example: false
      description: A classification
    ClassificationStatus:
      type: string
      description: Classification status
      enum:
      - Inactive
      - Active
      x-enumNames:
      - Inactive
      - Active
    ClassificationInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 1
          type: string
          description: The classification's name.
          example: Small business sales classification
        description:
          maxLength: 500
          type: string
          description: The classification's description.
          example: Small business sales classification.
          default: null
        status:
          type: object
          description: Active/Inactive status of the classification.
          example: Active
          $ref: '#/components/schemas/ClassificationStatus'
        isDefault:
          type: boolean
          description: Whether the classification is the default for the transaction.
          example: false
          default: false
      description: Details of a classification to create or update.
    ClassificationPatch:
      type: object
      properties:
        name:
          type: string
          description: The classification's name.
          example: Small business sales classification
        description:
          type: string
          description: The classification's description.
          example: Small business sales classification.
        status:
          type: object
          description: Active/Inactive status of the classification.
          example: Active
          $ref: '#/components/schemas/ClassificationStatus'
        isDefault:
          type: boolean
          description: Whether the classification is the default for the transaction.
          example: false
      description: Details of the classification to patch.
    PaymentTerms:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/PaymentTerm'
      description: A list of payment terms.
    PaymentTerm:
      required:
      - id
      - isDefault
      - isDueDateWeekend
      - isIssuedWithinDays
      - issuedWithinDays
      - netDueDay
      - netDueDaySelection
      - status
      - useForInvoice
      type: object
      properties:
        id:
          type: string
          description: The payment term's unique id.
          format: guid
          example: 8cc92cb2-a156-4677-9c09-0598a97653b6
        name:
          type: string
          description: The payment term's name.
          example: Due on receipt
        description:
          type: string
          description: The payment term's description.
          example: Net due 30 days from issue
        status:
          type: object
          description: Active/Inactive status of the payment term.
          example: Active
          $ref: '#/components/schemas/PaymentTermStatus'
        isDefault:
          type: boolean
          description: Whether the payment term is the default for the transaction
            type.
          example: false
        useForInvoice:
          type: boolean
          description: Whether the payment term is used for invoice type transaction.
          example: true
        netDueDay:
          type: integer
          description: Net Due day of the payment term.
          format: int32
          example: 15
        netDueDaySelection:
          type: object
          description: The due date criteria.
          example: DaysAfterIssue
          $ref: '#/components/schemas/NetDueDateOptions'
        isDueDateWeekend:
          type: boolean
          description: Whether the due date falls on weekend. If due date is on a
            weekend, push due date to the first Monday.
          example: true
        isIssuedWithinDays:
          type: boolean
          description: Whether push invoice issue date to following month if invoice
            issued within x day(s) of the due date.
          example: true
        issuedWithinDays:
          type: integer
          description: Invoice issued within x day(s) of the due date
          format: int32
          example: 2
      description: A payment term
    PaymentTermStatus:
      type: string
      description: The status of a payment term.
      enum:
      - Inactive
      - Active
      x-enumNames:
      - Inactive
      - Active
    NetDueDateOptions:
      type: string
      description: Net due date options.
      enum:
      - DaysAfterIssue
      - DayOfMonth
      - DayOfNextMonth
      x-enumNames:
      - DaysAfterIssue
      - DayOfMonth
      - DayOfNextMonth
    PaymentTermInput:
      required:
      - name
      - netDueDay
      - netDueDaySelection
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 1
          type: string
          description: The payment term's name.
          example: Due on receipt
        description:
          maxLength: 100
          type: string
          description: The payment term's description.
          example: Net due 30 days from issue
          default: empty string
        status:
          type: object
          description: Active/Inactive status of the payment term.
          example: Active
          $ref: '#/components/schemas/PaymentTermStatus'
        isDefault:
          type: boolean
          description: Whether the payment term is the default for the transaction
            type.
          example: false
          default: false
        useForInvoice:
          type: boolean
          description: Whether the payment term is used for invoice type transaction.
          example: true
          default: true
        netDueDay:
          type: integer
          description: Net Due day of the payment term.
          format: int32
          example: 15
        netDueDaySelection:
          type: object
          description: The due date criteria.
          example: DaysAfterIssue
          $ref: '#/components/schemas/NetDueDateOptions'
        isDueDateWeekend:
          type: boolean
          description: Whether the due date falls on weekend. If due date is on a
            weekend, push due date to the first Monday.
          example: true
          default: false
        isIssuedWithinDays:
          type: boolean
          description: Whether push invoice issue date to following month if invoice
            issued within x day(s) of the due date.
          example: true
          default: false
        issuedWithinDays:
          type: integer
          description: Invoice issued within x day(s) of the due date
          format: int32
          example: 2
          default: 0
      description: Details of a payment term to create or update.
    PaymentTermPatch:
      type: object
      properties:
        name:
          type: string
          description: The payment term's name.
          example: Due on receipt
        description:
          type: string
          description: The payment term's description.
          example: Net due 30 days from issue
        status:
          type: object
          description: Active/Inactive status of the payment term.
          example: Active
          $ref: '#/components/schemas/PaymentTermStatus'
        isDefault:
          type: boolean
          description: Whether the payment term is the default for the transaction
            type.
          example: false
        useForInvoice:
          type: boolean
          description: Whether the payment term is used for invoice type transaction.
          example: true
        netDueDay:
          type: integer
          description: Net Due day of the payment term.
          format: int32
          example: 15
        netDueDaySelection:
          type: object
          description: The due date criteria.
          example: DaysAfterIssue
          $ref: '#/components/schemas/NetDueDateOptions'
        isDueDateWeekend:
          type: boolean
          description: Whether the due date falls on weekend. If due date is on a
            weekend, push due date to the first Monday.
          example: true
        isIssuedWithinDays:
          type: boolean
          description: Whether push invoice issue date to following month if invoice
            issued within x day(s) of the due date.
          example: true
        issuedWithinDays:
          type: integer
          description: Invoice issued within x day(s) of the due date
          format: int32
          example: 2
      description: Details of the payment term to patch.
    PaymentTermDueDate:
      required:
      - dueDate
      type: object
      properties:
        dueDate:
          type: string
          description: The due day of the payment term.
          format: date-time
      description: A payment term's due date
    Invoices:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Invoice'
      description: A list of invoices.
    Invoice:
      required:
      - amountTaxStatus
      - balance
      - emailStatus
      - id
      - invoiceDate
      - status
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: The invoice's unique id.
          format: guid
          example: 8aa81e9a-d5e9-4cdb-8079-2d7acecf35f0
        invoiceNumber:
          type: string
          description: The invoice's number.
          example: INV0123
        customer:
          type: object
          description: The customer that was invoiced.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        billingAddress:
          type: object
          description: The address that the invoice was sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        shippingAddress:
          type: object
          description: The address that the invoice was sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        invoiceDate:
          type: string
          description: The date of the invoice.
          format: date-time
        dueDate:
          type: string
          description: The date payment is due by.
          format: date-time
        totalAmount:
          type: number
          description: The total amount of the invoice.
          format: decimal
          example: 110.0
        invoiceDiscountAmount:
          type: number
          description: The invoice discount amount.
          format: decimal
          example: 10.0
        invoiceDiscountPercent:
          type: number
          description: The invoice discount percentage.
          format: decimal
          example: 10.0
        balance:
          type: number
          description: The balance that has not yet been paid by the customer.
          format: decimal
          example: 54.0
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the invoice.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        totalTaxAmount:
          type: number
          description: The total tax amount of the invoice.
          format: decimal
          example: 10.0
        status:
          type: object
          description: The status of the invoice.
          example: Approved
          $ref: '#/components/schemas/InvoiceStatus'
        paymentTerms:
          type: object
          description: Payment terms.
          example:
            id: 04265ebe-f6df-4f2a-8317-a7b17522067e
            name: 30 days
          allOf:
          - $ref: '#/components/schemas/PaymentTermRef'
        reference:
          type: string
          description: The invoice reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: object
          description: The accounts receivable ledger account.
          example:
            id: a2ac7ae9-8916-433c-8f22-e8cac71a3a37
            name: Accounts Receivable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 9c533a04-8580-4513-ab12-129d99e53b5f
            name: My classification
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        template:
          type: object
          description: The template used to print or email the invoice.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Professional Invoice
          allOf:
          - $ref: '#/components/schemas/TemplateRef'
        recurringTemplate:
          type: object
          description: Details of the recurring template.
          example:
            id: a4e07562-16c3-4f7e-86b9-d481ee670a8f
            name: Monthly rent
          allOf:
          - $ref: '#/components/schemas/RecurringTemplateRef'
        transactionLinks:
          type: array
          description: Details of transactions (e.g. Estimates) that are linked to
            the invoice.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the invoice.
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        notes:
          type: string
          description: Notes related to the invoice.
          example: This is a note.
        paymentDetails:
          type: string
          description: Details of how to pay the invoice.
          example: BSB 134-456, Account 987654
        emailStatus:
          type: object
          description: Whether the invoice has been emailed to the customer.
          example: Sent
          $ref: '#/components/schemas/EmailStatus'
      description: An invoice
    InvoiceStatus:
      type: string
      description: The status of an invoice.
      enum:
      - Draft
      - Approved
      - Paid
      x-enumNames:
      - Draft
      - Approved
      - Paid
    RecurringTemplateRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Reference to a recurring template.
    InvoiceLineItem:
      required:
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        parentLineId:
          type: string
          description: The parent line item's unique id.
          format: guid
          example: 80d4e5f5-6f4f-4be6-9f5a-15790f8ad402
        serviceDate:
          type: string
          description: The date when the service was provided.
          format: date-time
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on an invoice line item.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on an invoice line item.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemAccountDetails'
        description:
          type: string
          description: The description of the item.
          example: My item
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 2d276d3a-85cb-4ae3-b23c-cfcdb26510b8
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
        transactionLinks:
          type: array
          description: Details of transactions (e.g. expenses and timesheets) that
            are linked to the invoice's line items.
          items:
            $ref: '#/components/schemas/TransactionLink'
      description: An invoice line item.
    InvoiceLineItemItemDetails:
      type: object
      properties:
        item:
          type: object
          description: The id and full name of the item that the line relates to.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Parent item:Child item
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        price:
          type: number
          description: The price of each item.
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on an invoice line item.
    InvoiceLineItemAccountDetails:
      type: object
      properties:
        ledgerAccount:
          type: object
          description: The id and full name of the ledger account that the line relates
            to.
          example:
            id: 9e59aeeb-d5b4-4e4d-bed7-22bf68cd5f32
            name: Expenses:Accounting Fees
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        quantity:
          type: number
          description: The quantity sold.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount.
          format: decimal
          example: 110.0
      description: Details of an account used on an invoice line item.
    InvoicesSummary:
      required:
      - overdueInvoiceAmount
      - overdueInvoiceCount
      - totalInvoiceAmount
      - totalInvoiceCount
      - unpaidInvoiceAmount
      - unpaidInvoiceCount
      type: object
      properties:
        totalInvoiceCount:
          type: integer
          description: The total number of invoices.
          format: int32
          example: 117
        totalInvoiceAmount:
          type: number
          description: The total monetary amount of included invoices.
          format: decimal
          example: 12053.87
        unpaidInvoiceCount:
          type: integer
          description: The total number of unpaid invoices.
          format: int32
          example: 42
        unpaidInvoiceAmount:
          type: number
          description: The total monetary amount of unpaid invoices.
          format: decimal
          example: 8053.87
        overdueInvoiceCount:
          type: integer
          description: The total number of unpaid invoices that are overdue.
          format: int32
          example: 10
        overdueInvoiceAmount:
          type: number
          description: The total monetary amount of unpaid invoices that are overdue.
          format: decimal
          example: 5981.35
      description: Summary of a book's invoices.
    InvoiceInput:
      required:
      - amountTaxStatus
      - customer
      - invoiceDate
      type: object
      properties:
        customer:
          minLength: 1
          type: string
          description: The customer that is being invoiced.
          example: Company Ltd
        invoiceDate:
          type: string
          description: The date of the invoice.
          format: date-time
        dueDate:
          type: string
          description: The date payment is due by.
          format: date-time
        invoiceDiscountAmount:
          type: number
          description: The invoice discount amount.
          format: decimal
          example: 10.0
        invoiceDiscountPercent:
          type: number
          description: The invoice discount percentage.
          format: decimal
          example: 7.5
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the invoice.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        paymentTerms:
          type: string
          description: Payment terms.
          example: 30 days net
          default: The customer's default payment terms
        reference:
          type: string
          description: The invoice reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: string
          description: |-
            The accounts receivable ledger account.
            _Note:_ It is not currently possible to create multiple Accounts Receivable accounts so this field is read-only and will be ignored.
          readOnly: true
          example: Accounts Receivable
          default: The default Accounts Receivable account
        classification:
          type: string
          description: The classification.
          example: My classification
          default: null
        template:
          type: string
          description: The template used to print or email the invoice.
          example: Professional invoice
          default: The default invoice template
        lineItems:
          type: array
          description: The individual items that make up the invoice.
          items:
            $ref: '#/components/schemas/InvoiceLineItemInput'
        notes:
          type: string
          description: Notes related to the invoice.
          example: This is a note.
          default: null
        paymentDetails:
          type: string
          description: Details of how to pay the invoice.
          example: BSB 134-456, Account 987654
          default: null
      description: Details of an invoice to create or update.
    InvoiceLineItemInput:
      required:
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        serviceDate:
          type: string
          description: The date when the service was provided.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
          default: null
        itemDetails:
          type: object
          description: |-
            Details of an item used on an invoice line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemItemDetailsInput'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an invoice line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemAccountDetailsInput'
        description:
          type: string
          description: The description of the line.
          example: This is my new line
          default: null
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
          default: null
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          readOnly: true
          example: false
          default: false
      description: Details of an invoice line item to create or update.
    InvoiceLineItemItemDetailsInput:
      required:
      - item
      type: object
      properties:
        item:
          minLength: 1
          type: string
          description: |-
            The id or full name of the item that the line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on an invoice line item.
    InvoiceLineItemAccountDetailsInput:
      required:
      - ledgerAccount
      type: object
      properties:
        ledgerAccount:
          minLength: 1
          type: string
          description: |-
            The id or full name of the ledger account that the line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an invoice line item.
    InvoiceConvertFromInput:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: The Id of the object that needs to be converted into an invoice.
          format: guid
          example: 02eef473-5ebc-4d4d-aab6-0e5bfc1b3bad
        type:
          type: object
          description: The types of the object that needs to be converted into an
            invoice, the object can be an estimate, sales order and etc.
          example: Estimate
          $ref: '#/components/schemas/InvoiceConvertFromType'
      description: Details of an invoice to create from an estimate, sales order and
        etc.
    InvoiceConvertFromType:
      type: string
      description: Types of an invoice to create from, which can be an estimate, sales
        order and etc.
      enum:
      - Estimate
      x-enumNames:
      - Estimate
    InvoicePatch:
      type: object
      properties:
        customer:
          type: string
          description: The customer that is being invoiced.
          example: Company Ltd
        invoiceDate:
          type: string
          description: The date of the invoice.
          format: date-time
        dueDate:
          type: string
          description: The date payment is due by.
          format: date-time
        invoiceDiscountAmount:
          type: number
          description: The invoice discount amount.
          format: decimal
          example: 10.0
        invoiceDiscountPercent:
          type: number
          description: The invoice discount percentage.
          format: decimal
          example: 7.5
        status:
          type: object
          description: The status of the invoice.
          example: Approved
          $ref: '#/components/schemas/InvoiceStatus'
        paymentTerms:
          type: string
          description: Payment terms.
          example: 30 days net
        reference:
          type: string
          description: The invoice reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: string
          description: |-
            The accounts receivable ledger account.
            _Note:_ It is not currently possible to create multiple Accounts Receivable accounts so this field is read-only and will be ignored.
          readOnly: true
          example: Accounts Receivable
        classification:
          type: string
          description: The classification.
          example: My classification
        template:
          type: string
          description: The template used to print or email the invoice.
          example: Professional invoice
        notes:
          type: string
          description: Notes related to the invoice.
          example: This is a note.
        paymentDetails:
          type: string
          description: Details of how to pay the invoice.
          example: BSB 134-456, Account 987654
      description: Details of an invoice to patch.
    EmailInput:
      required:
      - body
      - subject
      type: object
      properties:
        toAddresses:
          type: array
          description: A list of "To" addresses.
          example:
          - me@mycompany.com
          items:
            type: string
        ccAddresses:
          type: array
          description: A list of "CC" addresses.
          example:
          - other@othercompany.com
          items:
            type: string
        bccAddresses:
          type: array
          description: A list of "BCC" addresses.
          example:
          - hidden@hiddencompany.com
          items:
            type: string
        subject:
          maxLength: 200
          minLength: 1
          type: string
          description: The email subject.
          example: A document for you
        body:
          minLength: 1
          type: string
          description: The email body.
          example: Here is your document.
        documentNumber:
          type: string
          description: The number of the document that the email relates to.
          example: DOC1234
      description: Details of an email to send.
    Email:
      type: object
      properties:
        toAddresses:
          type: array
          description: A list of "To" addresses.
          example:
          - me@mycompany.com
          items:
            type: string
        ccAddresses:
          type: array
          description: A list of "CC" addresses.
          example:
          - other@othercompany.com
          items:
            type: string
        bccAddresses:
          type: array
          description: A list of "BCC" addresses.
          example:
          - hidden@hiddencompany.com
          items:
            type: string
        subject:
          type: string
          description: The email subject.
          example: A document for you
        body:
          type: string
          description: The email body.
          example: Here is your document.
        documentNumber:
          type: string
          description: The number of the document that the email relates to.
          example: DOC1234
      description: Details of an email.
    InvoiceLineItemPatch:
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 2
        serviceDate:
          type: string
          description: The date when the service was provided.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project that the line item relates to.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: Project A:Project B:Project C
        itemDetails:
          type: object
          description: |-
            Details of an item used on an invoice line item.
            This must be omitted if `accountDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemItemDetailsPatch'
        accountDetails:
          type: object
          description: |-
            Details of an account used on an invoice line item.
            This must be omitted if `itemDetails` have been provided.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemAccountDetailsPatch'
        description:
          type: string
          description: The description of the line.
          example: This is my new line
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxRate:
          type: string
          description: The tax rate.
          example: GST
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
      description: Details of an invoice to patch.
    InvoiceLineItemItemDetailsPatch:
      type: object
      properties:
        item:
          type: string
          description: |-
            The id or full name of the item that the invoice line relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Test Item 2
        price:
          type: number
          description: The price of each item including or excluding tax (depending
            on the invoice's `amountTaxStatus`).
          format: decimal
          example: 5.5
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        discountAmount:
          type: number
          description: The total discount for the line item.
          format: decimal
          example: 10.0
        discountPercent:
          type: number
          description: The discount percentage for the line item.
          format: decimal
          example: 25.0
      description: Details of an item used on an invoice line item.
    InvoiceLineItemAccountDetailsPatch:
      type: object
      properties:
        ledgerAccount:
          type: string
          description: |-
            The id or full name of the ledger account that the invoice line relates to.
            Note that the full name includes the name(s) of any parent account(s) separated by colons.
          example: Income:Sub income
        quantity:
          type: number
          description: The quantity purchased.
          format: decimal
          example: 1.0
        amount:
          type: number
          description: The amount including or excluding tax (depending on the invoice's
            `amountTaxStatus`).
          format: decimal
          example: 110.0
      description: Details of an account used on an invoice line item.
    RecurringInvoiceTemplate:
      required:
      - emailAutomatically
      - endOfSchedule
      - frequencyPeriod
      - frequencyQuantity
      - id
      - startDate
      - status
      - useLastDayOfEachMonth
      type: object
      properties:
        id:
          type: string
          description: The recurring template's unique id.
          format: guid
          example: e58acbf3-8ef1-49b4-b0a8-719338f43a92
        name:
          type: string
          description: The recurring template's name.
          example: Recurring invoice for Company Ltd.
        frequencyQuantity:
          type: integer
          description: The number of days, weeks or months between each occurrence.
          format: int32
          example: 2
        frequencyPeriod:
          type: object
          description: The period of period between each occurrence.
          example: Weeks
          $ref: '#/components/schemas/FrequencyPeriod'
        startDate:
          type: string
          description: The date of the first occurrence.
          format: date-time
        endOfSchedule:
          type: object
          description: When to stop generating recurring transactions.
          example: AtDate
          $ref: '#/components/schemas/FrequencyEndType'
        endAfterOccurrences:
          type: integer
          description: Ends once the defined number of occurrences have occurred.
          format: int32
          example: 10
        endAfterDate:
          type: string
          description: Ends once the defined date has been reached.
          format: date-time
        useLastDayOfEachMonth:
          type: boolean
          description: Whether to always use the last day of each month for each occurrence.
          example: false
        numberOfOccurrencesRemaining:
          type: integer
          description: The number of occurrences remaining.
          format: int32
          example: 5
        nextTransactionDate:
          type: string
          description: The date of the next occurrence.
          format: date-time
        status:
          type: object
          description: The recurring invoice's status.
          example: Active
          $ref: '#/components/schemas/RecurringTemplateStatus'
        emailAutomatically:
          type: boolean
          description: Whether to automatically email each occurrence.
          example: true
        invoice:
          type: object
          description: Details of the recurring invoice.
          allOf:
          - $ref: '#/components/schemas/RecurringInvoiceTemplateDetails'
      description: Recurring invoice template.
    FrequencyPeriod:
      type: string
      description: Frequency period for a recurring template.
      enum:
      - Unknown
      - Days
      - Weeks
      - Months
      x-enumNames:
      - Unknown
      - Days
      - Weeks
      - Months
    FrequencyEndType:
      type: string
      description: Frequency end type for a recurring template.
      enum:
      - Unknown
      - After
      - AtDate
      - Never
      x-enumNames:
      - Unknown
      - After
      - AtDate
      - Never
    RecurringTemplateStatus:
      type: string
      description: Recurring template status.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    RecurringInvoiceTemplateDetails:
      required:
      - amountTaxStatus
      - totalAmount
      type: object
      properties:
        customer:
          type: object
          description: The customer that will be invoiced.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        billingAddress:
          type: object
          description: The address that the invoice will be sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        shippingAddress:
          type: object
          description: The address that the goods/service will be sent to.
          allOf:
          - $ref: '#/components/schemas/Address'
        totalAmount:
          type: number
          description: The total amount of the invoice.
          format: decimal
          example: 110.0
        invoiceDiscountAmount:
          type: number
          description: The invoice discount amount.
          format: decimal
          example: 10.0
        invoiceDiscountPercent:
          type: number
          description: The invoice discount percentage.
          format: decimal
          example: 10.0
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the invoice.
          example: Inclusive
          $ref: '#/components/schemas/AmountTaxStatus'
        totalTaxAmount:
          type: number
          description: The total tax amount of the invoice.
          format: decimal
          example: 10.0
        paymentTerms:
          type: object
          description: Payment terms.
          example:
            id: 04265ebe-f6df-4f2a-8317-a7b17522067e
            name: 30 days
          allOf:
          - $ref: '#/components/schemas/PaymentTermRef'
        reference:
          type: string
          description: The invoice reference.
          example: My reference
        accountsReceivableLedgerAccount:
          type: object
          description: The accounts receivable ledger account.
          example:
            id: a2ac7ae9-8916-433c-8f22-e8cac71a3a37
            name: Accounts Receivable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 9c533a04-8580-4513-ab12-129d99e53b5f
            name: My classification
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        template:
          type: object
          description: The template used to print or email the invoice.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Professional Invoice
          allOf:
          - $ref: '#/components/schemas/TemplateRef'
        transactionLinks:
          type: array
          description: Details of transactions (e.g. Invoices) that are linked to
            the recurring template.
          items:
            $ref: '#/components/schemas/TransactionLink'
        lineItems:
          type: array
          description: The individual items that make up the invoice.
          items:
            $ref: '#/components/schemas/RecurringInvoiceLineItemTemplateDetails'
        notes:
          type: string
          description: Notes related to the invoice.
          example: This is a note.
        paymentDetails:
          type: string
          description: Details of how to pay the invoice.
          example: BSB 134-456, Account 987654
      description: Details of the recurring invoice.
    RecurringInvoiceLineItemTemplateDetails:
      required:
      - lineId
      - lineNumber
      type: object
      properties:
        lineNumber:
          type: integer
          description: The line number.
          format: int32
          example: 1
        lineId:
          type: string
          description: The line item's unique id.
          format: guid
          example: d2dbe1ff-5c32-4ee3-b333-643aae358338
        parentLineId:
          type: string
          description: The parent line item's unique id.
          format: guid
          example: 80d4e5f5-6f4f-4be6-9f5a-15790f8ad402
        project:
          type: object
          description: The id and full name of the project that the line item relates
            to.
          example:
            id: 40f4ab48-4be1-4b47-842a-dc9b3973b3fd
            name: Project A:Project B
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        itemDetails:
          type: object
          description: Details of an item used on an invoice line item.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemItemDetails'
        accountDetails:
          type: object
          description: Details of an account used on an invoice line item.
          allOf:
          - $ref: '#/components/schemas/InvoiceLineItemAccountDetails'
        description:
          type: string
          description: The description of the item.
          example: My item
        taxRate:
          type: object
          description: The tax rate.
          example:
            id: 2d276d3a-85cb-4ae3-b23c-cfcdb26510b8
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
        taxAmount:
          type: number
          description: The tax amount.
          format: decimal
          example: 10.0
        taxIsModified:
          type: boolean
          description: Whether the tax amount has been modified.
          example: false
      description: Details of a recurring invoice line item.
    Projects:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Project'
      description: A list of projects.
    Project:
      required:
      - amountTaxStatus
      - id
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The project's unique id.
          format: guid
          example: 156871D3-DFDD-4C4D-9331-FD964AA73AB6
        name:
          type: string
          description: The project's name.
          example: My Project
        fullName:
          type: string
          description: The project's full name.
          example: Parent Project/Child Project
        parentProject:
          type: object
          description: The parent project.
          example:
            id: 076A532A-47FA-4BB8-B91F-D3752B5CBD68
            name: Parent Project
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        status:
          type: object
          description: The projects status.
          $ref: '#/components/schemas/ProjectStatus'
        startDate:
          type: string
          description: The date the project starts.
          format: date-time
        endDate:
          type: string
          description: The date the project ends.
          format: date-time
        description:
          type: string
          description: A description of the project.
          example: This is a description of the project.
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the project.
          example: Inclusive
          $ref: '#/components/schemas/ProjectAmountTaxStatus'
        customers:
          type: array
          description: Customers linked to the project.
          items:
            $ref: '#/components/schemas/ProjectCustomer'
        suppliers:
          type: array
          description: Suppliers linked to the project.
          items:
            $ref: '#/components/schemas/ProjectSupplier'
        items:
          type: array
          description: Items used in the project.
          items:
            $ref: '#/components/schemas/ProjectItem'
        lastModifiedDateTime:
          type: string
          description: Timestamp of when project record was last modified.
          format: date-time
      description: A project
    ProjectStatus:
      type: string
      description: The status of a project.
      enum:
      - Active
      - Inactive
      - Cancelled
      - Completed
      x-enumNames:
      - Active
      - Inactive
      - Cancelled
      - Completed
    ProjectAmountTaxStatus:
      type: string
      description: The tax status of an item's amount.
      enum:
      - Inclusive
      - Exclusive
      x-enumNames:
      - Inclusive
      - Exclusive
    ProjectCustomer:
      required:
      - lineId
      - weighting
      type: object
      properties:
        lineId:
          type: string
          description: Record identifier.
          format: guid
          example: F08AE449-20E0-4B5D-B9A5-F032465A85A3
        customer:
          type: object
          description: The customer.
          example:
            id: fa900bde-b588-4088-be5f-63375f6a693f
            name: Company Ltd
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        weighting:
          type: number
          description: Weighting.
          format: decimal
          example: 50.0
      description: A customer linked to a project.
    ProjectSupplier:
      required:
      - lineId
      - weighting
      type: object
      properties:
        lineId:
          type: string
          description: Record identifier.
          format: guid
          example: F05D36E3-9CCD-4141-8074-D0540D0E5212
        supplier:
          type: object
          description: The supplier.
          example:
            id: a7b9a76f-8e22-43f0-a569-46754b6b6a06
            name: ACME
          allOf:
          - $ref: '#/components/schemas/ContactRef'
        weighting:
          type: number
          description: Weighting.
          format: decimal
          example: 75.5
      description: A supplier linked to a project.
    ProjectItem:
      required:
      - lineId
      type: object
      properties:
        lineId:
          type: string
          description: Record identifier.
          format: guid
          example: 016821B8-BE1E-4215-AEB0-F413F2919C9A
        item:
          type: object
          description: The item.
          example:
            id: fae9eb95-6878-442a-8f33-950b59420380
            name: Item 1
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        description:
          type: string
          description: Description of the linked item.
          example: Some lumber.
        regularRate:
          type: number
          description: Rate at which item is usually charged.
          format: decimal
          example: 150.0
        projectRate:
          type: number
          description: Rate at which item is charged for this project.
          format: decimal
          example: 175.0
        taxRate:
          type: object
          description: Tax rate of item.
          example:
            id: 15D7ACE9-DD96-4BAC-8E74-BFA61797BE09
            name: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
      description: An item linked to a project.
    ProjectInput:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 300
          minLength: 1
          type: string
          description: Name of project.
          example: Granny flat
        status:
          type: object
          description: Status of project.
          example: Active
          $ref: '#/components/schemas/ProjectStatus'
        amountTaxStatus:
          type: object
          description: |-
            The amount tax status of the amounts in the project.
            If this field is omitted, the value from the book's tax settings will be used.
          example: Inclusive
          $ref: '#/components/schemas/ProjectAmountTaxStatus'
        parentProject:
          type: string
          description: The parent project.
          example: The parent project
          default: null
        startDate:
          type: string
          description: The date the project starts.
          format: date-time
        endDate:
          type: string
          description: The date the project ends.
          format: date-time
        description:
          type: string
          description: A description of the project.
          example: This is a description of the project.
          default: null
        items:
          type: array
          description: Items used in the project.
          items:
            $ref: '#/components/schemas/ProjectItemInput'
        customers:
          type: array
          description: Customers linked to the project.
          items:
            $ref: '#/components/schemas/ProjectCustomerInput'
        suppliers:
          type: array
          description: Suppliers linked to the project.
          items:
            $ref: '#/components/schemas/ProjectSupplierInput'
      description: Details of a project to create or update.
    ProjectItemInput:
      required:
      - item
      type: object
      properties:
        item:
          minLength: 1
          type: string
          description: The id or name of the item.
          example: Lumber
        projectRate:
          type: number
          description: Rate at which item is charged for this project.
          format: decimal
          example: 199.99
      description: Details of a project item to create or update.
    ProjectCustomerInput:
      required:
      - customer
      type: object
      properties:
        weighting:
          type: number
          description: Weighting assigned to contact.
          format: decimal
          example: 75.0
        customer:
          minLength: 1
          type: string
          description: The id or name of the customer.
          example: Customer A
      description: Details of a project customer to create or update.
    ProjectSupplierInput:
      required:
      - supplier
      type: object
      properties:
        weighting:
          type: number
          description: Weighting assigned to contact.
          format: decimal
          example: 75.0
        supplier:
          minLength: 1
          type: string
          description: The id or name of the supplier.
          example: Supplier A
      description: Details of a project supplier to create or update.
    ProjectPatch:
      type: object
      properties:
        name:
          maxLength: 300
          type: string
          description: Name of project.
          example: Granny flat
        status:
          type: object
          description: Status of project.
          example: Active
          $ref: '#/components/schemas/ProjectStatus'
        amountTaxStatus:
          type: object
          description: The amount tax status of the amounts in the project.
          example: Inclusive
          $ref: '#/components/schemas/ProjectAmountTaxStatus'
        parentProject:
          type: string
          description: The parent project.
          example: The parent project
        startDate:
          type: string
          description: The date the project starts.
          format: date-time
        endDate:
          type: string
          description: The date the project ends.
          format: date-time
        description:
          type: string
          description: A description of the project.
          example: This is a description of the project.
      description: Details of a project to patch.
    ProjectItemPatch:
      type: object
      properties:
        item:
          type: string
          description: The id or name of the item.
          example: Lumber
        projectRate:
          type: number
          description: Rate at which item is charged for this project.
          format: decimal
          example: 199.99
      description: Details of a project item to patch.
    ProjectCustomerPatch:
      type: object
      properties:
        customer:
          type: string
          description: The id or name of the customer.
          example: Customer A
      description: Details of a project customer to patch.
    ProjectSupplierPatch:
      type: object
      properties:
        supplier:
          type: string
          description: The id or name of the suplier.
          example: Supplier A
      description: Details of a project supplier to patch.
    BookSettings:
      required:
      - bankDataRetrievalDays
      - bookCreatedDateTime
      - financialYearStartDay
      - financialYearStartMonth
      - startDate
      type: object
      properties:
        bookName:
          type: string
          description: The book's name.
          example: ACME
        startDate:
          type: string
          description: The first day of records for the book.
          format: date-time
        bookCreatedDateTime:
          type: string
          description: Date and time when the book was created.
          format: date-time
          example: 2018-07-01T10:11:00Z
        lockOffDate:
          type: string
          description: Transactions on or before this date cannot be changed.
          format: date-time
        financialYearStartDay:
          type: integer
          description: Day of month the financial year starts on.
          format: int32
          example: 1
        financialYearStartMonth:
          type: integer
          description: Month as a number that the financial year starts in.
          format: int32
          example: 7
        entityType:
          type: string
          description: Entity type of business.
          example: Company
        industryType:
          type: object
          description: Industry details of business.
          example:
            industry: Accommodation and food services
            category: Cafes, restaurants and takeaway food services
            businessType: Fast food retailing
          allOf:
          - $ref: '#/components/schemas/IndustryTypeDetail'
        replyToEmailAddress:
          type: string
          description: The email address used by clients when replying to emails sent
            from Reckon One.
          example: john.doe@acme.com
        showEmailSentFrom:
          type: string
          description: The displayed name of sender in emails.
          example: John Smith
        bankDataRetrievalDays:
          type: integer
          description: The number of most recent days bank data is retrieved for.
          format: int32
          example: 30
        generalDetails:
          type: object
          description: General company details
          example:
            companyName: Joe's Hot Potatoes
            legalName: Joe Sanders Food Service Pty Ltd
            taxNumber: "123456782"
            branchNumber: "002"
          allOf:
          - $ref: '#/components/schemas/GeneralDetail'
        addresses:
          type: array
          description: List of addresses.
          items:
            $ref: '#/components/schemas/BookAddress'
        contactDetails:
          type: object
          description: Business's contact details.
          allOf:
          - $ref: '#/components/schemas/ContactDetail'
      description: A book's general settings
    IndustryTypeDetail:
      type: object
      properties:
        industry:
          type: string
          description: Type of industry business belongs to.
          example: Accommodation and food services
        category:
          type: string
          description: Category of industry.
          example: '"Cafes, restaurants and takeaway food services".'
        businessType:
          type: string
          description: Type of business activity within specified industry.
          example: Fast food retailing
      description: Business's industry details.
    GeneralDetail:
      type: object
      properties:
        companyName:
          type: string
          description: The company's business/trading name.
          example: Joe's Hot Potatoes
        legalName:
          type: string
          description: The name of the company that appears on legal documents.
          example: Joe Sanders Food Services Pty Ltd
        taxNumber:
          type: string
          description: The tax number of the company.
          example: "123456782"
        branchNumber:
          type: string
          description: The branch number associated with the tax number.
          example: "002"
      description: Basic business details
    BookAddress:
      type: object
      properties:
        id:
          type: string
          description: The address's unique id.
        type:
          type: object
          description: The address type.
          example:
            name: Postal
            id: 5ACEA92F-13C2-49F8-9179-AF4934F29E47
          allOf:
          - $ref: '#/components/schemas/BookTypeRef'
        line1:
          type: string
          description: First line of address.
          example: Floor 1
        line2:
          type: string
          description: Second line of address.
          example: Apartment 44
        line3:
          type: string
          description: Third line of address.
          example: 1 Tudor Lane
        town:
          type: string
          description: Town of address.
          example: London
        suburb:
          type: string
          description: Suburb of address.
          example: Collingwood
        state:
          type: string
          description: State of address.
          example: Victoria
        postcode:
          type: string
          description: Postcode of address.
          example: "3000"
        country:
          type: string
          description: Country of address.
          example: Australia
      description: An address.
    BookTypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
      description: Type reference.
    ContactDetail:
      type: object
      properties:
        contactName:
          type: string
          description: Name of person who is primary contact within the business.
          example: Joe Sanders
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/BookPhoneNumber'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/BookElectronicAddress'
      description: Details on how to contact the business.
    BookPhoneNumber:
      type: object
      properties:
        id:
          type: string
          description: The phone number's unique id.
          example: 5ACEA92F-13C2-49F8-9179-AF4934F29E47
        type:
          type: object
          description: The type of phone number.
          example:
            name: Work
            id: 5ACEA92F-13C2-49F8-9179-AF4934F29E47
          allOf:
          - $ref: '#/components/schemas/BookTypeRef'
        areaCode:
          type: string
          description: The area code.
          example: "02"
        number:
          type: string
          description: The number.
          example: "90101234"
      description: A phone number.
    BookElectronicAddress:
      type: object
      properties:
        id:
          type: string
          description: The electronic address's unique id.
        type:
          type: object
          description: Type of electronic address.
          example:
            name: Email
            id: 5ACEA92F-13C2-49F8-9179-AF4934F29E47
          allOf:
          - $ref: '#/components/schemas/BookTypeRef'
        address:
          type: string
          description: The electronic address.
          example: x@y.com
      description: An electronic address.
    BookSettingsPatch:
      type: object
      properties:
        startDate:
          type: string
          description: The first day of records for the book.
          format: date-time
        lockOffDate:
          type: string
          description: Transactions on or before this date cannot be changed.
          format: date-time
        entityType:
          type: string
          description: Entity type of business.
          example: Company
        industryType:
          type: object
          description: Industry details of business.
          example:
            industry: Accommodation and food services
            category: Cafes, restaurants and takeaway food services
            businessType: Fast food retailing
          allOf:
          - $ref: '#/components/schemas/IndustryTypeDetailPatch'
        replyToEmailAddress:
          type: string
          description: The email address used by clients when replying to emails sent
            from Reckon One.
          example: john.doe@acme.com
        showEmailSentFrom:
          type: string
          description: The displayed name of sender in emails.
          example: John Smith
        bankDataRetrievalDays:
          type: integer
          description: The number of most recent days bank data is retrieved for.
          format: int32
          example: 30
        generalDetails:
          type: object
          description: General company details
          example:
            companyName: Joe's Hot Potatoes
            legalName: Joe Sanders Food Service Pty Ltd
            taxNumber: "123456782"
            branchNumber: "002"
          allOf:
          - $ref: '#/components/schemas/GeneralDetailPatch'
        contactDetails:
          type: object
          description: Business's contact details.
          example:
            contactName: Joe Sanders
          allOf:
          - $ref: '#/components/schemas/ContactDetailPatch'
      description: Details of a book's general settings to patch.
    IndustryTypeDetailPatch:
      type: object
      properties:
        industry:
          type: string
          description: Type of industry business belongs to.
          example: Accommodation and food services
        category:
          type: string
          description: Category of industry.
          example: '"Cafes, restaurants and takeaway food services".'
        businessType:
          type: string
          description: Type of business activity within specified industry.
          example: Fast food retailing
      description: Business's industry details to patch.
    GeneralDetailPatch:
      type: object
      properties:
        companyName:
          maxLength: 255
          type: string
          description: The company's business/trading name.
          example: Joe's Hot Potatoes
        legalName:
          maxLength: 255
          type: string
          description: The name of the company that appears on legal documents.
          example: Joe Sanders Food Services Pty Ltd
        taxNumber:
          maxLength: 50
          type: string
          description: The tax number of the company.
          example: "123456782"
        branchNumber:
          maxLength: 10
          type: string
          description: The branch number associated with the tax number.
          example: "002"
      description: Basic business details to patch.
    ContactDetailPatch:
      type: object
      properties:
        contactName:
          maxLength: 255
          type: string
          description: Name of person who is primary contact within the business.
          example: Joe Sanders
      description: Details on how to contact the business to be patched.
    BookAddressPatch:
      type: object
      properties:
        line1:
          maxLength: 80
          type: string
          description: First line of address.
          example: Floor 1
        line2:
          maxLength: 80
          type: string
          description: Second line of address.
          example: Apartment 44
        line3:
          maxLength: 80
          type: string
          description: Third line of address.
          example: 1 Tudor Lane
        town:
          maxLength: 80
          type: string
          description: Town of address.
          example: London
        suburb:
          maxLength: 80
          type: string
          description: Suburb of address.
          example: Collingwood
        state:
          maxLength: 80
          type: string
          description: State of address.
          example: Victoria
        postcode:
          maxLength: 30
          type: string
          description: Postcode of address.
          example: "3000"
        country:
          maxLength: 30
          type: string
          description: Country of address.
          example: Australia
      description: An address to patch.
    BookPhoneNumberPatch:
      type: object
      properties:
        areaCode:
          maxLength: 10
          type: string
          description: The area code.
          example: "02"
        number:
          maxLength: 30
          type: string
          description: The number.
          example: "90101234"
      description: A phone number.
    BookElectronicAddressPatch:
      type: object
      properties:
        address:
          type: string
          description: The electronic address.
          example: x@y.com
      description: An electronic address.
    TaxSettings:
      required:
      - amountTaxStatus
      - chooseAmountTaxStatus
      - reportingBasis
      - taxAmountEditable
      - taxRegistered
      type: object
      properties:
        taxRegistered:
          type: boolean
          description: Indicates whether you registered for tax.
          example: true
        reportingBasis:
          type: object
          description: The tax reporting basis type.
          example: Accrual
          $ref: '#/components/schemas/AccountingMethodType'
        amountTaxStatus:
          type: object
          description: Indicates whether sales figures are shown in the gross sales
            or the net sales.
          example: Gross (Tax Inclusive)
          $ref: '#/components/schemas/SettingsAmountTaxStatus'
        defaultSalesTaxLedgerAccount:
          type: object
          description: Default tax account ledger for sales.
          example:
            id: 80945428-DD32-4CB1-A349-26B4F3FCA9C8
            name: GST Payable:GST Collected
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        defaultPurchasesTaxLedgerAccount:
          type: object
          description: Default tax account ledger for purchases.
          example:
            id: 20445428-DD32-4CB1-A349-26B4F3FCA912
            name: GST Payable:GST Paid
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        taxAmountEditable:
          type: boolean
          description: Indicates whether allows users to edit tax amounts.
          example: true
        chooseAmountTaxStatus:
          type: boolean
          description: Indicates whether a user can choose if amounts include or exclude
            tax.
          example: true
        basSettings:
          type: object
          description: The BAS reporting preference details.
          allOf:
          - $ref: '#/components/schemas/BasReportSettings'
        emailSettings:
          type: object
          description: The email settings for tax.
          allOf:
          - $ref: '#/components/schemas/EmailSettings'
      description: A book's tax settings
    AccountingMethodType:
      type: string
      description: The sales figures type of tax.
      enum:
      - Accrual
      - Cash
      x-enumNames:
      - Accrual
      - Cash
    SettingsAmountTaxStatus:
      type: string
      description: The sales figures type of tax.
      enum:
      - Unknown
      - NonTaxed
      - Inclusive
      - Exclusive
      x-enumNames:
      - Unknown
      - NonTaxed
      - Inclusive
      - Exclusive
    BasReportSettings:
      required:
      - amountTaxStatus
      - fbt
      - ftc
      - lct
      - paygiCalculateUsingIncomeTimesRate
      - paygiPayQuarterly
      - paygw
      - simplerBAS
      - wet
      type: object
      properties:
        reportingPeriodType:
          type: string
          description: The BAS reporting period.
          example: Monthly
        simplerBAS:
          type: boolean
          description: 'Indicates whether its a simpler BAS. Simpler BAS is only applicable
            for business reporting GST on Monthly, Annual or quarterly basis (option
            1: Calculate GST and report quarterly).'
          example: true
        amountTaxStatus:
          type: object
          description: Show amounts reported in BAS as inclusive or exclusive.
          example: Inclusive
          $ref: '#/components/schemas/SettingsAmountTaxStatus'
        fbt:
          type: boolean
          description: Indicates whether Fringe Benefits Tax (FBT) applies to the
            business.
          example: true
        ftc:
          type: boolean
          description: Indicates whether Fuel Tax Credits (FTC) applies to the business.
          example: true
        lct:
          type: boolean
          description: Indicates whether Luxury Car Tax (LCT) applies to the business.
          example: true
        paygiPayQuarterly:
          type: boolean
          description: Indicates whether Pay As You Go Income Tax Instalment (PAYG
            I) applies to the business. Pay PAYG instalment quarterly.
          example: true
        paygiCalculateUsingIncomeTimesRate:
          type: boolean
          description: Indicates whether Pay As You Go Income Tax Instalment (PAYG
            I) applies to the business. Calculate PAYG instalment using income times
            rate.
          example: true
        paygw:
          type: boolean
          description: Indicates whether Pay As You Go Tax Withheld (PAYG W) applies
            to the business.
          example: true
        wet:
          type: boolean
          description: Indicates whether Wine Equalisation Tax (WET) applies to the
            business.
          example: true
      description: BAS reporting preference details.
    EmailSettings:
      type: object
      properties:
        bas:
          type: object
          description: BAS default email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplate'
      description: The book's tax email settings.
    EmailTemplate:
      required:
      - includeBcc
      - includeCc
      type: object
      properties:
        includeCc:
          type: boolean
          description: Indicates whether includes CC by default when emailing.
          example: true
        ccAddress:
          type: string
          description: Default CC email address.
          example: ccemail@email.com
        includeBcc:
          type: boolean
          description: Indicates whether includes BCC by default when emailing.
          example: true
        bccAddress:
          type: string
          description: Default BCC email address.
          example: bccemail@email.com
        emailSubject:
          type: string
          description: Default email subject.
          example: Important document
        emailContent:
          type: string
          description: Default email content.
          example: Please review the attached document. Feel free to contact us if
            you have any questions.
      description: The email template.
    TaxSettingsPatch:
      type: object
      properties:
        taxRegistered:
          type: boolean
          description: Indicates whether you registered for tax.
          example: true
        reportingBasis:
          type: object
          description: The tax reporting basis type.
          example: Accrual
          $ref: '#/components/schemas/AccountingMethodType'
        amountTaxStatus:
          type: object
          description: Indicates whether sales figures are shown in the gross sales
            or the net sales.
          example: Gross (Tax Inclusive)
          $ref: '#/components/schemas/SettingsAmountTaxStatus'
        defaultSalesTaxLedgerAccount:
          type: string
          description: Default tax account ledger for sales.
          example: GST Payable:GST Collected
        defaultPurchasesTaxLedgerAccount:
          type: string
          description: Default tax account ledger for purchases.
          example: GST Payable:GST Paid
        taxAmountEditable:
          type: boolean
          description: Indicates whether allows users to edit tax amounts.
          example: true
        chooseAmountTaxStatus:
          type: boolean
          description: Indicates whether a user can choose if amounts include or exclude
            tax.
          example: true
        basSettings:
          type: object
          description: The BAS reporting preference details.
          allOf:
          - $ref: '#/components/schemas/BasReportSettingsPatch'
        emailSettings:
          type: object
          description: The email settings for tax.
          allOf:
          - $ref: '#/components/schemas/EmailSettingsPatch'
      description: Tax settings to patch.
    BasReportSettingsPatch:
      type: object
      properties:
        reportingPeriodType:
          type: string
          description: The BAS reporting period.
          example: Monthly
        simplerBAS:
          type: boolean
          description: 'Indicates whether its a simpler BAS. Simpler BAS is only applicable
            for business reporting GST on Monthly, Annual or quarterly basis (option
            1: Calculate GST and report quarterly).'
          example: true
        amountTaxStatus:
          type: object
          description: Show amounts reported in BAS as inclusive or exclusive.
          example: Inclusive
          $ref: '#/components/schemas/SettingsAmountTaxStatus'
        fbt:
          type: boolean
          description: Indicates whether Fringe Benefits Tax (FBT) applies to the
            business.
          example: true
        ftc:
          type: boolean
          description: Indicates whether Fuel Tax Credits (FTC) applies to the business.
          example: true
        lct:
          type: boolean
          description: Indicates whether Luxury Car Tax (LCT) applies to the business.
          example: true
        paygiPayQuarterly:
          type: boolean
          description: Indicates whether Pay As You Go Income Tax Instalment (PAYG
            I) applies to the business. Pay PAYG instalment quarterly.
          example: true
        paygiCalculateUsingIncomeTimesRate:
          type: boolean
          description: Indicates whether Pay As You Go Income Tax Instalment (PAYG
            I) applies to the business. Calculate PAYG instalment using income times
            rate.
          example: true
        paygw:
          type: boolean
          description: Indicates whether Pay As You Go Tax Withheld (PAYG W) applies
            to the business.
          example: true
        wet:
          type: boolean
          description: Indicates whether Wine Equalisation Tax (WET) applies to the
            business.
          example: true
      description: BAS report settings to patch.
    EmailSettingsPatch:
      type: object
      properties:
        bas:
          type: object
          description: BAS default email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplatePatch'
      description: The book's tax email settings to patch.
    EmailTemplatePatch:
      type: object
      properties:
        includeCc:
          type: boolean
          description: Indicates whether includes CC by default when emailing.
          example: true
        ccAddress:
          type: string
          description: Default CC email address.
          example: ccemail@email.com
        includeBcc:
          type: boolean
          description: Indicates whether includes BCC by default when emailing.
          example: true
        bccAddress:
          type: string
          description: Default BCC email address.
          example: bccemail@email.com
        emailSubject:
          type: string
          description: Default email subject.
          example: Activity Statement
        emailContent:
          type: string
          description: Default email content.
          example: Please review the attached Activity Statement. Feel free to contact
            us if you have any questions.
      description: The email template to patch.
    InvoiceSettings:
      required:
      - approvalEnabled
      - nextInvoiceNumber
      - serviceDateOnInvoice
      type: object
      properties:
        approvalEnabled:
          type: boolean
          description: Indicates whether invoice approval is enabled.
          example: true
        prefix:
          type: string
          description: The invoice prefix.
          example: INV
        defaultTemplate:
          type: object
          description: The default invoice template.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Professional Invoice
          allOf:
          - $ref: '#/components/schemas/TemplateRef'
        nextInvoiceNumber:
          type: integer
          description: The number that will be used for the next invoice.
          format: int32
          example: 1001
        defaultPaymentDetails:
          type: string
          description: The default payment details.
          example: Please pay to my bank account.
        serviceDateOnInvoice:
          type: boolean
          description: Indicates whether service date can be used on invoices.
          example: true
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplate'
      description: A book's invoice settings.
    InvoiceSettingsPatch:
      required:
      - approvalEnabled
      - nextInvoiceNumber
      - serviceDateOnInvoice
      type: object
      properties:
        approvalEnabled:
          type: boolean
          description: Indicates whether invoice approval is enabled.
          example: true
        prefix:
          type: string
          description: The invoice prefix.
          example: INV
        defaultTemplate:
          type: string
          description: The default invoice template.
          example: Professional Invoice
        nextInvoiceNumber:
          type: integer
          description: The number that will be used for the next invoice.
          format: int32
          example: 1001
        defaultPaymentDetails:
          type: string
          description: The default payment details.
          example: Please pay to my bank account.
        serviceDateOnInvoice:
          type: boolean
          description: Indicates whether service date can be used on invoices.
          example: true
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplatePatch'
      description: Invoice settings to patch.
    CreditNoteSettings:
      type: object
      properties:
        prefix:
          type: string
          description: The invoice prefix.
          example: CAN
        defaultTemplate:
          type: object
          description: The default invoice template.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Professional Customer adjustment note
          allOf:
          - $ref: '#/components/schemas/TemplateRef'
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplate'
      description: A book's credit note settings.
    CreditNoteSettingsPatch:
      type: object
      properties:
        prefix:
          type: string
          description: The credit note prefix.
          example: CAN
        defaultTemplate:
          type: string
          description: The default credit note template.
          example: Professional Customer adjustment note
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplatePatch'
      description: Credit note settings to patch.
    ReceiptSettings:
      type: object
      properties:
        prefix:
          type: string
          description: The receipt prefix.
          example: RCPT
        defaultBankAccount:
          type: object
          description: The default invoice bank account.
          example:
            id: b5a190c8-c50f-41dd-8254-235332b7ca34
            name: Main bank account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplate'
      description: A book's receipt settings.
    ReceiptSettingsPatch:
      type: object
      properties:
        prefix:
          type: string
          description: The receipt prefix.
          example: RCPT
        defaultBankAccount:
          type: string
          description: The default bank account.
          example: Main bank account
        emailSettings:
          type: object
          description: Email settings.
          allOf:
          - $ref: '#/components/schemas/EmailTemplatePatch'
      description: Receipt settings to patch.
    PayrollSettings:
      required:
      - automaticPayrollPayments
      type: object
      properties:
        legalContact:
          type: object
          description: The payroll settings' legal contact.
          allOf:
          - $ref: '#/components/schemas/PayrollLegalContact'
        payrollSetup:
          type: object
          description: The payroll setup details.
          allOf:
          - $ref: '#/components/schemas/PayrollSetup'
        defaultAccounts:
          type: object
          description: The default payroll accounts.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultAccounts'
        defaultPayments:
          type: object
          description: The default payroll payments.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultPayments'
        automaticPayrollPayments:
          type: boolean
          description: Indicates whether makes payroll salary and wages payments when
            users finish each pay run.
          example: true
        defaultBankAccounts:
          type: object
          description: The default payroll bank accounts.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultBankAccounts'
      description: A book's payroll settings
    PayrollLegalContact:
      type: object
      properties:
        firstName:
          type: string
          description: The first name of legal contact.
          example: John
        lastName:
          type: string
          description: The last name of legal contact.
          example: Smith
        title:
          type: string
          description: The legal contact's title.
          example: Mr
        phoneNumbers:
          type: array
          description: List of phone numbers.
          items:
            $ref: '#/components/schemas/BookPhoneNumber'
        electronicAddresses:
          type: array
          description: List of electronic addresses.
          items:
            $ref: '#/components/schemas/BookElectronicAddress'
      description: The payroll settings' ledgal contact details.
    PayrollSetup:
      required:
      - allowPayRatesEditInPayRuns
      - copyPayItemsFromPreviousPay
      - displayYTDOnPayrun
      - optionalEmailPasswordProtection
      - trackProjectCost
      type: object
      properties:
        copyPayItemsFromPreviousPay:
          type: boolean
          description: Indicates whether the pay run copies pay items from previous
            pay (overrides default pay items).
          example: true
        trackProjectCost:
          type: boolean
          description: "Indicates whether it tracks project cost.\n            "
          example: true
        allowPayRatesEditInPayRuns:
          type: boolean
          description: Indicates whether it allows editing of pay rates on pay runs.
          example: true
        optionalEmailPasswordProtection:
          type: boolean
          description: Indicates whether it enables password protection for emailing
            pay slips and payment summaries.
          example: false
        displayYTDOnPayrun:
          type: boolean
          description: Indicates whether it displays YTD amounts on pay run.
          example: true
      description: A book's payroll setup.
    PayrollDefaultAccounts:
      required:
      - payWitholdingAmountToSupplier
      type: object
      properties:
        expenseAccount:
          type: object
          description: The expense account.
          example:
            id: ca4c22d0-8493-4a7b-b06c-5809e7482227
            name: Payroll Expenses:Annual Leave
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        expenseAccountForCompanySuperContributions:
          type: object
          description: The expense account for company super contributions.
          example:
            id: 296cde83-f8c3-469f-b474-4892da4dbdb5
            name: Cleaning, Laundry and Pest Control
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        liabilityAccount:
          type: object
          description: The liability account.
          example:
            id: c79f4ada-651c-4955-9658-d666bf32acd7
            name: Payroll Liabilities:ABN Withholding Tax Payable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        liabilityAccountForWithholdingAmounts:
          type: object
          description: The liability account for withholding amount.
          example:
            id: f08af612-a854-40bc-890d-e3592ea5e167
            name: Payroll Liabilities:PAYG Withholding Payable
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        payWitholdingAmountToSupplier:
          type: boolean
          description: Indicates whether pays to supplier through accounts payable.
          example: true
        supplierForWithholdingAmounts:
          type: object
          description: Supplier for withholding amounts.
          example:
            id: 7a53dc2b-3320-4b78-b825-536136173ca6
            name: John Doe
          allOf:
          - $ref: '#/components/schemas/OrganisationRef'
      description: The payroll settings' default accounts.
    PayrollDefaultPayments:
      required:
      - roundToNearest
      type: object
      properties:
        roundToNearest:
          type: number
          description: Rounding settings of payments.
          format: decimal
          example: 0.1
        expenseAccountForRounding:
          type: object
          description: Expense account for rounding of cash payments.
          example:
            id: ca4c22d0-8493-4a7b-b06c-5809e7482227
            name: Payroll Expenses
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
      description: The details of payroll default payments.
    PayrollDefaultBankAccounts:
      type: object
      properties:
        directCreditPaymentsBankAccount:
          type: object
          description: The direct credit payment bank account.
          example:
            id: 5bbb12cc-a803-4197-9144-b470fbb01348
            name: My Bank Account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        cashPaymentsBankAccount:
          type: object
          description: The cash payments account.
          example:
            id: c458dee2-c152-4f5b-b6ed-bf6d7a83051b
            name: My cash payment bank account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        superPaymentsBankAccount:
          type: object
          description: The super payment bank account.
          example:
            id: 1a4c22d0-8493-4a7b-b06c-5809e7482222
            name: My super payment bank account
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
      description: The details of payroll default bank accounts.
    PayrollSettingsPatch:
      type: object
      properties:
        legalContact:
          type: object
          description: The payroll settings' legal contact.
          allOf:
          - $ref: '#/components/schemas/PayrollLegalContactPatch'
        payrollSetup:
          type: object
          description: The payroll setup details.
          allOf:
          - $ref: '#/components/schemas/PayrollSetupPatch'
        defaultAccounts:
          type: object
          description: The default payroll accounts.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultAccountsPatch'
        defaultPayments:
          type: object
          description: The default payroll payments.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultPaymentsPatch'
        automaticPayrollPayments:
          type: boolean
          description: Indicates whether makes payroll salary and wages payments when
            users finish each pay run.
          example: true
        defaultBankAccounts:
          type: object
          description: The default payroll bank accounts.
          allOf:
          - $ref: '#/components/schemas/PayrollDefaultBankAccountsPatch'
      description: A book's payroll settings to patch.
    PayrollLegalContactPatch:
      type: object
      properties:
        firstName:
          type: string
          description: The first name of legal contact.
          example: John
        lastName:
          type: string
          description: The last name of legal contact.
          example: Smith
        title:
          type: string
          description: The legal contact's title.
          example: Mr
      description: The payroll settings' legal contact details to patch.
    PayrollSetupPatch:
      type: object
      properties:
        copyPayItemsFromPreviousPay:
          type: boolean
          description: Indicates whether the pay run copies pay items from previous
            pay (overrides default pay items).
          example: true
        trackProjectCost:
          type: boolean
          description: "Indicates whether it tracks project cost.\n            "
          example: true
        allowPayRatesEditInPayRuns:
          type: boolean
          description: Indicates whether it allows editing of pay rates on pay runs.
          example: true
        optionalEmailPasswordProtection:
          type: boolean
          description: Indicates whether it enables password protection for emailing
            pay slips and payment summaries.
          example: false
        displayYTDOnPayrun:
          type: boolean
          description: Indicates whether it displays YTD amounts on pay run.
          example: true
      description: A book's payroll setup to patch.
    PayrollDefaultAccountsPatch:
      type: object
      properties:
        payWitholdingAmountToSupplier:
          type: boolean
          description: Indicates whether pays to supplier through accounts payable.
          example: true
        expenseAccount:
          type: string
          description: The expense account.
          example: Payroll Expenses:Annual Leave
        expenseAccountForCompanySuperContributions:
          type: string
          description: The expense account for company super contributions.
          example: 296cde83-f8c3-469f-b474-4892da4dbdb5
        liabilityAccount:
          type: string
          description: The liability account.
          example: Payroll Liabilities:ABN Withholding Tax Payable
        liabilityAccountForWithholdingAmounts:
          type: string
          description: The liability account for withholding amount.
          example: f08af612-a854-40bc-890d-e3592ea5e167
        supplierForWithholdingAmounts:
          type: string
          description: Supplier for withholding amounts.
          example: John Doe
      description: The payroll settings' default accounts to patch.
    PayrollDefaultPaymentsPatch:
      type: object
      properties:
        roundToNearest:
          type: number
          description: Rounding settings of payments.
          format: decimal
          example: 0.1
        expenseAccountForRounding:
          type: string
          description: Expense account for rounding of cash payments.
          example: Payroll Expenses
      description: The details of payroll default payments to patch.
    PayrollDefaultBankAccountsPatch:
      type: object
      properties:
        directCreditPaymentsBankAccount:
          type: string
          description: The direct credit payment bank account.
          example: My Bank Account
        cashPaymentsBankAccount:
          type: string
          description: The cash payments account.
          example: c458dee2-c152-4f5b-b6ed-bf6d7a83051b
        superPaymentsBankAccount:
          type: string
          description: The super payment bank account.
          example: My super payment bank account
      description: The details of payroll default bank accounts to patch.
    TimeEntrySettings:
      required:
      - approvalEnabled
      - firstDayOfWeek
      type: object
      properties:
        approvalEnabled:
          type: boolean
          description: Indicates whether time entry approval is enabled.
          example: true
        firstDayOfWeek:
          type: object
          description: The start time of a week.
          example: Monday
          $ref: '#/components/schemas/TimeStartOfWeek'
        transferBillableTimeAs:
          type: object
          description: The transfer billable time settings.
          allOf:
          - $ref: '#/components/schemas/TransferBillableTimeSettings'
      description: A book's time entry settings.
    TimeStartOfWeek:
      type: string
      description: The start time of a week.
      enum:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      - Sunday
      x-enumNames:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      - Sunday
    TransferBillableTimeSettings:
      required:
      - combineItemAndRate
      - transferDescriptions
      - transferNotes
      type: object
      properties:
        combineItemAndRate:
          type: boolean
          description: Indicates whether combines time item and rate when transferring
            billable time.
          example: false
        transferNotes:
          type: boolean
          description: Indicates whether use time sheet entry note as line item description
            when transferring billable time separately.
          example: true
        transferDescriptions:
          type: boolean
          description: Indicates whether use chargeable item description as line item
            description when transferring billable time separately.
          example: false
      description: The billable time transfer settings.
    TimeEntrySettingsPatch:
      type: object
      properties:
        approvalEnabled:
          type: boolean
          description: Indicates whether time entry approval is enabled.
          example: true
        firstDayOfWeek:
          type: object
          description: The start time of a week.
          example: Monday
          $ref: '#/components/schemas/TimeStartOfWeek'
        transferBillableTimeAs:
          type: object
          description: The transfer billable time settings.
          allOf:
          - $ref: '#/components/schemas/TransferBillableTimeSettingsPatch'
      description: Time entry settings to patch.
    TransferBillableTimeSettingsPatch:
      type: object
      properties:
        combineItemAndRate:
          type: boolean
          description: Indicates whether to combine the item and the rate when transferring
            billable time.
          example: false
        transferNotes:
          type: boolean
          description: Indicates whether to use time sheet entry notes as line item
            descriptions when transferring billable time separately.
          example: true
        transferDescriptions:
          type: boolean
          description: Indicates whether to use chargeable item descriptions as line
            item descriptions when transferring billable time separately.
          example: false
      description: Transfer billable time settings to patch.
    TemplateTypeRef:
      type: object
      properties:
        id:
          type: string
          description: The unique id.
          format: guid
        name:
          type: string
          description: The unique name.
        type:
          type: string
          description: The resource's type.
      description: Reference to a template.
    FileContentResult:
      type: object
      description: A file content result.
    InvoiceTemplates:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/InvoiceTemplate'
      description: A list of invoice templates.
    InvoiceTemplate:
      required:
      - fontSize
      - id
      type: object
      properties:
        id:
          type: string
          description: The template's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The template's name.
          example: Standard Invoice
        font:
          type: string
          description: The template's font.
          example: Open Sans
        fontSize:
          type: number
          description: The template's font size.
          format: float
          example: 7.0
        header:
          type: object
          description: The header details of the template.
          allOf:
          - $ref: '#/components/schemas/InvoiceTemplateHeader'
        content:
          type: object
          description: The content's details of the template.
          allOf:
          - $ref: '#/components/schemas/InvoiceTemplateContent'
        footer:
          type: object
          description: The footer details of the template.
          allOf:
          - $ref: '#/components/schemas/InvoiceTemplateFooter'
      description: Details of an invoice template.
    InvoiceTemplateHeader:
      required:
      - companyAddress
      - companyName
      - customText
      - dueDate
      - email
      - invoiceDate
      - invoiceDiscount
      - invoiceNumber
      - invoiceTo
      - paymentTerms
      - phoneNumber
      - referenceCode
      - shipTo
      - taxNumber
      - website
      type: object
      properties:
        companyName:
          type: boolean
          description: Is CompanyName included in the template's header.
          example: true
        companyAddress:
          type: boolean
          description: Is CompanyAddress included in the template's header.
          example: true
        taxNumber:
          type: boolean
          description: Is TaxNumber included in the template's header.
          example: true
        phoneNumber:
          type: boolean
          description: Is PhoneNumber included in the template's header.
          example: true
        email:
          type: boolean
          description: Is Email included in the template's header.
          example: true
        website:
          type: boolean
          description: Is Website included in the template's header.
          example: true
        logo:
          type: object
          description: Logo of the template's header.
          allOf:
          - $ref: '#/components/schemas/Logo'
        invoiceTo:
          type: boolean
          description: Is InvoiceTo included in the template's header.
          example: true
        shipTo:
          type: boolean
          description: Is ShipTo included in the template's header.
          example: true
        invoiceDate:
          type: boolean
          description: Is InvoiceDate included in the template's header.
          example: true
        invoiceNumber:
          type: boolean
          description: Is InvoiceNumber included in the template's header.
          example: true
        dueDate:
          type: boolean
          description: Is DueDate included in the template's header.
          example: true
        invoiceDiscount:
          type: boolean
          description: Is InvoiceDiscount included in the template's header.
          example: true
        paymentTerms:
          type: boolean
          description: Is PaymentTerms included in the template's header.
          example: true
        referenceCode:
          type: boolean
          description: Is reference code included in the template's header.
          example: true
        customText:
          type: boolean
          description: Is custom text included in the template's header.
          example: true
        customTextValue:
          type: string
          description: The custom text value of the template's header.
          example: custom text
      description: Details of the header of an invoice template.
    Logo:
      type: object
      properties:
        name:
          type: string
          description: Name of the logo.
          example: giant800px-Coca-Cola_logo.svg.png
        url:
          type: string
          description: Url of the logo.
          example: '"url": "/{bookId}/templates/{templateId}/logo"'
      description: Details of a logo.
    InvoiceTemplateContent:
      required:
      - account
      - amount
      - description
      - discount
      - item
      - itemPrice
      - project
      - quantity
      - serviceDate
      - tax
      - taxCode
      type: object
      properties:
        project:
          type: boolean
          description: Is Project included in the template's content.
          example: true
        item:
          type: boolean
          description: Is Item included in the template's content.
          example: true
        itemPrice:
          type: boolean
          description: Is ItemPrice included in the template's content.
          example: true
        description:
          type: boolean
          description: Is Description included in the template's content.
          example: true
        quantity:
          type: boolean
          description: Is Quantity included in the template's content.
          example: true
        taxCode:
          type: boolean
          description: Is TaxCode included in the template's content.
          example: true
        tax:
          type: boolean
          description: Is Tax included in the template's content.
          example: true
        amount:
          type: boolean
          description: Is Amount included in the template's content.
          example: true
        serviceDate:
          type: boolean
          description: Is ServiceDate included in the template's content.
          example: true
        account:
          type: boolean
          description: Is Account included in the template's content.
          example: true
        discount:
          type: boolean
          description: Is Discount included in the template's content.
          example: true
      description: Details of the content of an invoice template.
    InvoiceTemplateFooter:
      required:
      - balanceDue
      - howToPay
      - invoiceDiscount
      - note
      - subtotal
      - taxAmount
      - totalExcludingTax
      type: object
      properties:
        note:
          type: boolean
          description: Is Note included in the template's footer.
          example: true
        subtotal:
          type: boolean
          description: Is Subtotal included in the template's footer.
          example: true
        taxAmount:
          type: boolean
          description: Is TaxAmount included in the template's footer.
          example: true
        invoiceDiscount:
          type: boolean
          description: Is InvoiceDiscount included in the template's footer.
          example: true
        balanceDue:
          type: boolean
          description: Is BalanceDue included in the template's footer.
          example: true
        totalExcludingTax:
          type: boolean
          description: Is TotalExcludingTax included in the template's footer.
          example: true
        howToPay:
          type: boolean
          description: Is HowToPay included in the template's footer.
          example: true
      description: Details of the footer of an invoice template.
    EstimateTemplates:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/EstimateTemplate'
      description: A list of estimate templates.
    EstimateTemplate:
      required:
      - fontSize
      - id
      type: object
      properties:
        id:
          type: string
          description: The template's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The template's name.
          example: Standard Invoice
        font:
          type: string
          description: The template's font.
          example: Open Sans
        fontSize:
          type: number
          description: The template's font size.
          format: float
          example: 7.0
        header:
          type: object
          description: The header details of the template.
          allOf:
          - $ref: '#/components/schemas/EstimateTemplateHeader'
        content:
          type: object
          description: The content's details of the template.
          allOf:
          - $ref: '#/components/schemas/EstimateTemplateContent'
        footer:
          type: object
          description: The footer details of the template.
          allOf:
          - $ref: '#/components/schemas/EstimateTemplateFooter'
      description: Details of an estimate template.
    EstimateTemplateHeader:
      required:
      - billingAddress
      - companyAddress
      - companyName
      - customText
      - email
      - estimateDate
      - estimateNumber
      - expiryDate
      - phoneNumber
      - referenceCode
      - shippingAddress
      - taxNumber
      - website
      type: object
      properties:
        companyName:
          type: boolean
          description: Is CompanyName included in the template's header.
          example: true
        companyAddress:
          type: boolean
          description: Is CompanyAddress included in the template's header.
          example: true
        taxNumber:
          type: boolean
          description: Is TaxNumber included in the template's header.
          example: true
        phoneNumber:
          type: boolean
          description: Is PhoneNumber included in the template's header.
          example: true
        email:
          type: boolean
          description: Is Email included in the template's header.
          example: true
        website:
          type: boolean
          description: Is Website included in the template's header.
          example: true
        logo:
          type: object
          description: Logo of the template's header.
          allOf:
          - $ref: '#/components/schemas/Logo'
        billingAddress:
          type: boolean
          description: Is billing address included in the template's header.
          example: true
        shippingAddress:
          type: boolean
          description: Is shipping address included in the template's header.
          example: true
        estimateDate:
          type: boolean
          description: Is estimate date included in the template's header.
          example: true
        estimateNumber:
          type: boolean
          description: Is estimate number included in the template's header.
          example: true
        expiryDate:
          type: boolean
          description: Is expiry date included in the template's header.
          example: true
        referenceCode:
          type: boolean
          description: Is reference code included in the template's header.
          example: true
        customText:
          type: boolean
          description: Is custom text included in the template's header.
          example: true
        customTextValue:
          type: string
          description: The custom text value of the template's header.
          example: custom text
      description: Details of the header of an estimate template.
    EstimateTemplateContent:
      required:
      - amount
      - description
      - item
      - itemPrice
      - project
      - quantity
      - tax
      - taxCode
      type: object
      properties:
        project:
          type: boolean
          description: Is Project included in the template's content.
          example: true
        item:
          type: boolean
          description: Is Item included in the template's content.
          example: true
        itemPrice:
          type: boolean
          description: Is ItemPrice included in the template's content.
          example: true
        description:
          type: boolean
          description: Is Description included in the template's content.
          example: true
        quantity:
          type: boolean
          description: Is Quantity included in the template's content.
          example: true
        taxCode:
          type: boolean
          description: Is TaxCode included in the template's content.
          example: true
        tax:
          type: boolean
          description: Is Tax included in the template's content.
          example: true
        amount:
          type: boolean
          description: Is Amount included in the template's content.
          example: true
      description: Details of the content of a template.
    EstimateTemplateFooter:
      required:
      - note
      - paymentNotes
      - signature
      - subtotal
      - taxAmount
      - termsAndConditions
      - total
      - totalExcludingTax
      type: object
      properties:
        note:
          type: boolean
          description: Is Note included in the template's footer.
          example: true
        subtotal:
          type: boolean
          description: Is Subtotal included in the template's footer.
          example: true
        taxAmount:
          type: boolean
          description: Is TaxAmount included in the template's footer.
          example: true
        totalExcludingTax:
          type: boolean
          description: Is total excluding tax included in the template's footer.
          example: true
        total:
          type: boolean
          description: Is total included in the template's footer.
          example: true
        termsAndConditions:
          type: boolean
          description: Is terms and conditions included in the template's footer.
          example: true
        paymentNotes:
          type: boolean
          description: Is payment notes included in the template's footer.
          example: true
        signature:
          type: boolean
          description: Is signature included in the template's footer.
          example: true
      description: Details of the footer of an estimate template.
    Templates:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Template'
      description: A list of templates.
    Template:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The template's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The template's name.
          example: Standard Invoice
        header:
          type: object
          description: The header detail of a template.
          allOf:
          - $ref: '#/components/schemas/TemplateHeader'
      description: Details of a template.
    TemplateHeader:
      required:
      - companyAddress
      - companyName
      - email
      - phoneNumber
      - taxNumber
      - website
      type: object
      properties:
        logo:
          type: object
          description: Logo of the template's header.
          allOf:
          - $ref: '#/components/schemas/Logo'
        companyName:
          type: boolean
          description: Is CompanyName included in the template's header.
          example: true
        companyAddress:
          type: boolean
          description: Is CompanyAddress included in the template's header.
          example: true
        taxNumber:
          type: boolean
          description: Is TaxNumber included in the template's header.
          example: true
        phoneNumber:
          type: boolean
          description: Is PhoneNumber included in the template's header.
          example: true
        email:
          type: boolean
          description: Is Email included in the template's header.
          example: true
        website:
          type: boolean
          description: Is Website included in the template's header.
          example: true
      description: Details of the header of a template.
    CustomerStatementsTemplates:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/CustomerStatementsTemplate'
      description: A list of templates.
    CustomerStatementsTemplate:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The template's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The template's name.
          example: Standard Invoice
        header:
          type: object
          description: The header detail of a template.
          allOf:
          - $ref: '#/components/schemas/TemplateHeaderBase'
      description: Details of a template.
    TemplateHeaderBase:
      type: object
      properties:
        logo:
          type: object
          description: Logo of the template's header.
          allOf:
          - $ref: '#/components/schemas/Logo'
      description: Base details of the header of a template.
    TaxGroups:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/TaxGroup'
      description: A list of tax groups.
    TaxGroup:
      required:
      - id
      - lastModifiedDateTime
      - rate
      - status
      - useOnPurchases
      - useOnSales
      type: object
      properties:
        id:
          type: string
          description: The tax group's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The tax group's name.
          example: GST
        description:
          type: string
          description: The description of the tax group.
          example: GST on sales
        rate:
          type: number
          description: The rate for the tax group.
          format: decimal
          example: 10.0
        exportCode:
          type: string
          description: The export code for the tax group.
          example: ABC
        status:
          type: object
          description: The status of the tax group.
          example: Active
          $ref: '#/components/schemas/TaxStatus'
        useOnPurchases:
          type: boolean
          description: Whether the tax group is used for purchases.
          example: false
        useOnSales:
          type: boolean
          description: Whether the tax group is used for sales.
          example: true
        taxCodes:
          type: array
          description: Tax codes assigned to the tax group.
          items:
            $ref: '#/components/schemas/TaxCode'
        reportingLocations:
          type: array
          description: Locations where the tax group will be included in reports.
          items:
            $ref: '#/components/schemas/TaxReportingLocation'
        purchaseTaxLedgerAccounts:
          type: array
          description: Accounts to use for purchases.
          items:
            $ref: '#/components/schemas/LedgerAccount'
        saleTaxLedgerAccounts:
          type: array
          description: Accounts to use for sales.
          items:
            $ref: '#/components/schemas/LedgerAccount'
        lastModifiedDateTime:
          type: string
          description: Timestamp of when tax group record was last modified.
          format: date-time
          example: 2020-07-15T02:47:50.8821045Z
      description: Details of a tax group.
    TaxStatus:
      type: string
      description: The status of an accounting category.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    TaxCode:
      required:
      - id
      - isWholeAmountTax
      - rate
      - useCodeOnPurchases
      - useCodeOnSales
      type: object
      properties:
        id:
          type: string
          description: The tax code's id.
          format: guid
          example: 7f8340a7-9ab6-4d80-85cc-3f3f37bcddce
        name:
          type: string
          description: The tax code's name.
          example: GST
        description:
          type: string
          description: The description of the tax code.
          example: GST on sales
        rate:
          type: number
          description: The rate for the tax code.
          format: decimal
          example: 10.0
        purchaseTaxLedgerAccount:
          type: object
          description: The ledger account to use for purchases.
          allOf:
          - $ref: '#/components/schemas/LedgerAccount'
        saleTaxLedgerAccount:
          type: object
          description: The ledger account to use for sales.
          allOf:
          - $ref: '#/components/schemas/LedgerAccount'
        taxType:
          type: object
          description: Type of tax.
          allOf:
          - $ref: '#/components/schemas/TaxType'
        useCodeOnPurchases:
          type: boolean
          description: Whether the tax code is used for purchases.
          example: false
        useCodeOnSales:
          type: boolean
          description: Whether the tax code is used for sales.
          example: true
        isCodeForEuropeanCommunityGoods:
          type: boolean
          description: Whether the tax code is used for European community goods (UK
            only).
          example: false
        isWholeAmountTax:
          type: boolean
          description: Whether the whole amount is tax.
          example: false
      description: Details of a tax code.
    TaxType:
      required:
      - id
      - isPrimary
      - systemType
      type: object
      properties:
        id:
          type: string
          description: The tax type's id.
          format: guid
          example: e56a7a95-d721-47a5-ad99-d812dacb58ac
        description:
          type: string
          description: The description of the tax type.
          example: GST
        isPrimary:
          type: boolean
          description: Whether this is a primary tax.
          example: true
        systemType:
          type: object
          description: The system tax type.
          example: GST
          $ref: '#/components/schemas/TaxSystemType'
      description: The tax type.
    TaxSystemType:
      type: string
      description: The system tax type.
      enum:
      - NonTaxed
      - GST
      - GSTFree
      - InputTaxed
      - SalesTax
      - NZImports
      - ReducedRate
      x-enumNames:
      - NonTaxed
      - GST
      - GSTFree
      - InputTaxed
      - SalesTax
      - NZImports
      - ReducedRate
    TaxReportingLocation:
      required:
      - appliesToPurchases
      - appliesToSales
      - id
      - reportAmountType
      - reportLocationType
      type: object
      properties:
        id:
          type: string
          description: The tax reporting location's id.
          format: guid
          example: ff3b6618-1807-40f7-8031-700456779db4
        taxCodeId:
          type: string
          description: The tax code's id.
          format: guid
          example: null
        taxGroupId:
          type: string
          description: The tax group's id.
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        location:
          type: string
          description: The location in the report.
          example: 1A
        appliesToPurchases:
          type: boolean
          description: Whether it applies to purchases.
        appliesToSales:
          type: boolean
          description: Whether it applies to sales.
          example: true
        reportAmountType:
          type: object
          description: The amount type.
          example: TaxAmount
          $ref: '#/components/schemas/AmountType'
        reportLocationType:
          type: object
          description: The report location type.
          example: TaxLodgement
          $ref: '#/components/schemas/TaxCodeReportLocationType'
      description: Tax reporting location.
    AmountType:
      type: string
      description: The type of an amount.
      enum:
      - InclusiveAmount
      - TaxAmount
      - ExclusiveAmount
      x-enumNames:
      - InclusiveAmount
      - TaxAmount
      - ExclusiveAmount
    TaxCodeReportLocationType:
      type: string
      description: Tax code reporting location.
      enum:
      - TaxSummary
      - TaxLodgement
      - NZGST101_IKnowSales
      - NZGST101_IKnowGST
      - UKVAT_Standard
      - UKVAT_FlatRate
      x-enumNames:
      - TaxSummary
      - TaxLodgement
      - NZGST101_IKnowSales
      - NZGST101_IKnowGST
      - UKVAT_Standard
      - UKVAT_FlatRate
    TaxRates:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/TaxRate'
      description: A list of tax rates.
    TaxRate:
      required:
      - id
      - rate
      - status
      - useOnPurchases
      - useOnSales
      type: object
      properties:
        id:
          type: string
          description: The tax rate's Id
          format: guid
          example: d45f44de-e37e-4cb6-8685-d2b96e4bf720
        name:
          type: string
          description: The tax rate's name.
          example: GST
        description:
          type: string
          description: The description of the tax rate.
          example: GST on sales
        rate:
          type: number
          description: The rate of tax.
          format: decimal
          example: 10.0
        status:
          type: object
          description: The status of the tax rate.
          example: Active
          $ref: '#/components/schemas/TaxStatus'
        useOnPurchases:
          type: boolean
          description: Whether the tax rate can be used on purchases.
          example: false
        useOnSales:
          type: boolean
          description: Whether the tax rate can be used on sales.
          example: true
      description: A tax rate.
    Items:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Item'
      description: A list of items.
    Item:
      required:
      - amountTaxStatus
      - createdDateTime
      - id
      - itemType
      - lastModifiedDateTime
      - status
      type: object
      properties:
        id:
          type: string
          description: The item's unique id.
          format: guid
          example: d1b8ced5-ff7d-4a47-96fa-10bfbe0990d6
        name:
          type: string
          description: The name of the item.
          example: Green Widget
        parentItem:
          type: object
          description: The parent item if there is one.
          example: |-
            {
                "id: "926d2c6c-d489-47b3-8813-9f62a8499994",
                "name": "Widgets"
            }
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        itemType:
          type: object
          description: The item type.
          example: Product
          $ref: '#/components/schemas/ItemType'
        itemCode:
          type: string
          description: The item code.
          example: WID001
        amountTaxStatus:
          type: object
          description: |-
            The amount tax status of the amounts in the item.
            This determines whether item prices include or exclude tax (i.e. gross or net).
          example: Inclusive
          $ref: '#/components/schemas/ItemAmountTaxStatus'
        status:
          type: object
          description: The item status.
          example: Active
          $ref: '#/components/schemas/ItemStatus'
        fullName:
          type: string
          description: The full name of the item.
          example: Widgets:Green Widget
        purchase:
          type: object
          description: Details for the item when it is purchased.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount:
              id: 59bfdb84-ab9c-4fa6-8364-b2ed60b87f31
              name: Cost of Sales
            description: A green widget that can be bought
            taxRate:
              id: 9f85a156-8a3b-449a-893b-02d603daee3b
              name: NCG
          allOf:
          - $ref: '#/components/schemas/ItemUse'
        sale:
          type: object
          description: Details for the item when it is sold.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount:
              id: 7667528a-c88c-4e6d-b55b-2d43177d16f0
              name: Income
            description: A green widget that can be sold
            taxRate:
              id: d45f44de-e37e-4cb6-8685-d2b96e4bf720
              name: GST
          allOf:
          - $ref: '#/components/schemas/ItemUse'
        createdDateTime:
          type: string
          description: The date and time when the item was created.
          format: date-time
          example: 2020-02-06T04:13:45.39Z
        lastModifiedDateTime:
          type: string
          description: The date and time when the item was last modified.
          format: date-time
          example: 2020-02-06T04:13:45.39Z
      description: Details of an item.
    ItemType:
      type: string
      description: The item type.
      enum:
      - Product
      - Service
      x-enumNames:
      - Product
      - Service
    ItemAmountTaxStatus:
      type: string
      description: The tax status of an item's amount.
      enum:
      - Inclusive
      - Exclusive
      x-enumNames:
      - Inclusive
      - Exclusive
    ItemStatus:
      type: string
      description: The status of an item.
      enum:
      - Active
      - Inactive
      x-enumNames:
      - Active
      - Inactive
    ItemUse:
      type: object
      properties:
        price:
          type: number
          description: |-
            The item's price.
            If the item's `amountTaxStatus` is `Inclusive` then the price includes tax (gross).
            If the item's `amountTaxStatus` is `Exclusive` then the price excludes tax (net).
          format: decimal
          example: 100.0
        priceAccuracy:
          type: integer
          description: The accuracy (number of decimal places) of the price.
          format: byte
          example: 2
        ledgerAccount:
          type: object
          description: The ledger account.
          example: expenses
          allOf:
          - $ref: '#/components/schemas/LedgerAccountRef'
        description:
          type: string
          description: The description.
          example: sell item 1
        taxRate:
          type: object
          description: The tax rate.
          example: GST
          allOf:
          - $ref: '#/components/schemas/TaxRateRef'
      description: Item usage details.
    ItemInput:
      required:
      - amountTaxStatus
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the item.
          example: API Item 1563336628
        parentItem:
          type: string
          description: The parent item if there is one.
          example: Product
        itemType:
          type: object
          description: The item type.
          example: Product
          $ref: '#/components/schemas/ItemType'
        itemCode:
          maxLength: 100
          type: string
          description: The item code.
          example: WID001
          default: null
        status:
          type: object
          description: The item status.
          example: Active
          $ref: '#/components/schemas/ItemStatus'
        purchase:
          type: object
          description: Details for the item when it is purchased.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount: expenses
            description: Purchase item 1
            taxRate: NCG
          allOf:
          - $ref: '#/components/schemas/ItemUseInput'
        sale:
          type: object
          description: Details for the item when it is sold.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount: Income
            description: Sell item 1
            taxRate: GST
          allOf:
          - $ref: '#/components/schemas/ItemUseInput'
        amountTaxStatus:
          type: object
          description: |-
            The amount tax status of the amounts in the item.
            This determines whether item prices include or exclude tax (i.e. gross or net).
          example: Exclusive
          $ref: '#/components/schemas/ItemAmountTaxStatus'
      description: Details of an item to create or update.
    ItemUseInput:
      required:
      - ledgerAccount
      type: object
      properties:
        price:
          type: number
          description: |-
            The item's price.
            If the item's `amountTaxStatus` is `Inclusive` then the price includes tax (gross).
            If the item's `amountTaxStatus` is `Exclusive` then the price excludes tax (net).
          format: decimal
          example: 4.54545455
        priceAccuracy:
          type: integer
          description: The accuracy (number of decimal places) of the price.
          format: byte
          example: 8
        ledgerAccount:
          minLength: 1
          type: string
          description: The ledger account.
          example: expenses
        description:
          maxLength: 1000
          type: string
          description: The description.
          example: sell item
          default: null
        taxRate:
          type: string
          description: The tax rate.
          example: GST
          default: null
      description: Item usage details.
    ItemPatch:
      type: object
      properties:
        name:
          type: string
          description: The name of the item.
          example: Green Widget
        parentItem:
          type: string
          description: The parent item if there is one.
          example: Widgets
        itemType:
          type: object
          description: The item type.
          example: Product
          $ref: '#/components/schemas/ItemType'
        itemCode:
          type: string
          description: The item code.
          example: WID001
        status:
          type: object
          description: The item status.
          example: Active
          $ref: '#/components/schemas/ItemStatus'
        purchase:
          type: object
          description: Details for the item when it is purchased.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount: expenses
            description: Purchase item 1
            taxRate: NTD
          allOf:
          - $ref: '#/components/schemas/ItemUsePatch'
        sale:
          type: object
          description: Details for the item when it is sold.
          example:
            price: 4.54545455
            priceAccuracy: 8
            ledgerAccount: Income
            description: Sell item 1
            taxRate: GST
          allOf:
          - $ref: '#/components/schemas/ItemUsePatch'
        amountTaxStatus:
          type: object
          description: |-
            The amount tax status of the amounts in the item.
            This determines whether item prices include or exclude tax (i.e. gross or net).
          example: Inclusive
          $ref: '#/components/schemas/ItemAmountTaxStatus'
      description: Details of an item to patch.
    ItemUsePatch:
      type: object
      properties:
        price:
          type: number
          description: |-
            The item's price.
            If the item's `amountTaxStatus` is `Inclusive` then the price includes tax (gross).
            If the item's `amountTaxStatus` is `Exclusive` then the price excludes tax (net).
          format: decimal
          example: 4.54545455
        priceAccuracy:
          type: integer
          description: The accuracy (number of decimal places) of the price.
          format: byte
          example: 8
        ledgerAccount:
          type: string
          description: The ledger account.
          example: expenses
        description:
          type: string
          description: The description.
          example: sell item 1
        taxRate:
          type: string
          description: The tax rate.
          example: GST
      description: Item usage details.
    TimeEntries:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/TimeEntry'
      description: A list of time entries.
    TimeEntry:
      required:
      - approvalStatus
      - billable
      - billableStatus
      - id
      - timeEntryDate
      type: object
      properties:
        id:
          type: string
          description: The time entry's id.
          format: guid
          example: c826f62a-bc45-40b9-af01-2ce6f3a8f23f
        employee:
          type: object
          description: The employee.
          example:
            id: 1e6b6a42-263c-430c-93cd-bf95bd078021
            name: Joe Bloggs
          allOf:
          - $ref: '#/components/schemas/EmployeeRef'
        timeEntryDate:
          type: string
          description: The date of the time entry.
          format: date-time
        project:
          type: object
          description: The project.
          example:
            id: d3d31928-c98d-4aca-9295-61570c1e420d
            name: Project A
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
        customer:
          type: object
          description: The customer.
          example:
            id: 675c9d07-128b-4818-be32-d6023d8baa9f
            name: Customer A
          allOf:
          - $ref: '#/components/schemas/OrganisationRef'
        classification:
          type: object
          description: The classification.
          example:
            id: 3068a717-fbdb-4dc6-add3-038e37f8b46b
            name: Classification A
          allOf:
          - $ref: '#/components/schemas/ClassificationRef'
        billable:
          type: boolean
          description: Whether the time entry is billable.
          example: true
        billableStatus:
          type: object
          description: The time entry's billable status.
          example: Unbilled
          $ref: '#/components/schemas/TimeEntryBillableStatus'
        approvalStatus:
          type: object
          description: The time entry's approval status.
          example: Approved
          $ref: '#/components/schemas/TimeEntryApprovalStatus'
        declineReason:
          type: string
          description: The reason why a time entry has been declined.
          example: Project is missing.
        item:
          type: object
          description: The item.
          example:
            id: 1a9a5ed7-80a4-441f-93e8-6c5eb22635bc
            name: Service A
          allOf:
          - $ref: '#/components/schemas/ItemRef'
        payrollItem:
          type: object
          description: The payroll pay item.
          example:
            id: d5b84ae8-4d1e-4822-9b21-019184660c94
            name: Standard hours
          allOf:
          - $ref: '#/components/schemas/PayItemRef'
        time:
          type: object
          description: Details of the time.
          allOf:
          - $ref: '#/components/schemas/TimeDetails'
        notes:
          type: string
          description: Notes.
          example: Notes about my time.
        transactionLinks:
          type: array
          description: Transactions linked to the time entry.
          example:
          - linkId: INV-8cc23593-4790-4f56-b2a1-92396b3f2aaf
            transactionType: Invoice
            transactionId: 8cc23593-4790-4f56-b2a1-92396b3f2aaf
            transactionNumber: INV0028
            transactionDate: 2020-02-06
            transactionReference: Ref 1234
            transactionAmount: 1000
            href: /a5f4afcc-e50c-4780-909d-a9fffe16ba26/invoices/8cc23593-4790-4f56-b2a1-92396b3f2aaf
          items:
            $ref: '#/components/schemas/TransactionLink'
      description: A time entry.
    TimeEntryBillableStatus:
      type: string
      description: Time entry billable status.
      enum:
      - NonBillable
      - Unbilled
      - Invoiced
      - Billed
      x-enumNames:
      - NonBillable
      - Unbilled
      - Invoiced
      - Billed
    TimeEntryApprovalStatus:
      type: string
      description: Time entry approval status.
      enum:
      - Draft
      - Submitted
      - Approved
      - Declined
      x-enumNames:
      - Draft
      - Submitted
      - Approved
      - Declined
    TimeDetails:
      required:
      - duration
      type: object
      properties:
        startTime:
          type: string
          description: The start time.
          format: time-span
          example: 08:00
        endTime:
          type: string
          description: The end time.
          format: time-span
          example: 12:00
        duration:
          type: integer
          description: The duration in minutes.
          format: int32
          example: 240
      description: Time details for a time entry.
    TimeEntryInput:
      required:
      - approvalStatus
      - employee
      - time
      - timeEntryDate
      type: object
      properties:
        employee:
          minLength: 1
          type: string
          description: The id or name of the employee that spent the time.
          example: John Smith
        timeEntryDate:
          type: string
          description: Date of the time entry.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project on which the time was spent on.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: John's new garage
        customer:
          type: string
          description: The id or name of the customer for whom the time was spent
            on.
          example: John Smith
        classification:
          type: string
          description: The id or name of the classification.
          example: Classification A
        billable:
          type: boolean
          description: Whether the time can be billed to a customer.
          example: true
        approvalStatus:
          type: object
          description: |-
            The time entry's approval status.
            Note that this cannot be set via POST or PUT.
          example: Approved
          $ref: '#/components/schemas/TimeEntryApprovalStatus'
        item:
          type: string
          description: |-
            The id or full name of the item that the time entry relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        payrollItem:
          type: string
          description: The id or full name of the payroll pay item that the time entry
            relates to.
          example: Standard hours
        time:
          type: object
          description: Details of the time spent.
          example:
            startTime: 09:00
            endTime: 10:30
          allOf:
          - $ref: '#/components/schemas/TimeDetailsInput'
        notes:
          type: string
          description: Notes related to the time entry.
          example: This is a note.
          default: null
        declineReason:
          type: string
          description: |-
            Reason why time entry approval was declined.
            Note that this cannot be set via POST.
          example: I don't approve of this.
      description: Details of a time entry to create or update.
    TimeDetailsInput:
      type: object
      properties:
        startTime:
          type: string
          description: The start time. Required if duration is not specified.
          format: time-span
          example: 08:00
        endTime:
          type: string
          description: The end time. Required if duration is not specified.
          format: time-span
          example: 12:00
        duration:
          type: integer
          description: The duration in minutes. Used if specified, otherwise calculated
            from startTime and endTime.
          format: int32
          example: 240
      description: Time details for a time entry being created or updated.
    TimeEntryPatch:
      required:
      - approvalStatus
      - timeEntryDate
      type: object
      properties:
        employee:
          type: string
          description: The id or name of the employee that spent the time.
          example: John Smith
        timeEntryDate:
          type: string
          description: Date of the time entry.
          format: date-time
        project:
          type: string
          description: |-
            The id or full name of the project on which the time was spent on.
            Note that the full name includes the name(s) of any parent project(s) separated by colons.
          example: John's new garage
        customer:
          type: string
          description: The id or name of the customer for whom the time was spent
            on.
          example: John Smith
        classification:
          type: string
          description: The id or name of the classification.
          example: Classification A
        billable:
          type: boolean
          description: Whether the time can be billed to a customer.
          example: true
        approvalStatus:
          type: object
          description: The time entry's approval status.
          example: Approved
          $ref: '#/components/schemas/TimeEntryApprovalStatus'
        item:
          type: string
          description: |-
            The id or full name of the item that the time entry relates to.
            Note that the full name includes the name(s) of any parent item(s) separated by colons.
          example: Parent item:Child item
        payrollItem:
          type: string
          description: The id or full name of the payroll pay item that the time entry
            relates to.
          example: Standard hours
        time:
          type: object
          description: Details of the time spent.
          example:
            startTime: 09:00
            endTime: 10:30
          allOf:
          - $ref: '#/components/schemas/TimeDetailsPatch'
        notes:
          type: string
          description: Notes related to the time entry.
          example: This is a note.
        declineReason:
          type: string
          description: Reason why time entry approval was declined.
          example: I don't approve of this.
      description: Details of a time entry to patch.
    TimeDetailsPatch:
      type: object
      properties:
        startTime:
          type: string
          description: The start time. Required if duration is not specified.
          format: time-span
          example: 08:00
        endTime:
          type: string
          description: The end time. Required if duration is not specified.
          format: time-span
          example: 12:00
        duration:
          type: integer
          description: The duration in minutes. Used if specified, otherwise calculated
            from startTime and endTime.
          format: int32
          example: 240
      description: Time details for a time entry being patched.
    Users:
      type: object
      properties:
        list:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/User'
      description: A list of users.
    User:
      required:
      - currentUser
      - id
      - invitationStatus
      type: object
      properties:
        id:
          type: string
          description: Then user's unique id.
          format: guid
        name:
          type: string
          description: The user's name.
        email:
          type: string
          description: The user's email address.
        portalUserId:
          type: string
          description: The user's unique Reckon Id.
        employee:
          type: object
          description: The user's employee reference.
          allOf:
          - $ref: '#/components/schemas/EmployeeRef'
        roles:
          type: array
          description: List of roles user is assigned to.
          items:
            $ref: '#/components/schemas/RoleRef'
        currentUser:
          type: boolean
          description: Indicates whether this is the currently logged in user.
        lastLoggedInDateTime:
          type: string
          description: The last time the user logged in.
          format: date-time
        invitationStatus:
          type: object
          description: The status of the invitation.
          $ref: '#/components/schemas/UserEmployeeInvitationStatus'
      description: A user.
    RoleRef:
      type: object
      properties:
        id:
          type: integer
          description: The unique id.
          format: int32
        name:
          type: string
          description: The unique name.
      description: Reference to a role.
    UserEmployeeInvitationStatus:
      type: string
      description: Status of user employee invitation.
      enum:
      - Invited
      - InvitationExpired
      - InvitationPending
      - ReadyToInvite
      - Cancelled
      x-enumNames:
      - Invited
      - InvitationExpired
      - InvitationPending
      - ReadyToInvite
      - Cancelled
  securitySchemes:
    oauth2:
      scheme: bearer
      type: http  
x-generator: NSwag v13.9.3.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))
