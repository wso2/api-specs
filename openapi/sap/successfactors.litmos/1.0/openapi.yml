openapi: 3.0.1
info:
  title: SAP SuccessFactors Litmos
  description: 
    This is a generated connector for [SAP SuccessFactors Litmos API v1.0](https://api.sap.com/api/ScreeningHits/resource) OpenAPI specification. 

    Litmos is a cloud-based solution that unifies virtual, classroom, mobile,
    and social learning. Our solutions empower training departments, sales and service
    leaders, safety and compliance managers, and HR teams to collaborate, author,
    globally distribute, and track web-based training courses, as well as schedule
    and track instructor-led courses. It automates formerly burdensome tasks so that
    teams can focus their energy on aligning training with the company's strategic
    agenda.

  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials.
    Create and configure an API key credentials by following [this guide](https://support.litmos.com/hc/en-us/articles/227734667-Overview-Developer-API).
  x-ballerina-display:
    label: SAP SuccessFactors Litmos
    iconPath: "icon.png"
  termsOfService: https://www.litmos.com/terms
  version: "1.0"
externalDocs:
  description: Overview of SAP Litmos Developer API
  url: https://litmos.zendesk.com/hc/en-us/articles/227734667-Overview-Developer-API
# servers:
# - url: https://hostname/v1.svc
security:
- ApiKeyAuth: []
tags:
- name: Achievements
- name: Activity Logs
- name: Bulk Imports
- name: Collections & Collection Listings
- name: Courses
- name: Course Custom Fields
- name: Date Range API's
- name: Ecommerce
- name: Gamification
- name: Instructor Led Training (ILT)
- name: Learning Paths
- name: Modules
- name: SCORM & Tin Can eLearning Files
- name: Self Signup Tokens
- name: Teams
- name: Team Users
- name: Team Administrators
- name: Team Leaders
- name: Team Courses
- name: Team Learning Paths
- name: Users
- name: Users Custom Fields
- name: Users Courses
- name: Users Learning Paths
- name: Users Teams
- name: xAPI
paths:
  /achievements:
    get:
      tags:
      - Achievements
      summary: Get Achievements
      description: Get user achievements. Achievement records are generated for each
        course completion.
      operationId: Get Achievements
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: since
        in: query
        description: Date-time
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Achievements'
            application/json:
              schema:
                $ref: '#/components/schemas/Achievements'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /bulkimports:
    get:
      tags:
      - Bulk Imports
      summary: Get a list of recent user import jobs
      description: Get a list of recent user import jobs processed for an organization.
        User import jobs can create and update user records.
      operationId: GetaListofRecentUserImportJobs
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserBulkImports'
            application/json:
              schema:
                $ref: '#/components/schemas/UserBulkImports'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        500:
          description: Get Bulk Imports Failed.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
    post:
      tags:
      - Bulk Imports
      summary: Bulk import user records
      description: Import users to create and/or update user records. 2000 KB can
        be processed in a single import through the API.
      operationId: BulkImportUsers
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: sendmessage
        in: query
        description: set to "True" to send login emails to new users
        schema:
          type: boolean
      - name: skipfirstlogin
        in: query
        description: set to "True" to have users skip setting a password after logging
          in
        schema:
          type: boolean
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/UserImports'
          application/json:
            schema:
              $ref: '#/components/schemas/UserImports'
        required: true
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserBulkImport'
            application/json:
              schema:
                $ref: '#/components/schemas/UserBulkImport'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        500:
          description: Create Bulk Import Failed.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
      x-codegen-request-body-name: Body
  /bulkimports/{bulkImportId}:
    get:
      tags:
      - Bulk Imports
      summary: Get the status of a user record import
      description: Get the details and status of a user import job.
      operationId: GettheStatusofaUserImportJob
      parameters:
      - name: bulkImportId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserBulkImport'
            application/json:
              schema:
                $ref: '#/components/schemas/UserBulkImport'
        400:
          description: Bulk Import Id was not found.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        500:
          description: Get Bulk Import Failed.
          content: {}
      deprecated: false
  /bulkimports/{bulkImportId}/usererrors:
    get:
      tags:
      - Bulk Imports
      summary: Get the list of user errors for an import
      description: Get the user processiong error details for a particular import
        job.
      operationId: GettheUserImportErrors
      parameters:
      - name: bulkImportId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: IsAPI
        in: query
        description: Set to "false" to fetch import errors for an import performed
          from the user interface. Do not include the parameter unless the value is
          set to "false".
        schema:
          type: boolean
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        400:
          description: Bulk Import Id was not found.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        500:
          description: Get Bulk Import Failed.
          content: {}
      deprecated: false
  /bulkimports/courses:
    post:
      tags:
      - Bulk Imports
      summary: Bulk import course records
      description: Import courses to create and/or update course records. 100 records
        can be processed in a single import through the API.
      operationId: BulkImportCourses
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/CourseImports'
          application/json:
            schema:
              $ref: '#/components/schemas/CourseImports'
        required: true
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseBulkImport'
            application/json:
              schema:
                $ref: '#/components/schemas/CourseBulkImport'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        500:
          description: Create Course Bulk Import Failed.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
      x-codegen-request-body-name: Body
  /collections:
    get:
      tags:
      - Collections & Collection Listings
      summary: Get a list of collection records
      description: Get a list of collection records.
      operationId: GetaListofCollections
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Collections'
            application/json:
              schema:
                $ref: '#/components/schemas/Collections'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: Collections do not exist.
          content: {}
    post:
      tags:
      - Collections & Collection Listings
      summary: Create a Collection
      description: Create one or more collection records.
      operationId: CreateaCollection
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Collection'
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Collections'
            application/json:
              schema:
                $ref: '#/components/schemas/Collections'
        400:
          description: Please provide a downloadable link for Image URL Or Invalid
            File Type For Collection Image Or Collection Image file too large.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or Failed to upload file
            image or you do not have the proper permissions for this call.
          content: {}
      x-codegen-request-body-name: Body
  /collectionlistings:
    post:
      tags:
      - Collections & Collection Listings
      summary: Create a Collection Listing
      description: Create listing entitlement records within a collection.
      operationId: CreateaCollectionListing
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Listing'
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
        required: true
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Listing'
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or Listing Name is required
            Or DurationType dynamic requires DurationDays Or DurationType Fixed requires
            FixedDate Or You do not have the proper permissions for this call.
          content: {}
        404:
          description: Collection Id does not exist.
          content: {}
      x-codegen-request-body-name: Body
  /collectionlistings/{collectionId}:
    get:
      tags:
      - Collections & Collection Listings
      summary: Get Collection Listings
      description: Get a list of collection listing entitlement records that belong
        to a collection.
      operationId: GetCollectionListings
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Listings'
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: Listings for collection - collectionId does not exist.
          content: {}
  /collectionlistings/{listingId}/users:
    get:
      tags:
      - Collections & Collection Listings
      summary: Get users added to a Listing
      description: Get the list of user records that have been added to a collection
        listing entitlement.
      operationId: GetUsersAddedtoaListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ListingUsers'
            application/json:
              schema:
                $ref: '#/components/schemas/ListingUsers'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: Users do not exist in list.
          content: {}
    post:
      tags:
      - Collections & Collection Listings
      summary: Add users to a Listing
      description: Add a list of user records to a collection listing entitlement.
      operationId: PostUserstoaListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Users'
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: Exceeds Listing User Limit - listingid Or No listing with this
            id - listingid exists in your organization, or the user list is empty.
          content: {}
        500:
          description: Listing has expired.
          content: {}
      x-codegen-request-body-name: Body
  /collectionlistings/{listingId}/users/{userId}:
    delete:
      tags:
      - Collections & Collection Listings
      summary: Delete a User from a Listing
      description: Remove a user record from a collection listing entitlement.
      operationId: DeleteaUserfromaListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: Delete User from Listing Failed.
          content: {}
  /collectionlistings/{listingId}/teams:
    get:
      tags:
      - Collections & Collection Listings
      summary: Get Teams Added to a Listing
      description: Get a list of team records that have been added to a collection
        listing entitlement.
      operationId: GetTeamsAddedtoaListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Teams'
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: Teams are not attached to list.
          content: {}
  /collectionlistings/{listingId}/team/{teamId}:
    post:
      tags:
      - Collections & Collection Listings
      summary: Add a Team to a Listing
      description: Add a team record to a collection listing entitlement.
      operationId: PostaTeamtoaListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: Listing is limited cannot add team Or Invalid Listing ids.
          content: {}
    delete:
      tags:
      - Collections & Collection Listings
      summary: Remove a Team from a Listing
      description: Remove a team record from a collection listing entitlement.
      operationId: RemoveATeamFromListing
      parameters:
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Collection feature is not enabled Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: Listing is limited cannot add team Or Invalid Listing ids.
          content: {}
  /collections/{collectionId}/courses:
    post:
      tags:
      - Collections & Collection Listings
      summary: Add Courses to a Collection
      description: Add course records into the content set of a collection record.
      operationId: AddCoursestoaCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body'
          application/json:
            schema:
              $ref: '#/components/schemas/Body'
        required: true
      responses:
        200:
          description: Created.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Please provide maximum 25 courses in the xml/json body! Or
            You do not have the proper permissions for this call.
          content: {}
        404:
          description: The collectionId - collectionId does not exist or no courses
            were included in the xml/json body or courses that you requested does
            not exist Or Not Found - The courses do not exist.
          content: {}
        409:
          description: Conflict - Duplicate courses in the request Or One or more
            of these records are invalid, inactive or do not exist Or Conflict - One
            or more courses have already been added to the Collection.
          content: {}
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Collections & Collection Listings
      summary: Remove a Course from a Collection
      description: Remove a course record from the content set of a collection.
      operationId: RemoveaCoursefromaCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Courses must be deleted one by one Or You do not have the proper
            permissions for this call.
          content: {}
        404:
          description: The collectionId - collectionId does not exist or no courses
            were included in the xml/json body or courses that you requested does
            not exist Or The collection does not exist Or The course does not exist
            Or The collection does not have the course assigned to it.
          content: {}
      x-codegen-request-body-name: Body
  /collections/{collectionId}/learningpaths:
    post:
      tags:
      - Collections & Collection Listings
      summary: Add LearningPaths to a Collection
      description: Add learning path records into the content set of a collection
        record.
      operationId: AddLearningPathstoaCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_2'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_2'
        required: true
      responses:
        201:
          description: Created.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Please provide maximum 25 learningpaths in the xml/json body!
            Or You do not have the proper permissions for this call.
          content: {}
        404:
          description: The collectionId - collectionId does not exist or no learningpaths
            were included in the xml/json body or learningpaths that you requested
            does not exist Or Not Found - The learningpaths do not exist.
          content: {}
        409:
          description: Conflict - Duplicate learningpaths in the request Or One or
            more of these records are invalid, inactive or do not exist Or Conflict
            - One or more learningpaths have already been added to the Collection.
          content: {}
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Collections & Collection Listings
      summary: Remove a Learning Path from a Collection
      description: Remove a learning path record from the content set of a collection.
      operationId: RemoveaLearningPathfromaCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Learningpaths must be deleted one by one Or You do not have
            the proper permissions for this call.
          content: {}
        404:
          description: The collectionId - collectionId does not exist or no learningpaths
            were included in the xml/json body or learningpaths that you requested
            does not exist Or The collection does not exist Or The learningpath does
            not exist Or The collection does not have the learningpath assigned to
            it.
          content: {}
      x-codegen-request-body-name: Body
  /collection/{collectionId}:
    delete:
      tags:
      - Collections & Collection Listings
      summary: Delete Collection
      description: Delete a collection record. This can only be done once all collection
        listings are deleted.
      operationId: DeleteCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: One or more Listings Exists Or Invalid CollectionID Or You
            do not have the proper permissions for this call.
          content: {}
        409:
          description: The Collection Id do not match. Please check the XML/json request
            and the URL.
          content: {}
  /collectionlistings/{collectionId}/{listingId}:
    delete:
      tags:
      - Collections & Collection Listings
      summary: Delete a Collection Listing
      description: Delete a collection listing entitlement record. This can only be
        done once all users and teams are removed from the collection listing entitlement.
      operationId: DeleteCollectionListing
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: listingId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Invalid CollectionID Or Invalid ListingID Or One or more Users
            exists in the listing Or You do not have the proper permissions for this
            call.
          content: {}
        409:
          description: The Listing Id or Collection Id do not match. Please check
            the XML/json request and the URL.
          content: {}
  /courses:
    get:
      tags:
      - Courses
      summary: Get a List of Courses
      description: Get a list of all course records.
      operationId: GetaListofCourses
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Courses'
            application/json:
              schema:
                $ref: '#/components/schemas/Courses'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
  /courses/{courseId}:
    get:
      tags:
      - Courses
      summary: Get Course
      description: Get the basic information for a course record.
      operationId: GetCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. or You do not have the proper permissions for this
            call
          content: {}
        404:
          description: The course courseId does not exist.
          content: {}
    delete:
      tags:
      - Courses
      summary: Delete Course
      description: Delete a course record.
      operationId: DeleteCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Invalid ProgramID or You do not have the proper permissions
            for this call.
          content: {}
        409:
          description: The Course Id do not match. Please check the XML/json request
            and the URL.
          content: {}
  /courses/{courseId}/details:
    get:
      tags:
      - Courses
      summary: Get Course Details
      description: Get all the details of a course record.
      operationId: GetCourseDetails
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The Course  courseId  is invalid or does not exist!
          content: {}
        409:
          description: The Course Id do not match. Please check the XML/json request
            and the URL.
          content: {}
        500:
          description: Error while processing request
          content: {}
  /courses/{courseId}/users:
    get:
      tags:
      - Courses
      summary: List All Users Assigned to a Course
      description: Get a list of all user records assigned to a course.
      operationId: ListAllUsersAssignedtoaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
  /courses/{courseId}/modules:
    get:
      tags:
      - Courses
      summary: List all Modules in a Course
      description: Get a list of all module records added to a course.
      operationId: ListAllModulesInaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Modules'
            application/json:
              schema:
                $ref: '#/components/schemas/Modules'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
  /results/details:
    get:
      tags:
      - Courses
      summary: List All Course Results for All Users Since a Specific Date
      description: Get a list of all course results for all user records since a specific
        date.
      operationId: ListAllCourseResultsforAllUsersSinceaSpecificDate
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        406:
          description: The maxminum number of records to return is 1000. You can use
            paging parameters to return records in groups of 1000 or Please provide
            a valid 'since=' query string parameter. Valid formats are 'yyyy-MM-dd
            HH:mm:ss' or 'yyyy-MM-dd HH:mm' or 'yyyy-MM-dd'
          content: {}
  /courses/{courseId}/coursecustomfields:
    get:
      tags:
      - Courses
      summary: Get Custom Fields for a Course
      description: Get the values of the custom fields for a course record.
      operationId: GetCustomFieldsforaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /coursecustomfields:
    get:
      tags:
      - Course Custom Fields
      summary: Get Course Custom Fields
      description: Get all custom field details including attributes and values.
      operationId: GetCourseCustomFields
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseCustomFields'
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCustomFields'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /coursecustomfields/{customFieldId}:
    get:
      tags:
      - Course Custom Fields
      summary: Get Value for Custom Field Id Across All Courses
      description: Get the details of a custom field record including attributes and
        values.
      operationId: GetCourseCustomFieldValueonAllCourses
      parameters:
      - name: customFieldId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CourseCustomField'
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCustomField'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/modules:
    get:
      tags:
      - Date Range API's
      summary: Get Modules
      description: Get all the module records in an organization that was created/
        updated within a given date range.
      operationId: GetModules
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/courses:
    get:
      tags:
      - Date Range API's
      summary: Get Courses
      description: Get all the course records in your organization that were created
        or updated within a given date range.
      operationId: GetCourses
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/learningpaths:
    get:
      tags:
      - Date Range API's
      summary: Get Learning Paths
      description: Get all learning path records that were created/updated within
        a given date range.
      operationId: GetLearningPaths
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/modules/results:
    get:
      tags:
      - Date Range API's
      summary: Get Modules Results
      description: Get a list of all user module result records that have changed
        within a given date range. parameters you can use.
      operationId: GetModulesResults
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/results/details:
    get:
      tags:
      - Date Range API's
      summary: Get Course Results
      description: Get a list of all user course result records that have changed
        within a given date range.
      operationId: GetCourseResults
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Forbidden. Please check your API key, content-type, parameters,
            etc.
          content: {}
        404:
          description: Not Found. The record you requested does not exist.
          content: {}
        503:
          description: Service Unavailable. The API rating limit has been exceeded.
          content: {}
  /org/learningpaths/results:
    get:
      tags:
      - Date Range API's
      summary: Get Learning Path Results
      description: Get a list of all user learning paths result records that have
        changed within a given date range.
      operationId: GetLearningPathResults
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/achievements:
    get:
      tags:
      - Date Range API's
      summary: Get Achievements
      description: Get a list of all user records that have earned achievements within
        a given date range.
      operationId: GetAchievements1
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/courses/modules:
    get:
      tags:
      - Date Range API's
      summary: Get Course Modules
      description: Get all module records added or removed from a course within a
        given date range.
      operationId: GetCourseModules
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/learningpaths/courses:
    get:
      tags:
      - Date Range API's
      summary: Get Learning Path Courses
      description: Get all course records added or removed from a learning path within
        a given date range.
      operationId: GetLearningPathCourses
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/users/courses:
    get:
      tags:
      - Date Range API's
      summary: Get User Course Assignments
      description: Get all course records assigned to users within a given date range.
      operationId: GetUserCourseAssignments
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/learningpaths/users:
    get:
      tags:
      - Date Range API's
      summary: Get User Learning Path Assignments
      description: Get all learning path records assigned to users within a given
        date range.
      operationId: GetUserLearningPathAssignments
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/teams:
    get:
      tags:
      - Date Range API's
      summary: Get Teams
      description: Get all team records that were created or modified within a given
        date range.
      operationId: GetTeams
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/teams/users:
    get:
      tags:
      - Date Range API's
      summary: Get  Team Users
      description: Get all user team assignment records that were created or modified
        within a given date range. 
      operationId: GetTeamUsers
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/teams/courses:
    get:
      tags:
      - Date Range API's
      summary: Get Team Courses
      description: Get all team course assignment recors that were created or modified
        within a given date range.
      operationId: GetTeamCourses
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/teams/learningpaths:
    get:
      tags:
      - Date Range API's
      summary: Get  Team Learning Paths
      description: Get all team learning path assignment records that were created
        or modified within a given date range.
      operationId: GetTeamLearningPaths
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/users/logins:
    get:
      tags:
      - Date Range API's
      summary: Get User Logins
      description: Get a list of user records including 'active' and 'inactive' that
        have logged into the application within a given date range.
      operationId: GetUserLogins
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/users/details:
    get:
      tags:
      - Date Range API's
      summary: Get User Details
      description: Get a list of user records including 'active' and 'inactive' that
        have been created or updated within a given date range.
      operationId: GetUserDetails
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/ecommerce/coursesessions:
    get:
      tags:
      - Ecommerce
      summary: Get a List of Future ILT Sessions within Courses Enabled for Ecommerce
      description: Get a list of course records enabled for ecommerce that contain
        future dated ILT sessions that have been created or updated within a given
        date range.
      operationId: GetaListofFutureILTSessionswithinCoursesEnabledforEcommerce
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/ecommerce/courses:
    get:
      tags:
      - Ecommerce
      summary: Get a List of Courses Enabled for Ecommerce
      description: Get a list of course records enabled for ecommerce that have been
        created or updated within a given date range.
      operationId: GetaListofCoursesEnabledforEcommerce
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/ecommerce/learningpaths:
    get:
      tags:
      - Ecommerce
      summary: Get a List of Learning Paths Enabled for Ecommerce
      description: Get a list of learning path records enabled for ecommerce that
        have been created or updated within a given date range.
      operationId: GetaListofLearningPathsEnabledforEcommerce
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
        400:
          description: Bad Request. Please check that your URI and request body are
            properly formed.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /users/{userId}/gamificationsummary:
    get:
      tags:
      - Gamification
      summary: Get Total Badges and Points For User
      description: Get the number of badges and total points for a user record.
      operationId: GetTotalBadgesandPointsForUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Gamification is not enabled in the organisation or You do not
            have the proper permissions for this call.
          content: {}
        404:
          description: The user in the xml/json request does not exist.
          content: {}
      deprecated: false
  /users/{userId}/badges:
    get:
      tags:
      - Gamification
      summary: Get Total Badges Earned By a User
      description: Get the number of badges earned by a user
      operationId: GetTotalBadgesForUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Gamification is not enabled in the organisation or You do not
            have the proper permissions for this call.
          content: {}
        404:
          description: The user in the xml/json request does not exist.
          content: {}
      deprecated: false
  /users/{userId}/gamificationdetails:
    get:
      tags:
      - Gamification
      summary: Get Badges and Points Earned By User
      description: Get the badge and point details for each course record or learning
        path record completed by a user.
      operationId: GetBadgesandPointsEarnedByUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The user in the xml/json request does not exist.
          content: {}
      deprecated: false
  /teams/{teamId}/gamificationdetails:
    get:
      tags:
      - Gamification
      summary: Get Badges and Points Earned by a Team
      description: Get the badge and point details for each course record or learning
        path record completed by a user belonging to a team record.
      operationId: GetBadgesandPointsEarnedbyaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The team in the xml/json request does not exist.
          content: {}
      deprecated: false
  /users/{userId}/gamificationreset:
    put:
      tags:
      - Gamification
      summary: Reset Badges and Points For  a User
      description: Resets the gamification badge records and point records earned
        by a user.
      operationId: ResetBadgesandPointsForaUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The user does not exist.
          content: {}
        500:
          description: Reset Gamification for user failed
          content: {}
      deprecated: false
  /sessions/future:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of Future Sessions for an ILT Module
      description: Get a list of future dated live session event records from all
        ILT modules.
      operationId: GetaListofFutureSessionsforanILTModule
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: since
        in: query
        description: Date-time
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /sessions/past:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of Past Sessions for an ILT Module
      description: Get a list of live session event records from the past across all
        ILT modules.
      operationId: GetaListofPastSessionsforanILTModule
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: since
        in: query
        description: Date-time
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /courses/{courseId}/modules/ILT:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of all ILT Modules in a Course
      description: Get a list of ILT Module records in a course.
      operationId: GetaListofallILTModulesinaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /courses/{courseId}/modules/{moduleId}/sessions:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of Sessions in an ILT Module
      description: Get a list of live session event records in an ILT module.
      operationId: GetaListofSessionsinanILTModule
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
    post:
      tags:
      - Instructor Led Training (ILT)
      summary: Create a New ILT Session for a Module
      description: Creates a new live session event record in an ILT module that belongs
        to a course.  Class Room, Webinar, Webex Training, GoToTraining and Zoom live
        session events can be created.
      operationId: CreateaNewILTSessionforaModule
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Session'
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        201:
          description: Created.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call. or Instructor
            is not valid. please cross check once and try again. or Your WebEx account
            is not authorized.
          content: {}
        404:
          description: The session in the xml/json request does not exist.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/{moduleId}/sessions/{sessionId}:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a Specific Session in an ILT Module
      description: Get the details for a live session event record in an ILT module
        in a course.
      operationId: GetaSpecificSessioninanILTModule
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The  sessionId does not exist. or The session in the xml/json
            request does not exist
          content: {}
      deprecated: false
    put:
      tags:
      - Instructor Led Training (ILT)
      summary: Update a Session in an ILT Module
      description: Update the details of a live session event record belonging to
        an ILT module in a course.
      operationId: UpdateaSessioninanILTModule
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Session'
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call. or Instructor
            is not valid. please cross check once and try again.
          content: {}
        404:
          description: The session Ids do not match. Please check the XML/json request
            and the URL. or The session in the xml/json request does not exist.
          content: {}
        409:
          description: Conflict
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Instructor Led Training (ILT)
      summary: Delete a Session in an ILT Module.
      description: Delete a live session event record from an ILT module in a course.
      operationId: DeleteaSessioninanILTModule.
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No session with this id exists in your organization
          content: {}
        409:
          description: The session Ids do not match. Please check the XML/json request
            and the URL.
          content: {}
      deprecated: false
  /instructors:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of All Instructors
      description: Get a list of all instructors for live session events.
      operationId: GetaListofAllInstructors
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /instructors/{instructorId}/sessions:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a List of Sessions for a Specific Instructor
      description: Get a list of the live session events for an instructor.
      operationId: GetaListofSessionsforaSpecificInstructor
      parameters:
      - name: instructorId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The instructor in the xml/json request does not exist.
          content: {}
      deprecated: false
  /courses/{courseId}/modules/{moduleId}/sessions/{sessionId}/rollcall:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get Session Roll Call for a Session
      description: Get a list of users that are registered to a live session event
        belonging to an ILT module in a course.
      operationId: GetSessionRollCallforaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The session in the xml/json request does not exist.
          content: {}
      deprecated: false
    post:
      tags:
      - Instructor Led Training (ILT)
      summary: Mark an ILT Session Complete and Add Score
      description: Update the scores and completions for a list of users registered
        to a live session event belonging to an ILT module in a course.
      operationId: MarkanILTSessionCompleteandAddScore
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/EventUsers'
          application/json:
            schema:
              $ref: '#/components/schemas/EventUsers'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No session with this id exists in your organization. or The
            session in the xml/json request does not exist.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/{moduleId}/registration:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get a list of Users Registered to a Session
      description: Get a list of users registered to a live session event belonging
        to an ILT module in a course.
      operationId: GetalistofUsersRegisteredtoaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The module in the xml/json request does not exist.
          content: {}
      deprecated: false
  /courses/{courseId}/modules/{moduleId}/sessions/{sessionId}/users/{userId}/register:
    post:
      tags:
      - Instructor Led Training (ILT)
      summary: Register a User to a Session
      description: Register a user record to a live session event belonging to an
        ILT module in a course.
      operationId: RegisteraUsertoaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No session with this id exists in your organization or The
            module in the xml/json request does not exist.
          content: {}
        409:
          description: The email is required to register at GoToTraining. Register
            failed at GoToTraining. or Please reauthorize instructor and try again.
            or The email is required to register at Webex. Register failed at Webex.or
            The email is required to register at Zoom. Register failed at Zoom.or
            The user is not assigned to the course. Please assign the user to this
            course first and then register the user for this session.
          content: {}
      deprecated: false
  /courses/{courseId}/modules/{moduleId}/sessions/{sessionId}/users/register:
    post:
      tags:
      - Instructor Led Training (ILT)
      summary: Register a List of Users to a Session
      description: Register a list of users to a live training session event.
      operationId: RegisteraListofUserstoaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Users'
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserSessionRegistrationStatus'
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessionRegistrationStatus'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No session with this id exists in your organization or The
            module in the xml/json request does not exist.
          content: {}
        409:
          description: The email is required to register at GoToTraining. Register
            failed at GoToTraining. or Please reauthorize instructor and try again.
            or The email is required to register at Webex. Register failed at Webex.or
            The email is required to register at Zoom. Register failed at Zoom.or
            The user is not assigned to the course. Please assign the user to this
            course first and then register the user for this session.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/{moduleId}/sessions/{sessionId}/attendance:
    get:
      tags:
      - Instructor Led Training (ILT)
      summary: Get user Attendance for a Session
      description: Get a list of user records that attended a live session event belonging
        to an ILT module in a course.
      operationId: GetuserAttendanceforaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call or Please
            reauthorize instructor and try again.
          content: {}
        404:
          description: The session in the xml/json request does not exist
          content: {}
      deprecated: false
  /courses/{courseId}/modules/{moduleId}/sessiondays/{sessiondayId}/users/{userId}/attended/{attended}:
    post:
      tags:
      - Instructor Led Training (ILT)
      summary: Mark Attendance for a User Registered to a Session
      description: Mark attendance for a user registered to a live session event belonging
        to an ILT module in a course.
      operationId: MarkAttendanceforUsersRegisteredtoaSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: sessiondayId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: attended
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The session in the xml/json request does not exist.
          content: {}
      deprecated: false
  /learningpaths:
    get:
      tags:
      - Learning Paths
      summary: Get All Learning Paths
      description: Get a list of all learning paths records.
      operationId: GetAllLearningPaths
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LearningPaths'
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPaths'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /learningpaths/{learningpathId}:
    get:
      tags:
      - Learning Paths
      summary: Get a learning path
      description: Get a learning path record. Returns a Single Learning Path. Access
        Level - Account Owners & Administrators
      operationId: GetaSpecificLearningPath
      parameters:
      - name: learningpathId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LearningPath'
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The learning path does not exist.
          content: {}
      deprecated: false
    delete:
      tags:
      - Learning Paths
      summary: Delete Learning Path
      description: Delete a learning path record.
      operationId: DeleteLearningPath
      parameters:
      - name: learningpathId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        409:
          description: The Learning Path Id do not match. Please check the XML/json
            request and the URL.
          content: {}
      deprecated: false
  /learningpaths/{learningpathId}/courses:
    get:
      tags:
      - Learning Paths
      summary: Get a List of Courses in a Learning Path
      description: Get a list of course records that belong to a learning path. Returns
        a list of Courses that have been added to a Learning Path. Access Level -
        Account Owners & Administrators
      operationId: GetaListofCoursesinaLearningPath
      parameters:
      - name: learningpathId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: ""
          content: {}
      deprecated: false
  /learningpaths/{learningpathId}/users:
    get:
      tags:
      - Learning Paths
      summary: Get a List of Users Assigned to a Learning Path
      description: Get a list of user records that are assigned to a learning path.
      operationId: GetaListofUsersAssignedtoaLearningPath
      parameters:
      - name: learningpathId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The learning path does not exist.
          content: {}
      deprecated: false
  /teams/{teamId}/learningpaths:
    get:
      tags:
      - Team Learning Paths
      summary: Get Learning Paths Assigned to a Team
      description: Get a list of all learning path records that are assigned to the
        team.
      operationId: GetLearningPathsAssignedtoaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LearningPaths'
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPaths'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The team  teamId   does not exist
          content: {}
      deprecated: false
    post:
      tags:
      - Team Learning Paths
      summary: Assign a List of Learning Paths to Team
      description: Assign a list of learning path records to a team. These learning
        paths will appear on the "to-do" list for users that belong to the team.
      operationId: AssignaListofLearningPathstoTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_4'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_4'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No team with this id exists in your organization, or there
            was no valid Learning Path Id in the body of the request.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Team Learning Paths
      summary: Unassign a List of Learning Paths from Team
      description: Remove a list of learning path records assigned to a Team. These
        learning paths will no longer appear on the "to-do" list for users that belong
        to the team.
      operationId: UnassignaListofLearningPathsfromTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No team with this id exists in your organization or there was
            no valid Learning Path Id in the body of the request.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /modules/{moduleId}:
    get:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Get a Module
      description: Get the content and details of a SCORM, Tin Can or AICC file.
      operationId: GetaModule
      parameters:
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Module'
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
    put:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Update a SCORM/Tin Can Module
      description: Update the content and details of SCORM, Tin Can or AICC file.
      operationId: UpdateaSCORM/TinCanModule
      parameters:
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Module'
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Modules
      summary: Delete Module
      description: Delete the content and details of a SCORM, Tin Can or AICC file.
      operationId: DeleteModule
      parameters:
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /results/modules/{moduleId}:
    put:
      tags:
      - Modules
      summary: Mark a Module Complete
      description: Mark a module record complete for a user.
      operationId: MarkaModuleComplete
      parameters:
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ModuleResult'
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleResult'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /modules:
    post:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Create a SCORM/Tin Can Module
      description: Upload the content and create the details for an elearning file.
      operationId: CreateaSCORM/TinCanModule
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Module'
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/copy:
    post:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Copy SCORM/Tin Can Module to a Course
      description: Copy an elearning module into a course record.
      operationId: CopySCORM/TinCanModuletoaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Modules'
          application/json:
            schema:
              $ref: '#/components/schemas/Modules'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/link:
    post:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Link SCORM/Tin Can Module to a Course
      description: Link an elearning module into a course record.
      operationId: LinkSCORM/TinCanModuletoaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Modules'
          application/json:
            schema:
              $ref: '#/components/schemas/Modules'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/mirror:
    post:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Mirror SCORM/Tin Can Module to a Course
      description: Mirror an elearning module into a course record.
      operationId: MirrorSCORM/TinCanModuletoaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Modules'
          application/json:
            schema:
              $ref: '#/components/schemas/Modules'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /courses/{courseId}/modules/{moduleId}:
    delete:
      tags:
      - SCORM & Tin Can eLearning Files
      summary: Remove SCORM/Tin Can Module from a Course
      description: Remove an eLearning module from a course record.
      operationId: RemoveSCORM/TinCanModulefromaCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: moduleId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
  /tokens/{tokenId}:
    get:
      tags:
      - Self Signup Tokens
      summary: Get a Token
      description: Get a self signup token record.
      operationId: GetaToken
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Token'
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Self Sign Up feature is not enabled. or You do not have the
            proper permissions for this call. or The token in the xml/json request
            does not exist.
          content: {}
      deprecated: false
  /tokens:
    get:
      tags:
      - Self Signup Tokens
      summary: Get A List of Tokens
      description: Get a list of self signup token records.
      operationId: GetAListofTokens
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tokens'
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Self Sign Up feature is not enabled or You do not have the
            proper permissions for this call.
          content: {}
      deprecated: false
    put:
      tags:
      - Self Signup Tokens
      summary: Update a Token
      description: Update the settings of a self signup token record.
      operationId: UpdateaToken
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Tokens'
          application/json:
            schema:
              $ref: '#/components/schemas/Tokens'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Self Sign Up feature is not enabled or System doesn't support
            creation or updation of more than 100 tokens in a single bulk import or  You
            do not have the proper permissions for this call
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    post:
      tags:
      - Self Signup Tokens
      summary: Create a Token
      description: Create a new self signup token record.
      operationId: CreateaToken
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Tokens'
          application/json:
            schema:
              $ref: '#/components/schemas/Tokens'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: Self Sign Up feature is not enabled or System doesn't support
            creation or updation of more than 100 tokens in a single bulk import or  You
            do not have the proper permissions for this call
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /org/activities/actions:
    get:
      tags:
      - Activity Logs
      summary: Get Actions Activity
      description: Get the recent system activity logs for user actions.
      operationId: GetActionsActivity
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ActionActivitys'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionActivitys'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid 'since' and 'to' query string parameters
          content: {}
      deprecated: false
  /org/activities/assignments:
    get:
      tags:
      - Activity Logs
      summary: Get Assignments Activity
      description: Get the recent system activity logs for user assignments.
      operationId: GetAssignmentsActivity
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/AssignmentActivitys'
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentActivitys'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call."
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/activities/content:
    get:
      tags:
      - Activity Logs
      summary: Get Content Activity
      description: Get the recent system activity logs for content updates.
      operationId: GetContentActivity
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ContentActivitys'
            application/json:
              schema:
                $ref: '#/components/schemas/ContentActivitys'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/activities/logins:
    get:
      tags:
      - Activity Logs
      summary: Get Login Activity
      description: Get the recent system activity logs for user logins.
      operationId: GetLoginActivity
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LoginActivitys'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginActivitys'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /org/activities/settings:
    get:
      tags:
      - Activity Logs
      summary: Get Settings Activity
      description: Get the recent system activity logs for settings updates.
      operationId: GetSettingsActivity
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: since
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SettingsActivitys'
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsActivitys'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please provide a valid since and to query string parameters
          content: {}
      deprecated: false
  /users:
    get:
      tags:
      - Users
      summary: List of Users
      description: Get a list of all user records.
      operationId: ListofUsers
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: showInactive
        in: query
        description: boolean value used to the filter active/inactive records
        schema:
          type: boolean
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
    post:
      tags:
      - Users
      summary: Create User
      description: Creates a new user record. By default, no emails will be sent when
        the user is created and the user will be prompted to set a password on the
        first login to the application. There are a mandatory list of fields that
        must be passed in order to create a user, and that list is order sensitive.
      operationId: CreateUser
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: sendmessage
        in: query
        description: set to "True" to send login emails to new users
        schema:
          type: boolean
      - name: skipfirstlogin
        in: query
        description: set to "True" to have users skip setting a password after logging
          in
        schema:
          type: boolean
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Please check the xml/json in the body of the request. OR Mobile
            Number required to enable text message notifications OR Invalid Phone
            Number. The mobile phone should be in this format +15554443333. Be sure
            to include your country code.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        409:
          description: UserName already exists OR Username must be greater than 3
            characters. OR Invalid special character's in the username. OR Invalid
            email address. OR Culture is invalid OR Job Role is invalid
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /users/paginated:
    get:
      tags:
      - Users
      summary: List of Users With Summary of User Pagination Details
      description: Get a list of all user records with summarized pagination information
      operationId: ListofUsersPaginated
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: showInactive
        in: query
        description: boolean value used to the filter active/inactive records
        schema:
          type: boolean
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserCollection'
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Get User by User Id
      description: Get the details of a single user record.
      operationId: GetUserbyUserId
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: User - userId was not found in Salesforce OR User - userId
            was not found
          content: {}
      deprecated: false
    put:
      tags:
      - Users
      summary: Update User
      description: Update a user record.  There are a mandatory list of fields that
        must be passed in order to update a user, and that list is order sensitive.
      operationId: UpdateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Please check the xml/json in the body of the request OR Mobile
            Number required to enable text message notifications OR Invalid Phone
            Number. The mobile phone should be in this format +15554443333. Be sure
            to include your country code.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: Please check the userid in the xml/json and the userid in the
            URL. They must match. OR The manager Id in the xml/json is not valid.
          content: {}
        409:
          description: UserName already exists OR Invalid special character's in the
            username. OR Culture is invalid OR Job Role is invalid OR Invalid email
            address
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Users
      summary: Delete a User
      description: Delete a user record.  This is a hard delete so the user record
        cannot be recovered.
      operationId: DeleteaUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: No user with this id exists in your organization OR You do
            not have the proper permissions for this call.
          content: {}
        404:
          description: No user with this id exists in your organization
          content: {}
      deprecated: false
  /users/details:
    get:
      tags:
      - Users
      summary: Get a List of Users with Details
      description: Get a list of all user records with user record details. By default
        only the first 100 people are returned. The list can be filtered on first
        or last name, paged using the optional paging parameters, and created date.\r\n\r\nTo
        return users with a Created Date after a specific date add "&since=YYYY-MM-DD"
        to the end of the request.  For example -  \r\n\r\nGET https://api.litmos.com/v1.svc/users/details?source=MY-APP&since=2015-12-09\r\n\r\nAccess
        Level - Account Owners Only
      operationId: GetaListofUserswithDetails
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: sort
        in: query
        description: Field used to sort the records
        schema:
          type: string
      - name: dir
        in: query
        description: Direction to sort the records
        schema:
          type: string
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      - name: since
        in: query
        description: Date-time
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        406:
          description: Please enter a valid date in the 'since' parameter OR Please
            provide a valid since parameter. Valid formats are  - "yyyy-MM-dd HH:mm:ss"
            or "yyyy-MM-dd HH:mm" or "yyyy-MM-dd"
          content: {}
      deprecated: false
  /users/{userId}/usercustomfields:
    get:
      tags:
      - Users Custom Fields
      summary: Get Advanced Custom Fields for User
      description: Get a list of the user custom fields configured for the organization.
      operationId: GetAdvancedCustomFieldsforUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The user does not exist.
          content: {}
        500:
          description: Reset Gamification for user failed
          content: {}
      deprecated: false
    post:
      tags:
      - Users Custom Fields
      summary: Add Advanced Custom Fields for User
      description: Update the user custom field values for a user record.
      operationId: AddAdvancedCustomFieldsforUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_5'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_5'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Please check the xml/json in the body of the request.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: A value for custom field is required or User   was not found
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /users/{userId}/courses:
    get:
      tags:
      - Users Courses
      summary: List All Courses Assigned to a User
      description: Get a list of courses assigned to a user record with each course
        status.
      operationId: ListAllCoursesAssignedtoaUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_28'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_28'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
    post:
      tags:
      - Users Courses
      summary: Assign Courses to User
      description: Assign a list of course records to a User. By default, emails will
        be sent when the user when the courses are assigned.
      operationId: AssignCoursestoUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: sendmessage
        in: query
        schema:
          type: boolean
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_6'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_6'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        500:
          description: Create Course Bulk Import Failed
          content: {}
      x-codegen-request-body-name: Body
  /users/{userId}/courses/{courseId}/reset:
    put:
      tags:
      - Users Courses
      summary: Reset Course Results
      description: Reset a user's course result record. This will revert the course
        to incomplete with 0% completion status and move the course back to the learners
        "to-do" list.
      operationId: ResetCourseResults
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
  /users/{userId}/courses/{courseId}:
    delete:
      tags:
      - Users Courses
      summary: Unassign Course from User
      description: Unassign a course record from a user.
      operationId: UnassignCoursefromUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        406:
          description: The course - courseId can't be removed from userId because
            it is part of a learning path. Remove the user from the learning path
            or remove the course from the learning path.
          content: {}
  /users/courses:
    post:
      tags:
      - Users Courses
      summary: Get Courses Assigned For a List of Users
      description: Get the course assignments for a specific list of users (no greater
        than a list of 25 users).
      operationId: GetCourseAssignmentsForListOfUsers
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_7'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_7'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        406:
          description: The course - courseId can't be removed from userId because
            it is part of a learning path. Remove the user from the learning path
            or remove the course from the learning path.
          content: {}
      x-codegen-request-body-name: Body
  /users/{userId}/learningpaths:
    get:
      tags:
      - Users Learning Paths
      summary: Get a List of Learning Paths Assigned to a User
      description: Get a list of learning path records assigned to a user.
      operationId: GetaListofLearningPathsAssignedtoaUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_29'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_29'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
    post:
      tags:
      - Users Learning Paths
      summary: Assign Learning Paths to User
      description: Assigns a list learning path records to a user.
      operationId: AssignLearningPathsToUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_8'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_8'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: The LearningPath Id can't be null. Check the body for the proper
            format.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The userid does not exist or no valid learning paths were included
            in the request. Check the body for the proper format.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /users/{userId}/learningpaths/{learningpathId}:
    delete:
      tags:
      - Users Learning Paths
      summary: Un-Assign Users from a Learning Path
      description: Unassign a learning path record from a user.
      operationId: Un-AssignUsersfromaLearningPath
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: learningpathId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The Learning Path  does not exist.
          content: {}
        406:
          description: The Learning Path  can't be removed because it was assigned
            via a Team. Remove the user from the team or remove the learning path
            from the team.
          content: {}
      deprecated: false
  /users/{userId}/teams:
    get:
      tags:
      - Users Teams
      summary: Get a list of All Teams a User is Assigned to
      description: Get a list of all team records a user is assigned to.
      operationId: GetalistofAllTeamsaUserisAssignedto
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Teams'
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
    post:
      tags:
      - Users Teams
      summary: Assign a User to a List of Teams
      description: Assign a user record to a list of teams.
      operationId: AssignaUsertoaListofTeams
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: sendmessage
        in: query
        description: set to "True" to send login emails to new users
        schema:
          type: boolean
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Teams'
          application/json:
            schema:
              $ref: '#/components/schemas/Teams'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: Invalid Team Id found in the list or Maximum TeamIds is 25
          content: {}
        409:
          description: The user already belongs to one or more of the teams
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Users Teams
      summary: Unassign a User from All Teams
      description: Unassign a user record from all teams the user is assigned to.
      operationId: UnassignaUserfromAllTeams
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: The userid does not exist.
          content: {}
      deprecated: false
  /{LitmosDomain}/{DBinstance}/statements:
    post:
      tags:
      - xAPI
      summary: Add a Statement
      operationId: AddaStatement
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      - name: LitmosDomain
        in: path
        required: true
        schema:
          type: string
      - name: DBinstance
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{ \"version\": \"1.0.0\",\r\n    \"id\": \"01c01e01-b123-4567-b890-01ce011fe1af\"\
                ,\r\n    \"actor\": {\r\n        \"objectType\": \"Agent\",\r\n  \
                \      \"name\": \"Lt. Pete\",\r\n        \"mbox\": \"mailto:Maverick@topgun.com\"\
                \r\n    },\r\n    \"verb\": {\r\n        \"id\": \"http://activitystrea.ms/schema/1.0/experience\"\
                ,\r\n        \"display\": {\r\n            \"en-US\": \"completed\"\
                \r\n        }\r\n    },\r\n    \"object\": {\r\n        \"objectType\"\
                : \"Activity\",\r\n        \"id\": \"http://example.com/activities/figher-pilot-combat-TopGun\"\
                ,\r\n        \"definition\": {\r\n            \"name\": {\r\n    \
                \            \"en-US\": \"Top Gun Simulation\"\r\n            },\r\
                \n            \"description\": {\r\n                \"en-US\": \"\
                The Top Gun Naval Fighter Weapons School is where the best of the\
                \ best train to refine their elite flying skills.\"\r\n          \
                \  },\r\n            \"type\": \"http://adlnet.gov/expapi/activities/simulation\"\
                ,\r\n            \"extensions\": {\r\n                \"http://example.com/gliderClubId\"\
                : \"Sim-101\"\r\n            }\r\n        }\r\n    },\r\n    \"result\"\
                : {\r\n        \"score\": {\r\n            \"scaled\": 0.95\r\n  \
                \      },\r\n        \"success\": true,\r\n        \"completion\"\
                : true,\r\n        \"extensions\": {\r\n            \"http://example.com/flight/averagePitch\"\
                : 0.25\r\n        }\r\n    },\r\n    \"timestamp\": \"2020-01-01T14:00:00.000Z\"\
                ,\r\n    \"stored\": \"2020-01-01T14:05:25.000Z\",\r\n    \"authority\"\
                : {\r\n        \"objectType\": \"Agent\",\r\n        \"account\":\
                \ {\r\n            \"homePage\": \"https://www.topgunmovie.com/\"\
                ,\r\n            \"name\": \"cb4b1842-d251-4a4c-b9f0-c8b4a9004d18\"\
                \r\n        }\r\n    }\r\n}"
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                example:
                - 01c01e01-b123-4567-b890-01ce011fe1af
        400:
          description: Bad Request
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /{LitmosDomain}/{DBinstance}/statements/statementID={statementId}:
    put:
      tags:
      - xAPI
      summary: Update a Statement
      operationId: UpdateaStatement
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      - name: LitmosDomain
        in: path
        required: true
        schema:
          type: string
      - name: DBinstance
        in: path
        required: true
        schema:
          type: string
      - name: statementId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{ \"version\": \"1.0.0\",\r\n    \"id\": \"01c01e01-b123-4567-b890-01ce011fe1af\"\
                ,\r\n    \"actor\": {\r\n        \"objectType\": \"Agent\",\r\n  \
                \      \"name\": \"Lt. Pete\",\r\n        \"mbox\": \"mailto:Maverick@topgun.com\"\
                \r\n    },\r\n    \"verb\": {\r\n        \"id\": \"http://activitystrea.ms/schema/1.0/experience\"\
                ,\r\n        \"display\": {\r\n            \"en-US\": \"completed\"\
                \r\n        }\r\n    },\r\n    \"object\": {\r\n        \"objectType\"\
                : \"Activity\",\r\n        \"id\": \"http://example.com/activities/figher-pilot-combat-TopGun\"\
                ,\r\n        \"definition\": {\r\n            \"name\": {\r\n    \
                \            \"en-US\": \"Top Gun Simulation\"\r\n            },\r\
                \n            \"description\": {\r\n                \"en-US\": \"\
                The Top Gun Naval Fighter Weapons School is where the best of the\
                \ best train to refine their elite flying skills.\"\r\n          \
                \  },\r\n            \"type\": \"http://adlnet.gov/expapi/activities/simulation\"\
                ,\r\n            \"extensions\": {\r\n                \"http://example.com/gliderClubId\"\
                : \"Sim-101\"\r\n            }\r\n        }\r\n    },\r\n    \"result\"\
                : {\r\n        \"score\": {\r\n            \"scaled\": 0.95\r\n  \
                \      },\r\n        \"success\": true,\r\n        \"completion\"\
                : true,\r\n        \"extensions\": {\r\n            \"http://example.com/flight/averagePitch\"\
                : 0.25\r\n        }\r\n    },\r\n    \"timestamp\": \"2020-01-01T14:00:00.000Z\"\
                ,\r\n    \"stored\": \"2020-01-01T14:05:25.000Z\",\r\n    \"authority\"\
                : {\r\n        \"objectType\": \"Agent\",\r\n        \"account\":\
                \ {\r\n            \"homePage\": \"https://www.topgunmovie.com/\"\
                ,\r\n            \"name\": \"cb4b1842-d251-4a4c-b9f0-c8b4a9004d18\"\
                \r\n        }\r\n    }\r\n}"
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Bad Request
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /{LitmosDomain}/{DBinstance}/statementID={statementId}:
    get:
      tags:
      - xAPI
      summary: Get a Statement
      operationId: GetaStatement
      parameters:
      - name: LitmosDomain
        in: path
        required: true
        schema:
          type: string
      - name: DBinstance
        in: path
        required: true
        schema:
          type: string
      - name: statementId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: "{ \"version\": \"1.0.0\",\r\n    \"id\": \"01c01e01-b123-4567-b890-01ce011fe1af\"\
                  ,\r\n    \"actor\": {\r\n        \"objectType\": \"Agent\",\r\n\
                  \        \"name\": \"Lt. Pete\",\r\n        \"mbox\": \"mailto:Maverick@topgun.com\"\
                  \r\n    },\r\n    \"verb\": {\r\n        \"id\": \"http://activitystrea.ms/schema/1.0/experience\"\
                  ,\r\n        \"display\": {\r\n            \"en-US\": \"completed\"\
                  \r\n        }\r\n    },\r\n    \"object\": {\r\n        \"objectType\"\
                  : \"Activity\",\r\n        \"id\": \"http://example.com/activities/figher-pilot-combat-TopGun\"\
                  ,\r\n        \"definition\": {\r\n            \"name\": {\r\n  \
                  \              \"en-US\": \"Top Gun Simulation\"\r\n           \
                  \ },\r\n            \"description\": {\r\n                \"en-US\"\
                  : \"The Top Gun Naval Fighter Weapons School is where the best of\
                  \ the best train to refine their elite flying skills.\"\r\n    \
                  \        },\r\n            \"type\": \"http://adlnet.gov/expapi/activities/simulation\"\
                  ,\r\n            \"extensions\": {\r\n                \"http://example.com/gliderClubId\"\
                  : \"Sim-101\"\r\n            }\r\n        }\r\n    },\r\n    \"\
                  result\": {\r\n        \"score\": {\r\n            \"scaled\": 0.95\r\
                  \n        },\r\n        \"success\": true,\r\n        \"completion\"\
                  : true,\r\n        \"extensions\": {\r\n            \"http://example.com/flight/averagePitch\"\
                  : 0.25\r\n        }\r\n    },\r\n    \"timestamp\": \"2020-01-01T14:00:00.000Z\"\
                  ,\r\n    \"stored\": \"2020-01-01T14:05:25.000Z\",\r\n    \"authority\"\
                  : {\r\n        \"objectType\": \"Agent\",\r\n        \"account\"\
                  : {\r\n            \"homePage\": \"https://www.topgunmovie.com/\"\
                  ,\r\n            \"name\": \"cb4b1842-d251-4a4c-b9f0-c8b4a9004d18\"\
                  \r\n        }\r\n    }\r\n}"
      deprecated: false
  # /{LitmosDomain}{DBinstance}/statements:
  #   get:
  #     tags:
  #     - xAPI
  #     summary: Get Statements
  #     operationId: GetStatements
  #     parameters:
  #     - name: LitmosDomain
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     - name: DBinstance
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     responses:
  #       200:
  #         description: ""
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example:
  #                 statements:
  #                 - version: 1.0.0
  #                   id: 01c01e01-b123-4567-b890-01ce011fe1af
  #                   actor:
  #                     objectType: Agent
  #                     name: Lt. Pete
  #                     mbox: mailto:Maverick@topgun.com
  #                   verb:
  #                     id: http://activitystrea.ms/schema/1.0/experience
  #                     display:
  #                       en-US: completed
  #                   object:
  #                     objectType: Activity
  #                     id: http://example.com/activities/figher-pilot-combat-TopGun
  #                     definition:
  #                       name:
  #                         en-US: Top Gun Simulation
  #                       description:
  #                         en-US: The Top Gun Naval Fighter Weapons School is where
  #                           the best of the best train to refine their elite flying
  #                           skills.
  #                       type: http://adlnet.gov/expapi/activities/simulation
  #                       extensions:
  #                         http://example.com/gliderClubId: Sim-101
  #                   result:
  #                     score:
  #                       scaled: 0.95
  #                     success: true
  #                     completion: true
  #                     extensions:
  #                       http://example.com/flight/averagePitch: 0.25
  #                   timestamp: 2020-01-01T14:00:00.000Z
  #                   stored: 2021-08-11T23:19:03.735Z
  #                   authority:
  #                     objectType: Agent
  #                     account:
  #                       homePage: https://apibushub
  #                       name: 22e28ef6-720f-4a88-938b-434730d9694a
  #                 more: ""
  #     deprecated: false
  /teams/{teamId}/courses:
    get:
      tags:
      - Team Courses
      summary: Get a List of all Courses Assigned to Team
      description: Get a list of all course records that are assigned to the team.
      operationId: GetaListofallCoursesAssignedtoTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Courses'
            application/json:
              schema:
                $ref: '#/components/schemas/Courses'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        404:
          description: The team teamId  does not exist."
          content: {}
      deprecated: false
    post:
      tags:
      - Team Courses
      summary: Assign a List of Courses to Team
      description: Assign a list of course records to a team. These courses will appear
        on the "to-do" list for users that belong to the team.
      operationId: AssignaListofCoursestoTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: includesubteams
        in: query
        schema:
          type: boolean
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_9'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_9'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        404:
          description: No team with this id  teamId exists in your organization, or
            you did not send any courses in your request
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Team Courses
      summary: Unassign a List of Courses from Team
      description: Remove a list of course records assigned to a Team. These courses
        will no longer appear on the "to-do" list for users that belong to the team.
      operationId: UnassignaListofCoursesfromTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call or Course
            is assigned via Learning Path. Remove the team from the Learning Path
            to unassign from team
          content: {}
        404:
          description: No team with this id  exists in your organization
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /teams/{teamId}/admins:
    get:
      tags:
      - Team Administrators
      summary: Get Team Administrators for a Team
      description: Get a list of user records promoted to Team Administrator for a
        team.
      operationId: GetTeamAdministratorsforaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
      deprecated: false
  /teams/{teamId}/admins/{userId}:
    put:
      tags:
      - Team Administrators
      summary: Promote a User to Team Admin for a Team
      description: Promote a user record to team administrator access level for a
        team.
      operationId: PromoteaUsertoTeamAdminforaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: BadRequest.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: 'User: userId does not exist on the team: teamId.'
          content: {}
      deprecated: false
    delete:
      tags:
      - Team Administrators
      summary: Demote a Team Administrator on a Team
      description: Demote a user record from team administrator access level for a
        team.
      operationId: DemoteaTeamAdministratoronaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: BadRequest.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        404:
          description: 'User: userId does not exist on the team: teamId'
          content: {}
      deprecated: false
  /teams/{teamId}/leaders:
    get:
      tags:
      - Team Leaders
      summary: Get Team Leaders for a Team
      description: Get a list of user records promoted to Team Leader for a team.
      operationId: GetTeamLeadersforaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_31'
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_31'
        403:
          description: You do not have the proper permissions for this call.
          content: {}
      deprecated: false
  /teams/{teamId}/leaders/{userId}:
    put:
      tags:
      - Team Leaders
      summary: Promote a User to Team Leader for a Team
      description: Promote a user record to team leader access level for a team.
      operationId: PromoteaUsertoTeamLeaderforaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: BadRequest.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: 'User: userId does not exist on the team: teamId.'
          content: {}
      deprecated: false
    delete:
      tags:
      - Team Leaders
      summary: Demote a Team Leader on a Team
      description: Demote a user record from team leader access level for a team.
      operationId: DemoteaTeamLeaderonaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: BadRequest.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        404:
          description: 'User: userId does not exist on the team: teamId'
          content: {}
      deprecated: false
  /teams/{teamId}/users:
    get:
      tags:
      - Team Users
      summary: Get Users in a Team
      description: Get a list of active users assigned to a Team.
      operationId: GetUsersinaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
            application/teams/{teamid}/users/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Team Users
      summary: Assign Users to a Team
      description: Add a list of user records to a Team.
      operationId: AssignUserstoaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: sendmessage
        in: query
        description: set to "True" to send login emails to new users
        schema:
          type: boolean
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Body_10'
          application/json:
            schema:
              $ref: '#/components/schemas/Body_10'
        required: true
      responses:
        201:
          description: Created.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No team with this id exists in your organization, or the user
            list is empty.
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /teams/{teamId}/users/{userId}:
    delete:
      tags:
      - Team Users
      summary: Unassign Users from a Team
      description: Remove a user record from a team.
      operationId: UnassignUsersfromaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No team with this id  exists in your organization, or no user
            exists with this id
          content: {}
      deprecated: false
  /teams:
    get:
      tags:
      - Teams
      summary: Get a List of All Teams
      description: Returns a list of all team records in the organisation.
      operationId: GetaListofAllTeams
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: start
        in: query
        description: Record number where paging starts
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Teams'
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
        403:
          description: You do not have the proper permissions for this call
          content: {}
      deprecated: false
    post:
      tags:
      - Teams
      summary: Create a Team
      description: Create a new team record.
      operationId: CreateaTeam
      parameters:
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Team'
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        201:
          description: Created.
          content: {}
        400:
          description: Please check the xml/json included with this call
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        409:
          description: Team name already exists
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
  /teams/{teamId}:
    get:
      tags:
      - Teams
      summary: Get a Team
      description: Get a team record
      operationId: GetaTeam
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      responses:
        200:
          description: Success.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Team'
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call.
          content: {}
        404:
          description: No team with this  teamId exists in your organization
          content: {}
      deprecated: false
  /teams/{teamId}/teams:
    get:
      tags:
      - Teams
      summary: Get SubTeam Id
      description: Get a list of subteam records for a team.
      operationId: GetSubTeamId
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: limit
        in: query
        description: Total records to return (max 1000)
        schema:
          type: integer
      - name: search
        in: query
        description: String value used to the filter the records
        schema:
          type: string
      responses:
        200:
          description: Success.
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
      deprecated: false
    post:
      tags:
      - Teams
      summary: Create a Sub-Team
      description: Create a new sub-team record within a team.
      operationId: CreateaSub-Team
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Custom identifier used to identify an API user, API program,
          etc.
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: set to "json" if the response body is to be formatted in JavaScript
          Object Notation
        schema:
          type: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Team'
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      responses:
        200:
          description: Success.
          content: {}
        400:
          description: Please check the xml/json included with this call
          content: {}
        401:
          description: The API key that you have used for this request is either not
            valid or your account is not enabled for API access.
          content: {}
        403:
          description: You do not have the proper permissions for this call
          content: {}
        409:
          description: Team name already exists
          content: {}
      deprecated: false
      x-codegen-request-body-name: Body
components:
  schemas:
    Achievement:
      title: Achievement
      type: object
      properties:
        UserId:
          type: string
          format: EncryptedId
        Title:
          type: string
        Description:
          type: string
        AchievementDate:
          type: string
          format: date-time
        CourseId:
          type: string
          format: EncryptedId
        ComplaintTillDate:
          type: string
          format: date-time
        Score:
          maximum: 1E+2
          minimum: 1
          type: integer
          format: int32
        Result:
          type: string
        Type:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        AchievementId:
          type: string
          format: EncryptedId
        CertificateId:
          type: string
          format: EncryptedId
      example:
        UserId: Oe4zZK7ZntpWn8FLGZTxuw2
        Title: 0 - Getting Started with Litmos
        AchievementDate: 2021-05-11T18:27:24.763+0000
        CourseId: gqYHrApPYuQ1
        Result: Complete
        Type: Course Completed
        FirstName: SAP
        LastName: Litmos
        AchievementId: 91450502
    Achievements:
      title: Achievements
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
    ActionActivity:
      title: ActionActivity
      type: object
      properties:
        ActivityType:
          type: string
        ObjectType:
          type: string
        ObjectId:
          type: string
          format: EncryptedId
        OriginalObjectId:
          type: string
          format: Originalid
        ObjectName:
          type: string
        TargetObjectType:
          type: string
        TargetObjectId:
          type: string
          format: EncryptedId
        OriginalTargetObjectId:
          type: string
          format: Originalid
        TargetObjectName:
          type: string
        ActivityBy:
          type: string
          format: OriginalId
        ActivityByUserName:
          type: string
          format: Username
        ActivityDate:
          type: string
          format: date-time
      example:
        ActivityType: Collection Created
        ObjectType: Collection
        ObjectId: n_76_KM7SEs1
        OriginalObjectId: "3172"
        ObjectName: Example Collection
        TargetObjectId: 0
        OriginalTargetObjectId: 0
        ActivityBy: 22584109
        ActivityByUsername: LitmosIntegrations
        ActivityDate: 2021-07-13T16:56:00.943
    ActionActivitys:
      title: ActionActivitys
      required:
      - ActionActivity
      type: object
      properties:
        ActionActivity:
          type: array
          items:
            $ref: '#/components/schemas/ActionActivity'
    AssignmentActivity:
      title: AssignmentActivity
      type: object
      properties:
        ActivityType:
          type: string
        ObjectType:
          type: string
        ObjectId:
          type: string
          format: EncryptedId
        OriginalObjectId:
          type: string
          format: Originalid
        ObjectName:
          type: string
        TargetObjectType:
          type: string
        TargetObjectId:
          type: string
          format: EncryptedId
        OriginalTargetObjectId:
          type: string
          format: Originalid
        TargetObjectName:
          type: string
        ActivityBy:
          type: string
          format: OriginalId
        ActivityByUserName:
          type: string
          format: Username
        ActivityDate:
          type: string
          format: date-time
      example:
        ActivityType: User Added To Course
        ObjectType: User
        ObjectId: -bA-I8jb-tXUrvqglbdc1A2
        OriginalObjectId: "23180609"
        ObjectName: Leonard Somtil
        TargteObjectType: Course
        TargetObjectId: gqYHrApPYuQ1
        OriginalTargetObjectId: "5857921"
        TargetObjectName: 0 - Getting Started with Litmos
        ActivityBy: 22584109
        ActivityByUsername: LitmosIntegrations
        ActivityDate: 2021-07-09T17:14:38.657
    AssignmentActivitys:
      title: AssignmentActivitys
      required:
      - AssignmentActivity
      type: object
      properties:
        AssignmentActivity:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentActivity'
    ContentActivity:
      title: ContentActivity
      type: object
      properties:
        ActivityType:
          type: string
        ObjectType:
          type: string
        ObjectId:
          type: string
          format: EncryptedId
        OriginalObjectId:
          type: string
          format: Originalid
        ObjectName:
          type: string
        TargetObjectType:
          type: string
        TargetObjectId:
          type: string
          format: EncryptedId
        OriginalTargetObjectId:
          type: string
          format: Originalid
        TargetObjectName:
          type: string
        ActivityBy:
          type: string
          format: OriginalId
        ActivityByUserName:
          type: string
          format: Username
        ActivityDate:
          type: string
          format: date-time
      example:
        ActivityType: Module Added To Course
        ObjectType: Module
        ObjectId: FOkl7r-pv5lMuOz2x2dlgQ2
        OriginalObjectId: "10644730"
        ObjectName: Example Assessment Title
        TargteObjectType: Course
        TargetObjectId: glLI883QNYk1
        OriginalTargetObjectId: "6064810"
        TargetObjectName: Example Course Title
        ActivityBy: 22584109
        ActivityByUsername: LitmosIntegrations
        ActivityDate: 2021-07-12T22:53:30.647
    ContentActivitys:
      title: ContentActivitys
      required:
      - ContentActivity
      type: object
      properties:
        ContentActivity:
          type: array
          items:
            $ref: '#/components/schemas/ContentActivity'
    LoginActivity:
      title: LoginActivity
      type: object
      properties:
        ActivityType:
          type: string
        UserId:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: Originalid
        UserName:
          type: string
          format: Username
        IPAddress:
          type: string
          format: ipv4
        LoginDate:
          type: string
          format: date-time
      example:
        ActivityType: Login
        UserId: Oe4zZK7ZntpWn8FLGZTxuw2
        OriginalUserId: 22584109
        UserName: LitmosIntegrations
        IPAddress: 169.145.42.41
        LoginDate: 2021-07-12T23:20:16.1
    LoginActivitys:
      title: LoginActivitys
      required:
      - LoginActivity
      type: object
      properties:
        LoginActivity:
          type: array
          items:
            $ref: '#/components/schemas/LoginActivity'
    SettingsActivity:
      title: SettingsActivity
      type: object
      properties:
        ActivityType:
          type: string
        Category:
          type: string
        ObjectType:
          type: string
        ObjectId:
          type: string
          format: EncryptedId
        OriginalObjectId:
          type: string
          format: Originalid
        ObjectName:
          type: string
        TargetObjectType:
          type: string
        TargetObjectId:
          type: string
          format: EncryptedId
        OriginalTargetObjectId:
          type: string
          format: Originalid
        TargetObjectName:
          type: string
        OldValue:
          type: string
        NewValue:
          type: string
        ActivityBy:
          type: string
          format: OriginalId
        ActivityByUserName:
          type: string
          format: Username
        ActivityDate:
          type: string
          format: date-time
      example:
        ActivityType: ILT Calendar Type (Google) Updated
        Category: Account Profile
        ObjectType: Organisation
        ObjectId: Ixhe-wbasAQ1
        OriginalObjectId: "146205"
        TargetObjectId: 0
        OriginalTargetObjectId: 0
        OldValue: Disabled
        NewValue: Enabled
        ActivityBy: 22584109
        ActivityByUsername: LitmosIntegrations
        ActivityDate: 2021-07-12T23:32:42.903+0000
    SettingsActivitys:
      title: SettingsActivitys
      required:
      - SettingsActivity
      type: object
      properties:
        SettingsActivity:
          type: array
          items:
            $ref: '#/components/schemas/SettingsActivity'
    UserBulkImport:
      title: UserBulkImport
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        ImportDate:
          type: string
          format: date-time
        Status:
          type: string
        TotalRecords:
          type: integer
          format: int32
        TotalUsersCreated:
          type: integer
          format: int32
        Failed:
          type: integer
          format: int32
        Duplicate:
          type: integer
          format: int32
        InvalidEmail:
          type: integer
          format: int32
        SendEmails:
          type: boolean
        SkipFirstLogin:
          type: boolean
      example:
        Id: AICcqH8OZiw1
        ImportDate: 2021-07-15T15:44:46.84
        Status: Completed
        TotalRecords: 1
        TotalUsersCreated: 1
        Failed: 0
        Duplicate: 0
        InvalidEmail: 0
        SendEmails: false
        SkipFirstLogin: false
    UserBulkImports:
      title: UserBulkImports
      required:
      - UserBulkImport
      type: object
      properties:
        UserBulkImport:
          type: array
          items:
            $ref: '#/components/schemas/UserBulkImport'
    CourseBulkImport:
      title: CourseBulkImport
      type: object
      properties:
        ImportId:
          type: string
          format: EncryptedId
        ImportDate:
          type: string
          format: date-time
        Status:
          type: string
        TotalRecords:
          type: integer
          format: int32
        TotalCoursesCreated:
          type: integer
          format: int32
        Failed:
          type: integer
          format: int32
      example:
        ImportId: xG4zpKeF8-U1
        ImportDate: 2021-07-15T16:54:33.817
        Status: Completed
        TotalRecords: 1
        TotalCoursesCreated: 0
        Failed: 1
    CourseCustomField:
      title: CourseCustomField
      type: object
      properties:
        CustomFieldId:
          type: string
          format: EncryptedId
        Label:
          type: string
        DefaultValue:
          type: string
        Mandatory:
          type: boolean
        VisibleToLearner:
          type: boolean
        Type:
          type: string
        Dropdown:
          type: array
          items:
            type: object
      example:
        CustomFieldId: B2qAKPjx3Tc1
        Label: Continuing Education Units
        DefaultValue: 4
        Mandatory: false
        VisibleToLearner: true
        Type: Number
    CourseCustomFields:
      title: CourseCustomFields
      required:
      - CourseCustomField
      type: object
      properties:
        CourseCustomField:
          type: array
          items:
            $ref: '#/components/schemas/CourseCustomField'
      example:
        CustomFieldId: B2qAKPjx3Tc1
        Label: Continuing Education Units
        DefaultValue: 4
        Mandatory: false
        VisibleToLearner: true
        Type: Number
    User:
      title: User
      required:
      - AccessLevel
      - Active
      - DisableMessages
      - Email
      - Id
      - IsCustomUsername
      - LastName
      - SkipFirstLogin
      - TimeZone
      - UserName
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
          format: Username
        FirstName:
          type: string
        LastName:
          type: string
        FullName:
          type: string
        Email:
          type: string
          format: Email address
        AccessLevel:
          type: string
        DisableMessages:
          type: boolean
        Active:
          type: boolean
        Skype:
          type: string
        PhoneWork:
          type: string
        PhoneMobile:
          type: string
        LastLogin:
          type: string
          readOnly: true
        LoginKey:
          type: string
          readOnly: true
        IsCustomUsername:
          type: boolean
        Password:
          type: string
          format: password
        SkipFirstLogin:
          type: boolean
        TimeZone:
          type: string
        SalesforceId:
          type: string
          format: SalesforceId
        OriginalId:
          type: string
          format: id
          readOnly: true
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        PostalCode:
          type: string
        Country:
          type: string
        SalesforceContactId:
          type: string
          format: SalesforceId
        SalesforceAccountId:
          type: string
          format: SalesforceId
        CreatedDate:
          type: string
          format: date-time
          readOnly: true
        Points:
          type: integer
        CompanyName:
          type: string
        JobTitle:
          type: string
        CustomField1:
          type: string
        CustomField2:
          type: string
        CustomField3:
          type: string
        CustomField4:
          type: string
        CustomField5:
          type: string
        CustomField6:
          type: string
        CustomField7:
          type: string
        CustomField8:
          type: string
        CustomField9:
          type: string
        CustomField10:
          type: string
        Culture:
          type: string
        Brand:
          type: string
        ManagerId:
          type: string
          format: EncryptedId
        ManagerName:
          type: string
          format: Username
        EnableTextNotification:
          type: boolean
        Website:
          type: string
        Twitter:
          type: string
        ExpirationDate:
          type: string
          format: date-time
        JobRole:
          type: string
        ExternalEmployeeId:
          type: string
        ProfileType:
          pattern: internal, external
          type: string
      example:
        Id: -bA-I8jb-tXUrvqglbdc1A2
        UserName: LennyLitmos
        FirstName: Leonard
        LastName: Somtil
        FullName: LeondardMSomtil
        Email: LeonardSomtil@sap.com
        AccessLevel: Learner
        DisableMessages: "false"
        Active: "true"
        Skype: LeoMSomtil_Skype
        PhoneWork: 925-251-0000
        PhoneMobile: 925-251-0000
        IsCustomUsername: "true"
        SkipFirstLogin: "true"
        TimeZone: Pacific Standard Time
        Street1: 2700 Camino Ramon
        Street2: Suite 400
        City: San Ramon
        State: California
        PostalCode: 94521
        Country: United States of America
        CompanyName: SAP SE
        JobTitle: Mascot
        CustomField1: CustomField1
        CustomField2: CustomField2
        CustomField3: CustomField3
        CustomField4: CustomField4
        CustomField5: CustomField5
        CustomField6: CustomField6
        CustomField7: CustomField7
        CustomField8: CustomField8
        CustomField9: CustomField9
        CustomField10: CustomField10
        Culture: en-Us
        Brand: Default
        EnableTextNotification: "false"
        Website: https://www.litmos.com
        Twitter: '@Litmos'
        JobRole: Mascot
        ExternalEmployeeId: 4161
        ProfileType: Internal
    Users:
      title: Users
      required:
      - User
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        User:
          Id: -bA-I8jb-tXUrvqglbdc1A2
    UserCollection:
      required:
      - Pagination
      type: object
      properties:
        Pagination:
          type: object
          properties: {}
          example:
            BatchParam: Limit
            BatchSize: 100
            Start: 0
            TotalCount: 150000
        Item:
          type: array
          items:
            $ref: '#/components/schemas/Users'
    UserImport:
      title: User Import
      required:
      - Email
      - FirstName
      - LastName
      type: object
      properties:
        Username:
          type: string
          format: Username
        Email:
          type: string
          format: email
        FirstName:
          type: string
        LastName:
          type: string
        Password:
          type: string
          format: password
        Phone:
          type: string
        Mobile:
          type: string
        Skype:
          type: string
        Title:
          type: string
        CompanyName:
          type: string
        WebSite:
          type: string
        Twitter:
          type: string
        Team1:
          type: string
        Team2:
          type: string
        Team3:
          type: string
        Team4:
          type: string
        Team5:
          type: string
        Course1:
          type: string
        Course2:
          type: string
        Course3:
          type: string
        Address1:
          type: string
        Address2:
          type: string
        City:
          type: string
        State:
          type: string
        Zip:
          type: string
        Country:
          type: string
        CustomField1:
          type: string
        CustomField2:
          type: string
        CustomField3:
          type: string
        CustomField4:
          type: string
        CustomField5:
          type: string
        CustomField6:
          type: string
        CustomField7:
          type: string
        CustomField8:
          type: string
        CustomField9:
          type: string
        CustomField10:
          type: string
        SalesforceId:
          type: string
          format: SalesforceId
        SalesforceContactId:
          type: string
          format: SalesforceId
        SalesforceAccountId:
          type: string
          format: SalesforceId
        Active:
          type: boolean
        InActiveDate:
          type: string
          format: date-time
        AccessLevel:
          maximum: 5
          minimum: 2
          type: integer
        Brand:
          type: string
        Culture:
          type: string
        Manager:
          type: string
          format: Username or Id
        UserCustomField1:
          type: string
        UserCustomField2:
          type: string
        UserCustomField3:
          type: string
        UserCustomField4:
          type: string
        UserCustomField5:
          type: string
        UserCustomField6:
          type: string
        UserCustomField7:
          type: string
        UserCustomField8:
          type: string
        UserCustomField9:
          type: string
        UserCustomField10:
          type: string
        UserCustomField11:
          type: string
        UserCustomField12:
          type: string
        UserCustomField13:
          type: string
        UserCustomField14:
          type: string
        UserCustomField15:
          type: string
        UserCustomField16:
          type: string
        UserCustomField17:
          type: string
        UserCustomField18:
          type: string
        UserCustomField19:
          type: string
        UserCustomField20:
          type: string
        UserCustomField21:
          type: string
        UserCustomField22:
          type: string
        UserCustomField23:
          type: string
        UserCustomField24:
          type: string
        UserCustomField25:
          type: string
        JobRole:
          type: string
        ExternalEmployeeId:
          type: string
      example:
        Username: LennyLitmos
        Email: Leonard.Somtil@sap.com
        FirstName: Leonard
        LastName: Somtil
        Phone: 9252512220
        Title: Mascot
        CompanyName: SAP Litmos
        WebSite: www.litmos.com
        Twitter: '@litmos'
        Team1: 9eJGkqnHg041
        Course1: gqYHrApPYuQ1
        Address1: 2700 Camino Ramon
        Address2: Suite 400
        City: San Ramon
        State: California
        Zip: 94583
        Country: United States of America
        CustomField1: CustomField1_ExampleValue
        CustomField2: CustomField2_ExampleValue
        CustomField3: CustomField3_ExampleValue
        CustomField4: CustomField4_ExampleValue
        CustomField5: CustomField5_ExampleValue
        CustomField6: ""
        CustomField7: ""
        CustomField8: ""
        CustomField9: ""
        CustomField10: ""
        Active: true
        AccessLevel: 5
        Brand: Default
        Culture: en-US
        Manager: Oe4zZK7ZntpWn8FLGZTxuw2
        UserCustomField1: ""
        UserCustomField2: ""
        UserCustomField3: ""
        UserCustomField4: ""
        UserCustomField5: ""
        UserCustomField6: ""
        UserCustomField7: ""
        UserCustomField8: ""
        UserCustomField9: ""
        UserCustomField10: ""
        UserCustomField11: ""
        UserCustomField12: ""
        UserCustomField13: ""
        UserCustomField14: ""
        UserCustomField15: ""
        UserCustomField16: ""
        UserCustomField17: ""
        UserCustomField18: ""
        UserCustomField19: ""
        UserCustomField20: ""
        UserCustomField21: ""
        UserCustomField22: ""
        UserCustomField23: ""
        UserCustomField24: ""
        UserCustomField25: ""
        JobRole: Mascot
        ExternalEmployeeId: 17043521
    UserImports:
      title: User Imports
      required:
      - UserImport
      type: object
      properties:
        UserImport:
          type: array
          items:
            $ref: '#/components/schemas/UserImport'
    Module:
      title: Module
      required:
      - Active
      - ContentURL
      - Id
      - ModuleType
      - Name
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Description:
          type: string
        ModuleType:
          type: integer
          format: int32
        Active:
          type: boolean
        Code:
          type: string
        HideDescription:
          type: boolean
        NewWindow:
          type: boolean
        ReviewMode:
          type: boolean
        ContentURL:
          type: string
          format: URL
      example:
        Id: ""
        Name: Example eLearning file
        Description: Example module description
        ModuleType: 9
        Active: true
        Code: eLearn-Sco-TinCan
        HideDescription: false
        NewWindow: true
        ReviewMode: true
        ContentURL: https://sitename-my.sharepoint.com/personal/JohnDoe/Documents/SomeElearning.zip?Web=0
    Modules:
      title: Modules
      required:
      - Module
      type: object
      properties:
        Module:
          type: array
          items:
            $ref: '#/components/schemas/Module'
    ModuleResult:
      title: Module Result
      required:
      - Attempts
      - Completed
      - CourseId
      - Note
      - Score
      - UpdatedAt
      - UserId
      type: object
      properties:
        CourseId:
          type: string
          format: EncryptedId
        UserId:
          type: string
          format: EncryptedId
        Score:
          type: integer
        Completed:
          type: boolean
        UpdatedAt:
          type: string
          format: date-time
        Note:
          type: string
        Attempts:
          type: integer
      example:
        CourseId: glLI883QNYk1
        UserId: -bA-I8jb-tXUrvqglbdc1A2
        Score: 100
        Completed: true
        UpdatedAt: 2021-07-01T14:15:30
        Note: Completed the test with a perfect score
        Attempts: 1
    Session:
      title: Session
      required:
      - Days
      - Id
      - InstructorUserId
      - Location
      - LocationId
      - Name
      - SessionType
      - TimeZone
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        InstructorUserId:
          type: string
          format: EncryptedId
        SessionType:
          maximum: 4
          minimum: 1
          type: integer
          format: int32
        Days:
          type: array
          items:
            $ref: '#/components/schemas/Day'
        TimeZone:
          type: string
        Location:
          type: string
        LocationId:
          type: integer
          format: int32
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        Slots:
          type: integer
          format: int32
        Accepted:
          type: string
          format: Username
        EnableWaitList:
          type: boolean
      example:
        Id: ""
        Name: Example Session
        InstructorUserId: CpfgqzpUCdcE8hK3xaZb0A2
        SessionType: 1
        Days:
        - Id: ""
          StartDate: 2022-01-16T09:00:00.000+0000
          EndDate: 2022-01-16T12:00:00.000+0000
          StartTime: 9:00AM
          EndTime: 12:00PM
          SendReminder: false
          ReminderValue: 1
          ReminderMetric: hours
        - Id: ""
          StartDate: 2022-01-17T09:00:00.000+0000
          EndDate: 2022-01-17T12:00:00.000+0000
          StartTime: 9:00AM
          EndTime: 12:00PM
          SendReminder: false
          ReminderValue: 1
          ReminderMetric: days
        TimeZone: Pacific Standard Time
        Location: Example Session Location:(Virtual)
        LocationId: 6400
    Day:
      title: Day
      required:
      - EndDate
      - EndTime
      - Id
      - ReminderMetric
      - ReminderValue
      - SendReminder
      - StartDate
      - StartTime
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        StartTime:
          type: string
          format: H:MM AM/PM
        EndTime:
          type: string
          format: H:MM AM/PM
        SendReminder:
          type: boolean
        ReminderValue:
          minimum: 1
          type: integer
          format: int32
        ReminderMetric:
          type: string
      example:
        Id: vJ_00E2fmn81
        StartDate: 2021-12-01T09:00:00Z
        EndDate: 2021-12-01T12:00:00Z
        StartTime: 9:00AM
        EndTime: 12:00PM
        SendReminder: false
        ReminderValue: 1
        ReminderMetric: minutes
    UserSessionRegistrationStatus:
      title: UserSessionRegistrationStatus
      type: object
      properties:
        TotalUsersRegistered:
          type: integer
          format: int32
        Failed:
          type: integer
          format: int32
      example:
        TotalUsersRegistered: 8
        Failed: 2
    EventUser:
      title: Mark an ILT Session Complete & Add Score
      required:
      - CompanyName
      - Completed
      - Email
      - EventStatus
      - FirstName
      - Id
      - LastName
      - Score
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        EventStatus:
          type: integer
          format: int32
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
          format: email
        CompanyName:
          type: string
        Score:
          maximum: 1E+2
          minimum: 1
          type: integer
          format: int32
        Completed:
          type: boolean
      example:
        Id: -bA-I8jb-tXUrvqglbdc1A2
        EventStatus: 1
        FirstName: Leonard
        LastName: Somtil
        Email: LeonardSomtil@sap.com
        CompanyName: SAP Litmos
        Score: 95
        Completed: true
    EventUsers:
      title: Event User
      type: object
      properties:
        Team:
          type: array
          items:
            $ref: '#/components/schemas/EventUser'
    Course:
      title: Course
      required:
      - Id
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Code:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        ForSale:
          type: boolean
        OriginalId:
          type: string
          format: id
        Description:
          type: string
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        CourseCodeForBulkImport:
          type: string
          format: Course-code
        Price:
          type: integer
          format: int32
        AccessTillDate:
          type: string
          format: date
        AccessTillDays:
          type: integer
        CourseTeamLibrary:
          type: boolean
        CreatedBy:
          type: string
          format: Username
        Tags:
          type: string
      example:
        Id: gqYHrApPYuQ1
        Code: DOJO104
        Name: 0 - Getting Started with Litmos
        Active: true
        ForSale: false
        OriginalId: 5857921
        Description: This course will provide a brief introduction to all the cool
          features of Litmos.   Within minutes, you will be creating your own courses,
          adding users, and even customizing the look and feel of the learner experience.  See
          how easy it is to get up and running.  With SAP Litmos Training, you will
          love your LMS!
        CourseCodeForBulkImport: 5857921-DOJO104
        CourseTeamLibrary: false
        Tags: Beginner
    Courses:
      title: Courses
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    CourseImport:
      title: Course Import
      required:
      - Active
      - CourseTitle
      type: object
      properties:
        CourseTitle:
          type: string
        Description:
          type: string
        CourseCode:
          type: string
          format: Course-code
        Active:
          type: boolean
        ContentLibrary:
          type: boolean
        Notifications:
          type: string
          format: Username
        ModuleOrder:
          type: boolean
        CourseInactivationDate:
          type: string
          format: date
        CourseAccessExpirationDate:
          type: string
          format: date
        CourseAccessExpirationDateSpan:
          maximum: 1E+2
          type: integer
          format: int32
        DueDate:
          type: string
          format: date
        DueDateSpan:
          maximum: 1E+2
          type: integer
          format: int32
        ComplianceDateSpan:
          maximum: 1E+2
          type: integer
          format: int32
        ComplianceRetake:
          type: boolean
        Topic1:
          type: string
        Topic2:
          type: string
        Topic3:
          type: string
        Social:
          type: string
        DiscussionForum:
          type: boolean
        CoursePrerequisite1:
          type: string
          format: Course-Code
        CoursePrerequisite2:
          type: string
          format: Course-Code
        CoursePrerequisite3:
          type: string
          format: Course-Code
        LearningPathPrerequisite1:
          type: string
          format: LearningPath-Code
        LearningPathPrerequisite2:
          type: string
          format: LearningPath-Code
        LearningPathPrerequisite3:
          type: string
          format: LearningPath-Code
        Language:
          type: string
          format: Culture-code
        Tags:
          type: string
        AdvCourseCustomField1:
          type: string
        AdvCourseCustomField2:
          type: string
        AdvCourseCustomField3:
          type: string
        AdvCourseCustomField4:
          type: string
        AdvCourseCustomField5:
          type: string
        AdvCourseCustomField6:
          type: string
        AdvCourseCustomField7:
          type: string
        AdvCourseCustomField8:
          type: string
        AdvCourseCustomField9:
          type: string
        AdvCourseCustomField10:
          type: string
        ReferenceCode:
          type: string
      example:
      - CourseTitle: Example Course
        Description: Example Course Description
        CourseCode: 6064810-A
        Active: true
        ContentLibrary: false
        Notifications: LitmosIntegrations
        ModuleOrder: true
        CourseInactivationDate: ""
        CourseAccessExpirationDate: ""
        CourseAccessExpirationDateSpan: ""
        DueDate: ""
        DueDateSpan: ""
        ComplianceDateSpan: ""
        ComplianceRetake: ""
        Topic1: Example topic
        Topic2: ""
        Topic3: ""
        Social: false
        DiscussionForum: false
        CoursePrerequisite1: ""
        CoursePrerequisite2: ""
        CoursePrerequisite3: ""
        LearningPathPrerequisite1: ""
        LearningPathPrerequisite2: ""
        LearningPathPrerequisite3: ""
        Language: en-US
        Tags: ExampleContentTag
        AdvCourseCustomField1: ""
        AdvCourseCustomField2: ""
        AdvCourseCustomField3: ""
        AdvCourseCustomField4: ""
        AdvCourseCustomField5: ""
        AdvCourseCustomField6: ""
        AdvCourseCustomField7: ""
        AdvCourseCustomField8: ""
        AdvCourseCustomField9: ""
        AdvCourseCustomField10: ""
        ReferenceCode: Example-101
    CourseImports:
      title: Course Imports
      type: object
      properties:
        CourseImport:
          type: array
          items:
            $ref: '#/components/schemas/CourseImport'
      example:
        CourseImport:
        - CourseTitle: Example Course
          Description: Example Course Description
          CourseCode: 6064810-A
          Active: true
          ContentLibrary: false
          Notifications: LitmosIntegrations
          ModuleOrder: true
          CourseInactivationDate: ""
          CourseAccessExpirationDate: ""
          CourseAccessExpirationDateSpan: ""
          DueDate: ""
          DueDateSpan: ""
          ComplianceDateSpan: ""
          ComplianceRetake: ""
          Topic1: Example topic
          Topic2: ""
          Topic3: ""
          Social: false
          DiscussionForum: false
          CoursePrerequisite1: ""
          CoursePrerequisite2: ""
          CoursePrerequisite3: ""
          LearningPathPrerequisite1: ""
          LearningPathPrerequisite2: ""
          LearningPathPrerequisite3: ""
          Language: en-US
          Tags: ExampleContentTag
          AdvCourseCustomField1: ""
          AdvCourseCustomField2: ""
          AdvCourseCustomField3: ""
          AdvCourseCustomField4: ""
          AdvCourseCustomField5: ""
          AdvCourseCustomField6: ""
          AdvCourseCustomField7: ""
          AdvCourseCustomField8: ""
          AdvCourseCustomField9: ""
          AdvCourseCustomField10: ""
          ReferenceCode: Example-101
    LearningPath:
      title: Learning Path
      required:
      - Id
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        OriginalId:
          type: string
          format: Id
        ForSale:
          type: boolean
        Price:
          type: integer
          format: int32
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        AccessTillDate:
          type: string
          format: date-time
        AccessTillDays:
          type: integer
          format: int32
        IsEquivalency:
          type: boolean
        LearningPathTeamLibrary:
          type: boolean
      example:
        Id: ahi_5n5C02E1
        Name: Core Discipline
        Active: true
        OriginalId: 148263
        ForSale: false
        Proie: 0
        IsEquivalency: false
        LearningPathTeamLibrary: false
    LearningPaths:
      title: Learning Paths
      required:
      - LearningPath
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/LearningPath'
      example:
        LearningPath:
          Id: ahi_5n5C02E1
          Name: Core Discipline
          Active: true
          OriginalId: 148263
          ForSale: false
          Price: 0
          IsEquivalency: false
          LearningPathTeamLibrary: false
    Team:
      title: Team
      required:
      - Id
      - Name
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Description:
          type: string
        TeamCodeForBulkImport:
          type: string
          format: id
          readOnly: true
        ParentTeamId:
          type: string
          format: EncryptedId
      example:
        Id: 9Tx5gErG1z81
        Name: Example Team name
        Description: Example Team description
        TeamCodeForBulkImport: 1912337-ExampleTeamname
        ParentTeamId: ""
    Teams:
      title: Teams
      required:
      - Team
      type: object
      properties:
        Team:
          type: array
          items:
            $ref: '#/components/schemas/Team'
      example:
        Team:
          Id: BXdsX_WIdgc1
          Name: Example Sub Team Name
          Description: Example Sub Team description
          ParentTeamId: 9Tx5gErG1z81
    Collection:
      title: Collection
      required:
      - Description
      - Name
      type: object
      properties:
        Name:
          type: string
        Description:
          type: string
        DefaultListing:
          type: boolean
        ImageURL:
          type: string
          format: URL
      example:
        Name: Example Collection Name
        Description: Example Collection Description
        DefaultListing: true
        ImageURL: ""
    Collections:
      title: Collections
      type: object
      properties:
        ListingUser:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
      example:
        Name: Example Collection Name
        Description: Example Collection Description
        DefaultListing: true
        ImageURL: ""
    Listing:
      title: Listing
      required:
      - Active
      - CollectionId
      - DurationDays
      - DurationType
      - FixedDate
      - Id
      - MaxUsers
      - Name
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Active:
          type: boolean
        DurationType:
          type: string
        MaxUsers:
          type: string
        DurationDays:
          type: integer
        FixedDate:
          type: string
          format: date-time
        CollectionId:
          type: string
          format: EncryptedId
      example:
        Id: W0r2PoyIxSw1
        Name: Example Collection Listing
        Active: "true"
        DurationType: Unlimited
        MaxUsers: unlimited
        DurationDays: 0
        FixedDate: 1/1/2100 12:00:00 AM
        CollectionId: n_76_KM7SEs1
    Listings:
      title: Listings
      required:
      - Listings
      type: object
      properties:
        Listings:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
      example:
        Id: W0r2PoyIxSw1
        Name: Example Collection Listing
        Active: "true"
        DurationType: Unlimited
        MaxUsers: unlimited
        DurationDays: 0
        FixedDate: 1/1/2100 12:00:00 AM
        CollectionId: n_76_KM7SEs1
    ListingUsers:
      title: Listing Users
      required:
      - ListingUser
      type: object
      properties:
        ListingUser:
          type: array
          items:
            $ref: '#/components/schemas/ListingUser'
      example:
        ListingUser:
          Id: -bA-I8jb-tXUrvqglbdc1A2
          UserName: LennyLitmos
          FirstName: Leonard
          LastName: Somtil
          Active: "true"
          Email: Leonard.Somtil@sap.com
          AccessLevel: Learner
          Brand: Default
    ListingUser:
      title: Assign Users To a Listing
      required:
      - AccessLevel
      - Brand
      - Email
      - FirstName
      - Id
      - LastName
      - UserName
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
          format: Username
        FirstName:
          type: string
        LastName:
          type: string
        Active:
          type: boolean
        Email:
          type: string
          format: Username
        AccessLevel:
          type: string
        Brand:
          type: string
      example:
        Id: -bA-I8jb-tXUrvqglbdc1A2
        UserName: LennyLitmos
        FirstName: Leonard
        LastName: Somtil
        Active: "true"
        Email: Leonard.Somtil@sap.com
        AccessLevel: Learner
        Brand: Default
    Token:
      title: Token
      required:
      - Active
      - MaximumActivations
      - TokenCode
      - TokenExpiration
      - TokenId
      - TokenType
      - TokenTypeId
      type: object
      properties:
        TokenId:
          type: string
          format: EncryptedId
        TokenCode:
          type: string
          format: Token-code
        TokenType:
          maximum: 4
          minimum: 1
          type: integer
          format: int32
        TokenTypeId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        MaximumActivations:
          type: integer
        TokenExpiration:
          type: string
          format: date-time
      example:
        TokenId: HexcrCPIt-o1
        TokenCode: Dojo Core Discipline
        TokenType: 3
        TokenTypeId: ahi_5n5C02E1
        Active: true
        MaximumActivations: 1000
        TokenExpiration: 12/31/2025 12:00:00 AM
    Tokens:
      title: Tokens
      required:
      - Token
      type: object
      properties:
        Token:
          type: array
          items:
            $ref: '#/components/schemas/Token'
    inline_response_200:
      type: object
      properties:
        Username:
          type: string
        ImporStatus:
          type: string
      example: '{Username=LitmosLearner, ImportStatus=Failed - Unknown Error}'
    collectionscollectionIdcourses_Course:
      type: object
      properties:
        CourseId:
          type: string
          format: EncryptedId
        SeqId:
          type: integer
          format: int32
    Body:
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/collectionscollectionIdcourses_Course'
      example:
        Course:
          CourseId: gqYHrApPYuQ1
          SeqId: 1
      xml:
        name: Courses
    Body_1:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
      example:
        Id: gqYHrApPYuQ1
      xml:
        name: Courses
    collectionscollectionIdlearningpaths_LearningPath:
      type: object
      properties:
        LearnigPathId:
          type: string
          format: EncryptedId
        SeqId:
          type: integer
          format: int32
    Body_2:
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/collectionscollectionIdlearningpaths_LearningPath'
      example:
        LearningPath:
          LearningPathId: 9Tx5gErG1z81
          SeqId: 2
      xml:
        name: LearningPaths
    Body_3:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
      example:
        Id: 9Tx5gErG1z81
      xml:
        name: LearningPaths
    inline_response_200_1:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        OriginalId:
          type: string
          format: Id
        Code:
          type: string
        Name:
          type: string
        Description:
          type: string
        CourseCode:
          type: string
          format: Id
        Active:
          type: boolean
        IncludeInLibrary:
          type: boolean
        CompleteInOrder:
          type: boolean
        CourseImageURL:
          type: string
          format: url
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: EncryptedId
        UpdatedBy:
          type: string
          format: EncryptedId
        ForSale:
          type: boolean
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        Price:
          type: string
          format: integer
        AccessTillDate:
          type: string
          format: date-time
        AccessTillDays:
          type: string
          format: date-time
        DueDate:
          type: string
          format: date-time
        DueDateSpan:
          type: string
          format: integer
        ComplianceDate:
          type: string
          format: date-time
        ComplianceDateSpan:
          type: string
          format: integer
        ComplianceRetake:
          type: string
          format: integer
        Languages:
          type: array
          items:
            type: string
        Topics:
          type: string
        Tags:
          type: string
        CoursePreRequisites:
          type: string
          format: EncryptedId
        LearningPathPreRequisites:
          type: string
          format: EncryptedId
        Skills:
          type: string
        Social:
          type: boolean
        DiscussionForum:
          type: boolean
        AdvCourseCustomField1:
          type: string
        AdvCourseCustomField2:
          type: string
        AdvCourseCustomField3:
          type: string
        AdvCourseCustomField4:
          type: string
        AdvCourseCustomField5:
          type: string
        AdvCourseCustomField6:
          type: string
        AdvCourseCustomField7:
          type: string
        AdvCourseCustomField8:
          type: string
        AdvCourseCustomField9:
          type: string
        AdvCourseCustomField10:
          type: string
        AllModulesNewWindow:
          type: boolean
        Certificate:
          type: boolean
        BoostsReleased:
          type: integer
          format: int32
        BoostsFrequency:
          type: integer
          format: int32
      example: '{Id=gqYHrApPYuQ1, OriginalId=5857921, Code=DOJO104, Name=0 - Getting
        Started with Litmos, Description=This course will provide a brief introduction
        to all the cool features of Litmos.   Within minutes, you will be creating
        your own courses, adding users, and even customizing the look and feel of
        the learner experience.  See how easy it is to get up and running.  With SAP
        Litmos Training, you will love your LMS!, CourseCode=5857921-DOJO104, Active=true,
        IncludeInLibrary=true, CompleteInOrder=false, CourseImageURL=https://d16smq18f8amlc.cloudfront.net/53209/CourseImages/5051839-58707278-0307-4098-8590-5e371466f1b4.png?Expires=1632246724&amp;Signature=UZ-1EoFxcctq-zchQjotYcNVrlIQ8S8anCqQedzWJPycac0fR8IbsvIYYok5BG98s7p5M6DRhZxSUIVdkDsWF8tYssnysz4U~a8ECHUkiYEvg7p25mCZulXz7l2NIPyUW8T8ks1Hwh7LOgLTYbkzkCstknLJc2q84OEGpCa0OJU_&amp;Key-Pair-Id=APKAIQKC33KEMABEYE6A,
        CreateDate=2021-05-10T16:14:38.093+0000, UpdatedDate=2021-05-10T23:55:32.817+0000,
        CreatedBy=zanYrq_eO1c1, UpdatedBy=Oe4zZK7ZntpWn8FLGZTxuw2, ForSale=false,
        Tags=Beginner, Social=false, DiscussionForum=false, AdvCourseCustomField1=4,
        AllModulesNewWindow=false, Certificate=false, BoostsReleased=0, BoostFrequency=2}'
    inline_response_200_2:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Completed:
          type: boolean
        PercentageComplete:
          type: string
          format: integer
        CompliantTill:
          type: string
          format: date-time
        DueDate:
          type: string
          format: date-time
      example: '{Id=-bA-I8jb-tXUrvqglbdc1A2, Username=LennyLitmos, FirstName=Leonard,
        LastName=Somtil, Completed=false, PercentageComplete=0.0}'
    inline_response_200_3:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserOriginalId:
          type: string
          format: Id
        UserName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Active:
          type: boolean
        Email:
          type: string
        AccessLevel:
          type: string
        LoginKey:
          type: string
        CourseId:
          type: string
          format: EncryptedId
        CourseOriginalId:
          type: string
          format: Id
        UpdatedDate:
          type: string
          format: date-time
        Code:
          type: string
        CourseName:
          type: string
        Complete:
          type: boolean
        PercentageComplete:
          type: string
          format: integer
        CompletedDate:
          type: string
          format: date-time
        UpToDate:
          type: boolean
        Overdue:
          type: boolean
        CompliantTillDate:
          type: string
          format: date-time
      example: '{Id=Oe4zZK7ZntpWn8FLGZTxuw2, UserOriginalId=22584109, UserName=LitmosIntegrations,
        FirstName=SAP, LastName=Litmos, Active=true, Email=Litmos_integrations@SAP.com,
        AccesLevel=Account_Owner, LoginKey=https://apibushub.litmos.com/login.aspx?loginkey=49791dec-e090-48cf-bd5c-55af364fc9c3,
        CourseId=gqYHrApPYuQ1, CourseOriginalId=5857921, UpdatedDate=2021-09-20T19:19:58.097+0000,
        Code=DOJO104, CourseName=0 - Getting Started with Litmos, Complete=false,
        PercentageComplete=50.0, UpToDate=true, Overdue=fale}'
    inline_response_200_4:
      type: object
      properties:
        parameter:
          type: string
      example: '{parameter=Continuing Education Units}'
    inline_response_200_5_Module:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        OriginalId:
          type: string
          format: Id
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        Passmark:
          type: integer
          format: decimal
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        ModuleType:
          type: string
      example: '{"Id":"FOkl7r-pv5lMuOz2x2dlgQ2","OriginalId":10644730,"Name":"Example
        Assessment Title","Description":"Example Assessment Description","Active":true,"Passmark":100,"CreatedDate":"2021-07-12T22:53:30.583","UpdatedDate":"2021-07-12T22:53:30.583","CreatedBy":22584109,"ModuleType":"Assessment"}'
    inline_response_200_5:
      type: object
      properties:
        Module:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_5_Module'
    inline_response_200_6_Course:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Code:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        ForSale:
          type: boolean
        OriginalCourseId:
          type: string
          format: Id
        Description:
          type: string
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        CourseCodeForBulkImport:
          type: string
        Price:
          type: integer
          format: decimal
        AccessTillDate:
          type: string
          format: date-time
        AccessTillDays:
          type: integer
          format: int32
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
        CompliantTillDays:
          type: integer
          format: int32
        TimeLimitDate:
          type: string
          format: date-time
        TimeLimitDays:
          type: integer
          format: int32
        DisplayOrder:
          type: integer
          format: int32
        IncludeInLibrary:
          type: boolean
        CourseImageURL:
          type: string
          format: URL
      example: '{"Id":"glLI883QNYk1","Code":"Example-101","Name":"Example Course","Active":true,"ForSale":true,"OriginalCourseId":6064810,"Description":"Example
        Course Description","EcommerceShortDescription":"Example short description
        for ecommerce shopping cart checkout","EcommerceLongDescription":"Example
        long description for ecommerce shopping cart checkout","CourseCodeForBulkImport":"6064810-A","Price":100.0,"CreatedDate":"2021-07-09T14:54:38.197+0000","UpdatedDate":"2021-09-21T21:26:13.000+0000","CreatedBy":22584109,"UpdatedBy":22584109,"TimeLimitDays":0,"DisplayOrder":0,"IncludeInLibrary":false}'
    inline_response_200_6:
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_6_Course'
    inline_response_200_7_LearningPath:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        OriginalId:
          type: string
          format: Id
        ForSale:
          type: boolean
        Price:
          type: integer
          format: decimal
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        AccessTillDate:
          type: string
          format: date-time
        AccessTillDays:
          type: integer
          format: int32
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        DisplayOrder:
          type: integer
          format: int32
        IncludeInLibrary:
          type: boolean
        IsCourseOptionalOrder:
          type: boolean
        ImageURL:
          type: string
          format: URL
      example: '{"Id":"tI5Elw83pIU1","Name":"Example Learning Path","Active":true,"OriginalId":153369,"ForSale":true,"Price":200.0,"EcommerceShortDescription":"Example
        short description for ecommerce shopping cart checkout","EcommerceLongDescription":"Example
        long description for ecommerce shopping cart checkout","CreatedDate":"2021-07-13T16:38:54.537","UpdatedDate":"2021-09-21T21:26:13.033","CreatedBy":22584109,"DisplayOrder":0,"IncludeInLibrary":false,"IsCourseOptionalOrder":false}'
    inline_response_200_7:
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_7_LearningPath'
    inline_response_200_8_ModuleResult:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserId:
          type: string
          format: EncryptedId
        OriginalModuleId:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: EncryptedId
        ModuleResultId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        Name:
          type: string
        Passmark:
          type: integer
          format: decimal
        Score:
          type: integer
          format: int32
        UserName:
          type: string
          format: Username
        Completed:
          type: boolean
        AttemptNumber:
          type: integer
          format: int32
        CreatedBy:
          type: string
          format: EncryptedId
        FinishedDate:
          type: string
          format: date-time
        CreatedDate:
          type: string
          format: date-time
        StartedDate:
          type: string
          format: date-time
        TimeTaken:
          type: string
          format: time
        UpdatedDate:
          type: string
          format: date-time
        Code:
          type: string
      example: '{"Id":"7jGr3vKYlweyjWqzaypWXQ2","UserId":"Oe4zZK7ZntpWn8FLGZTxuw2","OriginalModuleId":10323350,"OriginalUserId":22584109,"ModuleResultId":371938307,"Active":true,"Name":"0
        - Getting Started with Litmos","Passmark":0,"Score":0,"UserName":"LitmosIntegrations","Completed":true,"AttemptNumber":1,"CreatedBy":-1,"FinishedDate":"2021-09-20T00:00:00","CreatedDate":"2021-09-20T19:19:58.08","StartedDate":"2021-09-20T00:00:00","TimeTaken":"00:00:39","UpdatedDate":"2021-09-20T23:25:47.590+0000"}'
    inline_response_200_8:
      type: object
      properties:
        ModuleResult:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_8_ModuleResult'
    inline_response_200_9_UserResult:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserId:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: EncryptedId
        Name:
          type: string
        Active:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        StartedDate:
          type: string
          format: date-time
        Completed:
          type: boolean
        PercentageComplete:
          type: integer
          format: decimal
        CompletedDate:
          type: string
          format: date-time
        UpToDate:
          type: string
          format: date-time
        Overdue:
          type: boolean
        CompliantTillDate:
          type: string
          format: date-time
        DueDate:
          type: string
          format: date-time
        LastAttemptDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: EncryptedId
        UpdatedBy:
          type: string
          format: EncryptedId
        Code:
          type: string
        UserName:
          type: string
          format: Username
        LearningPathAssignment:
          type: boolean
        TeamAssignment:
          type: boolean
      example: '{"Id":"gqYHrApPYuQ1","UserId":"Oe4zZK7ZntpWn8FLGZTxuw2","OriginalCourseId":5857921,"OriginalUserId":22584109,"Name":"0
        - Getting Started with Litmos","Active":true,"CreatedDate":"2021-09-20T19:19:55.847","UpdatedDate":"2021-09-20T23:25:47.603","StartedDate":"2021-05-11T18:27:24.577","Completed":true,"PercentageComplete":100.0,"CompletedDate":"2021-09-20T23:25:47.603","UpToDate":true,"Overdue":false,"LastAttemptDate":"2021-09-20T23:25:47.603","CreatedBy":"-1","UpdatedBy":22584109,"Code":"DOJO104","UserName":"LitmosIntegrations"}'
    inline_response_200_9:
      type: object
      properties:
        UserResult:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_9_UserResult'
    inline_response_200_10_LearningPathResult:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserId:
          type: string
          format: EncryptedId
        OriginalLearningPathId:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        Name:
          type: string
        PercentageComplete:
          type: integer
          format: decimal
        Completed:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CompliantTillDate:
          type: string
          format: date-time
        StartDate:
          type: string
          format: date-time
        FinishDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
      example: '{"Id":"tI5Elw83pIU1","UserId":"-bA-I8jb-tXUrvqglbdc1A2","OriginalLearningPathId":153369,"OriginalUserId":23180609,"Active":true,"Name":"Example
        Learning Path","PercentageComplete":0.0,"Completed":false,"CreatedDate":"2021-09-21T18:44:28.500+0000","UpdatedDate":"2021-09-21T21:26:13.017+0000","CreatedBy":22584109}'
    inline_response_200_10:
      type: object
      properties:
        LearningPathResult:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_10_LearningPathResult'
    inline_response_200_11_Achievement:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserId:
          type: string
          format: EncryptedId
        CourseId:
          type: string
          format: EncryptedId
        LearningPathId:
          type: string
          format: EncryptedId
        OriginalAchievementId:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: EncryptedId
        OriginalLearningPathId:
          type: string
          format: EncryptedId
        ComplaintTillDate:
          type: string
          format: date-time
        Title:
          type: string
        AchievementDate:
          type: string
          format: date-time
        Type:
          type: string
        CertificateId:
          type: string
          format: EncryptedId
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: date-time
        UpdatedBy:
          type: string
          format: date-time
      example: '{"Id":"kBI2vqBRa-0-d0bKnQoICg2","UserId":"Oe4zZK7ZntpWn8FLGZTxuw2","CourseId":91450502,"OriginalAchievementId":91450502,"OriginalUserId":22584109,"OriginalCourseId":5857921,"Title":"2021-05-11T18:27:24.763","AchievementDate":"2021-05-11T18:27:24.763","Type":"Course
        Completed","CreatedDate":"2021-05-11T18:27:24.793","UpdatedDate":"2021-09-20T23:25:47.603","CreatedBy":222584109,"UpdatedBy":-1}'
    inline_response_200_11:
      type: object
      properties:
        Achievement:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_11_Achievement'
    inline_response_200_12_CourseModule:
      type: object
      properties:
        CourseId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: EncryptedId
        OriginalModuleId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: id
        UpdatedBy:
          type: string
          format: id
      example: '{"CourseId":"glLI883QNYk1","Id":"moHEukI6umGTYBcFqKcppw2","OriginalCourseId":606481,"OriginalModuleId":11064556,"Active":true,"CreatedDate":"2021-09-21T21:26:13","UpdatedDate":"2021-09-21T21:26:13","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_12:
      type: object
      properties:
        CourseModule:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_12_CourseModule'
    inline_response_200_13_LearningPathCourse:
      type: object
      properties:
        LearningPathId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalLearningPathId:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: id
        UpdatedBy:
          type: string
          format: id
      example: '{"LearningPathId":"tI5Elw83pIU1","Id":"5b0yGqjL4Qs1","OriginalLearningPathId":153369,"OriginalCourseId":5857904,"Active":true,"CreatedDate":"2021-09-21T22:48:24.593","UpdatedDate":"2021-09-21T22:48:24.593","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_13:
      type: object
      properties:
        LearningPathCourse:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_13_LearningPathCourse'
    inline_response_200_14_UserCourse:
      type: object
      properties:
        UserId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalUserId:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: id
        UpdatedBy:
          type: string
          format: id
      example: '{"UserId":"Oe4zZK7ZntpWn8FLGZTxuw2","Id":"gqYHrApPYuQ1","OriginalUserId":22584109,"OriginalCourseId":5857921,"Active":true,"CreatedDate":"2021-09-20T19:19:55.847","UpdatedDate":"2021-09-20T19:19:55.847","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_14:
      type: object
      properties:
        UserCourse:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_14_UserCourse'
    inline_response_200_15_LearningPathUser:
      type: object
      properties:
        LearningPathId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalLearningPathId:
          type: string
          format: EncryptedId
        Active:
          type: boolean
        OriginalUserId:
          type: string
          format: EncryptedId
        CreatedBy:
          type: string
          format: id
        CreatedDate:
          type: string
          format: date-time
        UpdatedBy:
          type: string
          format: id
        UpdatedDate:
          type: string
          format: date-time
      example: '{"LearningPathId":"tI5Elw83pIU1","Id":"-bA-I8jb-tXUrvqglbdc1A2","OriginalLearningPathId":153369,"Active":true,"OriginalUserId":23180609,"CreatedBy":22584109,"CreatedDate":"2021-09-21T18:44:28.49","UpdatedBy":0}'
    inline_response_200_15:
      type: object
      properties:
        LearningPathUser:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_15_LearningPathUser'
    inline_response_200_16_Team:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        OriginalTeamId:
          type: string
          format: Id
        Active:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
        ParentTeamId:
          type: string
          format: EncryptedId
        TeamCodeForBulkImport:
          type: string
      example: '{"Id":"Qx-gekjRqbA1","Name":1988719,"OriginalTeamId":1988719,"CreatedDate":"2021-09-21T23:05:25.903","UpdatedDate":"2021-09-21T23:05:25.903","CreatedBy":22584109,"UpdatedBy":22584109,"ParentTeamId":"9Tx5gErG1z81","TeamCodeForBulkImport":"1988719-Example3SubTeamName"}'
    inline_response_200_16:
      type: object
      properties:
        Team:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_16_Team'
    inline_response_200_17_TeamUser:
      type: object
      properties:
        TeamId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalTeamId:
          type: string
          format: Id
        OriginalUserId:
          type: string
          format: Id
        Active:
          type: boolean
        IsTeamLeader:
          type: boolean
        IsTeamAdmin:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
      example: '{"TeamId":"9eJGkqnHg041","Id":"Oe4zZK7ZntpWn8FLGZTxuw2","OriginalTeamId":191220,"OriginalUserId":22584109,"Active":true,"IsTeamLeader":false,"IsTeamAdmin":true,"CreatedDate":"2021-09-21T00:23:46.967","UpdatedDate":"2021-09-21T00:23:58.627","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_17:
      type: object
      properties:
        TeamUser:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_17_TeamUser'
    inline_response_200_18_TeamCourse:
      type: object
      properties:
        TeamId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalCourseId:
          type: string
          format: Id
        OriginalTeamId:
          type: string
          format: Id
        Active:
          type: boolean
        IsInTeamLibrary:
          type: boolean
        LearningPathAssignment:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
      example: '{"TeamId":"j9RyG2ICy_M1","Id":"uxLhfIng9YY1","OriginalCourseId":5857899,"OriginalTeamId":1869991,"Active":true,"IsInTeamLibrary":false,"LearningPathAssignment":false,"CreatedDate":"2021-09-21T23:18:39.18","UpdatedDate":"2021-09-21T23:18:39.18","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_18:
      type: object
      properties:
        TeamCourse:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_18_TeamCourse'
    inline_response_200_19_TeamLearningPath:
      type: object
      properties:
        TeamId:
          type: string
          format: EncryptedId
        Id:
          type: string
          format: EncryptedId
        OriginalLearningPathId:
          type: string
          format: Id
        OriginalTeamId:
          type: string
          format: Id
        Active:
          type: boolean
        IsInTeamLibrary:
          type: boolean
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
      example: '{"TeamId":"mDbE1cS3dZY1","Id":"ahi_5n5C02E1","OriginalLearningPathId":148263,"OriginalTeamId":1870009,"Active":true,"IsInTeamLibrary":false,"CreatedDate":"2021-09-21T23:24:05.437","UpdatedDate":"2021-09-21T23:24:05.437","CreatedBy":22584109,"UpdatedBy":22584109}'
    inline_response_200_19:
      type: object
      properties:
        TeamLearningPath:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_19_TeamLearningPath'
    inline_response_200_20_User:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
          format: Username
        FirstName:
          type: string
        LastName:
          type: string
        FullName:
          type: string
        Email:
          type: string
          format: Email address
        AccessLevel:
          type: string
        DisableMessages:
          type: boolean
        Active:
          type: boolean
        Skype:
          type: string
        PhoneWork:
          type: string
        PhoneMobile:
          type: string
        LastLogin:
          type: string
          readOnly: true
        LoginKey:
          type: string
          readOnly: true
        IsCustomUsername:
          type: boolean
        TimeZone:
          type: string
        SalesforceId:
          type: string
          format: SalesforceId
        OriginalUserId:
          type: string
          format: id
          readOnly: true
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        PostalCode:
          type: string
        Country:
          type: string
        CompanyName:
          type: string
        JobTitle:
          type: string
        CustomField1:
          type: string
        CustomField2:
          type: string
        CustomField3:
          type: string
        CustomField4:
          type: string
        CustomField5:
          type: string
        CustomField6:
          type: string
        CustomField7:
          type: string
        CustomField8:
          type: string
        CustomField9:
          type: string
        CustomField10:
          type: string
        SalesforceContactId:
          type: string
          format: SalesforceId
        SalesforceAccountId:
          type: string
          format: SalesforceId
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: Id
        UpdatedBy:
          type: string
          format: Id
        Brand:
          type: string
        ManagerId:
          type: string
          format: EncryptedId
        ManagerName:
          type: string
          format: Username
        EnableTextNotification:
          type: boolean
        Website:
          type: string
        Twitter:
          type: string
        ExpirationDate:
          type: string
          format: date-time
        ExternalEmployeeId:
          type: string
        ProfileType:
          pattern: internal, external
          type: string
      example: '{"Id":"-bA-I8jb-tXUrvqglbdc1A2","UserName":"LennyLitmos","FirstName":"Leonard","LastName":"Somtil","FullName":"LeondardMSomtil","Email":"LeonardSomtil@sap.com","AccessLevel":"Learner","DisableMessages":"false","Active":"true","Skype":"LeoMSomtil_Skype","PhoneWork":"925-251-0000","PhoneMobile":"925-251-0000","LastLogin":"2021-09-20T20:50:36Z","LoginKey":"/login.aspx?loginkey=","IsCustomUsername":"false","TimeZone":"Pacific
        Standard Time","Street1":"2700 Camino Ramon","Street2":"Suite 400","City":"San
        Ramon","State":"California","PostalCode":94521,"Country":"United States of
        America","CompanyName":"SAP Litmos","JobTitle":"Mascot","CustomField1":"CustomField1","CustomField2":"CustomField2","CustomField3":"CustomField3","CustomField4":"CustomField4","CustomField5":"CustomField5","CustomField6":"CustomField6","CustomField7":"CustomField7","CustomField8":"CustomField8","CustomField9":"CustomField9","CustomField10":"CustomField10","CreatedBy":0,"UpdatedBy":0,"Brand":"Default","EnableTextNotification":"false","Website":"https://www.litmos.com","Twitter":"@Litmos","ExternalEmployeeId":17043521,"ProfileType":"Internal"}'
    inline_response_200_20:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_20_User'
    inline_response_200_21_Course:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Code:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        UpdatedBy:
          type: string
          format: EncryptedId
        OriginalId:
          type: string
          format: Id
        Description:
          type: string
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        Skills:
          type: string
        Price:
          type: integer
          format: int32
        AccessTillDate:
          type: string
          format: date-tinme
        AccessTillDays:
          type: integer
          format: int32
        CoursePreRequisites:
          type: string
          format: EncryptedId
        LearningPathPreRequisites:
          type: string
          format: EncryptedId
        Currency:
          type: string
        Languages:
          type: string
        Topics:
          type: string
        Tags:
          type: string
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: EncryptedId
    inline_response_200_21_Courses:
      type: object
      properties:
        Course:
          $ref: '#/components/schemas/inline_response_200_21_Course'
    inline_response_200_21:
      type: object
      properties:
        Courses:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_21_Courses'
      example: '{Courses={Course={Id=LitmosLearner, Code=6064810-A, Name=Example Course,
        Active=true, UpdatedBy=22584109, OriginalId=6064810, Description=Example Course
        Description, EcommerceShortDescription=Example short description for ecommerce
        shopping cart checkout, EcommerceLongDescription=Example long description
        for ecommerce shopping cart checkout, Price=100.0, CoursePreRequisites=5857921,
        LearningPathPreRequisites=148263, Currency=USD, Languages=English (United
        States), Topics=Example Topic, Tags=examplecontenttag, CreatedDate=2021-07-09T14:54:38.197+0000,
        UpdatedDate=2021-09-20T20:59:29.210+0000, CreatedBy=22584109}}}'
    inline_response_200_22_LearningPath:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        OriginalId:
          type: string
          format: Id
        Price:
          type: integer
          format: int32
        EcommerceShortDescription:
          type: string
        EcommerceLongDescription:
          type: string
        AccessTillDate:
          type: string
          format: date-tinme
        AccessTillDays:
          type: integer
          format: int32
        CreatedDate:
          type: string
          format: date-time
        UpdatedDate:
          type: string
          format: date-time
        CreatedBy:
          type: string
          format: EncryptedId
        Code:
          type: string
        Currency:
          type: string
        Languages:
          type: string
        Topics:
          type: string
        Tags:
          type: string
        CoursePreRequisites:
          type: string
          format: EncryptedId
        LearningPathPreRequisites:
          type: string
          format: EncryptedId
        Skills:
          type: string
        UpdatedBy:
          type: string
          format: EncryptedId
    inline_response_200_22_LearningPaths:
      type: object
      properties:
        LearningPath:
          $ref: '#/components/schemas/inline_response_200_22_LearningPath'
    inline_response_200_22:
      type: object
      properties:
        LearningPaths:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_22_LearningPaths'
      example: '{LearningPaths={LearningPath={Id=LitmosLearner, Code=6064810-A, Name=Example
        Course, Active=true, UpdatedBy=22584109, OriginalId=6064810, Description=Example
        Course Description, EcommerceShortDescription=Example short description for
        ecommerce shopping cart checkout, EcommerceLongDescription=Example long description
        for ecommerce shopping cart checkout, Price=100.0, CoursePreRequisites=5857921,
        LearningPathPreRequisites=148263, Currency=USD, Languages=English (United
        States), Topics=Example Topic, Tags=examplecontenttag, CreatedDate=2021-07-09T14:54:38.197+0000,
        UpdatedDate=2021-09-20T20:59:29.210+0000, CreatedBy=22584109}}}'
    inline_response_200_23:
      type: object
      properties:
        TotalBadgesEarned:
          type: integer
          format: int32
        TotalPointsEarned:
          type: integer
          format: int32
      example: '{TotalBadgessEarned=0.0, TotalPointsEarned=0.0}'
    inline_response_200_24:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Title:
          type: string
        Description:
          type: string
        Icon:
          type: string
          format: URL
        IconBadgeColor:
          type: string
      example: '{Id=XRBgquwAvjw1, Title=DOJO101, Description=Litmos Dojo - WHITE BELT,
        Icon=https://cdn1.litmos.com/146205/Badges/44975-LitmosDojoWhiteBelt.png?Expires=1632266802&amp;Signature=N~U8eK~OVZKkiUNr7rEYlDqxL8NfzLCUW4GHOJ8AabiTiAicC0saurVfogMVXp3VCtXdTvGmBbIf61Z-pVcff~ozIGzqv3tO~SBElFht-A79ObFCqzv1lfjOyy9zZeHdAOYQ592xuipTDAw0QnXVclNxVq4h7SzmEH2FVgSFCBI_&amp;Key-Pair-Id=APKAIQKC33KEMABEYE6A}'
    teamsteamIdlearningpaths_LearningPath:
      type: object
      properties:
        LearningPathId:
          type: string
          format: EncryptedId
      example: '{"LearnigPathId":"ahi_5n5C02E1"}'
    Body_4:
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/teamsteamIdlearningpaths_LearningPath'
      xml:
        name: LearningPaths
    inline_response_200_25_User:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Username:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Active:
          type: boolean
        Email:
          type: string
          format: email address
        AccessLevel:
          type: string
        Brand:
          type: string
    inline_response_200_25:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_25_User'
      example: '{User={Id=pDRdxm9uiQLSbzewkldUsA2, UserName=LitmosLearner, FirstName=Jane,
        LastName=Doe, Active=true, Email=Litmos_JaneDoe@litmos.com, AccessLevel=Learner,
        Brand=Default}}'
    inline_response_200_26_User:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        FullName:
          type: string
        Email:
          type: string
        AccessLevel:
          type: string
        DisableMessages:
          type: boolean
        Active:
          type: boolean
        Skype:
          type: string
        PhoneWork:
          type: string
        PhoneMobile:
          type: string
        LastLogin:
          type: string
          format: date-time
        LoginKey:
          type: string
          format: URL
        IsCustomUsername:
          type: boolean
        SkipFirstLogin:
          type: boolean
        TimeZone:
          type: string
        SalesforceId:
          type: string
          format: salesforceId
        OriginalId:
          type: string
          format: Id
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        PostalCode:
          type: string
        Country:
          type: string
        CompanyName:
          type: string
        JobTitle:
          type: string
        CustomField1:
          type: string
        CustomField2:
          type: string
        CustomField3:
          type: string
        CustomField4:
          type: string
        CustomField5:
          type: string
        CustomField6:
          type: string
        CustomField7:
          type: string
        CustomField8:
          type: string
        CustomField9:
          type: string
        CustomField10:
          type: string
        SalesforcecontactId:
          type: string
          format: salesforceId
        SalesforceAccountId:
          type: string
          format: salesforceId
        CreatedDate:
          type: string
          format: date-time
        Points:
          type: integer
          format: int32
        Brand:
          type: string
        ManagerId:
          type: string
          format: EncryptedId
        ManagerName:
          type: string
          format: Username
        EnableTextNotifications:
          type: boolean
        Website:
          type: string
        Twitter:
          type: string
        ExpirationDate:
          type: string
          format: date-time
        JobRole:
          type: string
        ExternalEmployeeId:
          type: string
        ProfileType:
          type: string
    inline_response_200_26:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_26_User'
      example: '{User={Id=-bA-I8jb-tXUrvqglbdc1A2, UserName=LennyLitmos, FirstName=Leonard,
        LastName=Somtil, FullName=Leonard Somtil, Email=LeonardSomtil@sap.com, AccessLevel=Learner,
        DisableMessages=true, Active=true, PhoneWork=925-251-2220, LastLogin=2021-09-20T20:50:36.000+0000,
        LoginKey=https://apibushub.litmos.com/login.aspx?loginkey=9e9f63bc-805f-4e58-8e5c-347f37cbcacf,
        IsCustomUsername=false, SkipFirstLogin=false, TimeZone=Pacific Standard Time,
        OriginalId=23180609, Street1=2700 Camino Ramon, Street2=Suite 400, City=San
        Ramon, State=California, PostalCode=94583, Country=United States of America,
        CompanyName=SAP Litmos, JobTitle=Mascot, Culture=en-US, CreatedDate=2021-07-09T14:52:06.000+0000,
        Points=0, Brand=Default, ManagerId=Oe4zZK7ZntpWn8FLGZTxuw2, ManagerName=SAP
        Litmos LitmosIntegrations, EnableTextNotifications=false, Website=Litmos.com,
        JobRole=Mascot, ExternalEmployeeId=17043521, ProfileType=Internal}}'
    inline_response_200_27:
      type: object
      properties:
        parameter:
          type: string
      example: '{parameter=Department}'
    Body_5:
      type: object
      properties:
        parameter:
          type: string
      example:
        parameter: Department
      xml:
        name: ArrayOfparameter
    inline_response_200_28_Course:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Code:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        Complete:
          type: boolean
        PercentageComplete:
          type: integer
          format: int32
        AssignedDate:
          type: string
          format: date-time
        StartDate:
          type: string
          format: date-time
        CompletedDate:
          type: string
          format: date-time
        UpToDate:
          type: boolean
        Overdue:
          type: boolean
        ComplaintTill:
          type: string
          format: date-time
        IsLearningPath:
          type: boolean
        CourseCreatedDate:
          type: string
          format: date-time
        CourseCreator:
          type: string
          format: EncryptedId
        OriginalId:
          type: string
          format: Id
        ResultId:
          type: string
          format: EncryptedId
        AccessTillDate:
          type: string
          format: date-time
    inline_response_200_28:
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_28_Course'
      example: '{Course={Id=gqYHrApPYuQ1, Code=0 - Getting Started with Litmos, Name=0
        - Getting Started with Litmos, Active=true, Complete=false, PercentageComplete=0.0,
        AssignedDate=2021-07-09T17:14:38.643+0000, UpToDate=true, Overdue=false, IsLearningPath=false,
        CourseCreatedDate=2021-07-09T17:14:38.643+0000, OriginalId=5857921, ResultId=338120142}}'
    usersuserIdcourses_Course:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
    Body_6:
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/usersuserIdcourses_Course'
      example:
        Course:
          Id: gqYHrApPYuQ1
      xml:
        name: Courses
    userscourses_User:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
      example: '{"Id":"-bA-I8jb-tXUrvqglbdc1A2"}'
    Body_7:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/userscourses_User'
      xml:
        name: Users
    inline_response_200_29_LearningPath:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        Name:
          type: string
        Active:
          type: boolean
        OriginalId:
          type: string
          format: Id
        Complete:
          type: boolean
        PercentageComplete:
          type: integer
          format: int32
        AssignedDate:
          type: string
          format: date-time
        StartDate:
          type: string
          format: date-time
        CompletedDate:
          type: string
          format: date-time
        ResultId:
          type: string
          format: EncryptedId
        AccessTillDate:
          type: string
          format: date-time
    inline_response_200_29:
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_29_LearningPath'
      example: '{LearningPath={Id=tI5Elw83pIU1, Name=Example Learning Path, Active=true,
        OriginalId=153369, Complete=false, PercentageComplete=0.0, AssignedDate=2021-07-09T17:14:38.643+0000,
        ResultId=338120142}}'
    Body_8:
      type: object
      properties:
        LearningPath:
          type: array
          items:
            $ref: '#/components/schemas/usersuserIdcourses_Course'
      example:
        LearningPath:
          Id: ahi_5n5C02E1
      xml:
        name: LearningPaths
    teamsteamIdcourses_Course:
      type: object
      properties:
        CourseId:
          type: string
          format: EncryptedId
      example: '{"CourseId":"gqYHrApPYuQ1"}'
    Body_9:
      type: object
      properties:
        Course:
          type: array
          items:
            $ref: '#/components/schemas/teamsteamIdcourses_Course'
      xml:
        name: Courses
    inline_response_200_30_User:
      type: object
      properties:
        Id:
          type: string
          format: EncryptedId
        UserName:
          type: string
          format: Username
        FirstName:
          type: string
        LastName:
          type: string
        Active:
          type: boolean
        Email:
          type: string
          format: email address
        AccessLevel:
          type: string
        Brand:
          type: string
    inline_response_200_30:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_30_User'
      example: '{User={Id=Oe4zZK7ZntpWn8FLGZTxuw2, UserName=LitmosIntegrations, FirstName=Litmos,
        LastName=Integrations, Active=true, Email=Litmos_integrations@sap.com, AccessLevel=Account_Owner,
        Brand=Default}}'
    inline_response_200_31:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_30_User'
      example: '{User={Id=-bA-I8jb-tXUrvqglbdc1A2, UserName=LennyLitmos, FirstName=Leonard,
        LastName=Somtil, Active=true, Email=LeondardSomtil@sap.com, AccessLevel=Team_Leader,
        Brand=Default}}'
    Body_10:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_30_User'
      example:
        User:
          Id: Oe4zZK7ZntpWn8FLGZTxuw2
          UserName: LitmosIntegrations
          FirstName: Litmos
          LastName: Integrations
          Active: true
          Email: Litmos_integrations@sap.com
          AccessLevel: Account_Owner
          Brand: Default
      xml:
        name: Users
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      description: Every user in Litmos has a unique API key. Only Account Owners
        are able to view user record API keys, and access to operations via API are
        restricted by access levels.
      name: APIKey
      in: header
x-sap-api-type: REST
x-sap-shortText: Online learning for every segment of your business.
x-sap-api-deprecated: false
x-sap-ext-overview:
- name: API package
  values:
  - text: v1
    format: plain
x-servers:
- url: https://api.litmos.com/v1.svc
  description: Region - United States of America
- url: https://api.litmos.com.au/v1.svc
  description: Region - Australia
- url: https://api.litmoseu.com/v1.svc
  description: Region - Europe
