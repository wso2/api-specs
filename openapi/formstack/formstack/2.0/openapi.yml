openapi: 3.0.0
info:
  x-ballerina-display:
    label: Formstack
    iconPath: "icon.png"
  description: 
    This is a generated connector for [Formstack REST API v2.0](https://formstack.readme.io/docs/api-overview) OpenAPI specification.

    The [Formstack REST API](https://formstack.readme.io/docs/api-overview) provides a way that helps organizations streamline digital work through no-code online forms, documents, and signatures. 
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials. 
  
    Create an [Formstack account](https://admin.formstack.com/signup/sign-starter) and obtain tokens following [this guide](https://help.formstack.com/s/article/How-to-create-a-V2-API-Application-Key).
  title: Formstack API
  version: 2.0
servers:
  - url: https://www.formstack.com/api/v2
tags:
  - name: Form
    description: >-
      Forms are how information is collected and defines how that information is stored
  - name: Folder
    description: >-
      Folders are how you organize your forms and are one way to assign form permissions to a group of forms
  - name: Field
    description: >-
      Fields are the specific input elements that collect data for each form
paths:
  /form.json:
    get:
      tags:
        - Form
      summary: Get all forms in your account
      operationId: getAllForms
      description: Get all forms in your account
      parameters:
        - description: Flag to return forms in lists separated by folder
          in: query
          name: folders
          schema:
            type: boolean
        - description: Page to use when paginating through forms. Starts at 1
          in: query
          name: page
          schema:
            type: integer
        - description: Number of forms to return per page. Minimum page limit is 10
          in: query
          name: per_page
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Forms"
  /form/{id}.json:
    get:
      tags:
        - Form
      summary: Get the details of the specified form
      operationId: getFormById
      description: Get the details of the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Form"
    put:
      tags:
        - Form
      summary: Update the details of the specified form
      operationId: updateFormById
      description: Update the details of the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        description: Form Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormRequest"
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
    delete:
      tags:
        - Form
      summary: Delete the specified form
      operationId: deleteFormById
      description: Delete the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
  /form/{id}/copy.json:
    post:
      tags:
        - Form
      summary: Create a copy of the specified form
      operationId: copyFormById
      description: Create a copy of the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Operation"
  /form/{id}/basic.json:
    get:
      tags:
        - Form
      summary: Get the basic details of the specified form
      operationId: getBasicFormById
      description: Get the basic details of the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Form"
  /form/{id}/html.json:
    get:
      tags:
        - Form
      summary: Get the html of the specified form
      operationId: getHtmlFormById
      description: Get the html of the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HtmlForm"
  /folder.json:
    get:
      tags:
        - Folder
      summary: Get all folders on your account and their subfolders
      operationId: getAllFolders
      description: Get all folders on your account and their subfolders
      parameters:
        - description: Page to use when paginating through forms. Starts at 1
          in: query
          name: page
          schema:
            type: integer
        - description: Number of forms to return per page. Minimum page limit is 10
          in: query
          name: per_page
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Folders"
  /folder/{id}.json:
    get:
      tags:
        - Folder
      summary: Get details for the specified folder or subfolder
      operationId: getFolderById
      description: Get details for the specified folder or subfolder
      parameters:
        - description: Folder ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Folder"
    put:
      tags:
        - Folder
      summary: Update the specified folder
      operationId: updateFolderById
      description: Update the specified folder
      parameters:
        - description: Folder ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        description: Folder Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderRequest"
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
    delete:
      tags:
        - Folder
      summary: Delete the specified folder
      operationId: deleteFolderById
      description: Delete the specified folder
      parameters:
        - description: Folder ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
  /form/{id}/field.json:
    get:
      tags:
        - Field
      summary: Get all fields for the specified form
      operationId: getAllFields
      description: Get all fields for the specified form
      parameters:
        - description: Form ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Fields"
  /field/{id}.json:
    get:
      tags:
        - Field
      summary: Get the details of the specified field
      operationId: getFieldById
      description: Get the details of the specified field
      parameters:
        - description: Field ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Field"
    put:
      tags:
        - Field
      summary: Update the specified field
      operationId: updateFieldById
      description: Update the specified field
      parameters:
        - description: Field ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        description: Field Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FieldRequest"
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
    delete:
      tags:
        - Field
      summary: Delete the specified field
      operationId: deleteFieldById
      description: Delete the specified field
      parameters:
        - description: Field ID
          in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/SuccessOperation"
components:
  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: Use your own account to authenticate with the API. https://help.formstack.com/s/article/How-to-create-a-V2-API-Application-Key
      flows: 
        authorizationCode:
          authorizationUrl: /oauth/authorize  
          tokenUrl: /oauth/token              
          scopes: {}
  schemas:
    FormRequest:
      properties:
        name:      
          description: The form name
          type: string
        db:
          description: Flag to disable or enable submissions to be saved in our database. Value 1 if true and 0 if false
          type: boolean
        template:
          description: Template ID for the template you want to use
          type: string
        num_columns:
          description: Number (1-4) of columns the form layout will have
          type: integer
          format: int64
        label_position:
          description: Sets the default field label position. Possible values are top and left
          type: string
        submit_button_title:
          description: Sets the submit button title
          type: string
        password:
          description: Sets a password for the form
          type: string
        use_ssl:
          description: Flag to disable or enable SSL (only available on accounts that have security features)
          type: boolean
        timezone:
          description: Sets the timezone for the form
          type: string
        language:
          description: Sets the language for the form - use ISO 639-1 language codes
          type: string
        active:
          description: Flag to make the form active/inactive
          type: boolean
        disabled_message:
          description: The message to show when the form is inactive
          type: string  
    FolderRequest:
      properties:
        name:      
          description: Folder name
          type: string
    FieldRequest:
      properties:
        field_type:      
          description: Field type
          type: string
        label:
          description: Field label
          type: string
        hide_label:
          description: Flag to show or hide the label
          type: boolean
        description:
          description: Field description (shown below field)
          type: string
        description_callout:
          description: Flag to show the description in a callout box
          type: boolean
        default_value:
          description: Initial value for the field
          type: string
        options:
          description: Array of option labels
          type: array
          items:
            $ref: "#/components/schemas/Option"
    SuccessOperation:
      properties:
        success:    
          description: Operation status
          type: string
        id:
          description: Form ID
          type: string
    Operation:
      properties:
        id:
          description: Form ID
          type: string
    Folders:
      properties:
        folders:
          description: Folders details     
          type: array
          items:
            $ref: "#/components/schemas/Folder"
        total:
          description: Total forms
          type: integer
          format: int64
    Folder:
      properties:
        id:      
          description: Form ID
          type: string
        name:
          type: string
        parent:      
          type: string
        permissions:
          type: string
        subfolders:
          type: array
          items:
            $ref: "#/components/schemas/Folder"
    Forms:
      properties:
        forms:
          description: Forms details     
          type: array
          items:
            $ref: "#/components/schemas/Form"
        total:
          description: Total forms
          type: integer
          format: int64
    Form:
      properties:
        id:      
          description: Form ID
          type: string
        created:
          type: string
        db:      
          type: string
        deleted:
          type: string
        folder:      
          type: string
        language:
          type: string
        num_columns:      
          type: string
        progress_meter:
          type: string
        timezone:
          type: string
        rss_url:
          type: string
        viewkey:      
          type: string
        thumbnail_url:
          type: string
          nullable: true
        can_access_1q_feature:
          type: boolean
        is_workflow_form:
          type: boolean
        inactive:
          type: boolean
        submit_button_title:
          type: string  
        permissions:
          type: integer  
          format: int64
        submissions_unread:
          type: string  
        should_display_one_question_at_a_time:
          type: boolean  
        views:
          type: string  
        has_approvers:
          type: boolean  
        can_edit:
          type: boolean
        url:
          type: string
        is_workflow_published:
          type: boolean
        submissions_today:
          type: integer  
          format: int64
        encrypted:
          type: boolean
        submissions:
          type: string
        name:
          type: string
        edit_url:
          type: string
        updated:
          type: string
        data_url:
          type: string
        summary_url:
          type: string
        last_submission_id:
          type: string
        last_submission_time:
          type: string
    HtmlForm:
      properties:
        id:
          description: Form ID    
          type: string
        html:
          description: HTML form representation
          type: string
    Fields:    
      type: array
      items:
        $ref: "#/components/schemas/Field"
    Field:    
      properties:
        id:
          type: string
        label:
          type: string
        hide_label:
          type: string          
        description:
          type: string  
        name:
          type: string  
        type:
          type: string
        required:
          type: string
        options:
          type: array
          items:
            $ref: "#/components/schemas/Option"
    Option:    
      properties:
        label:
          type: string
        value:
          type: string
        imageUrl:
          type: string  
          nullable: true
