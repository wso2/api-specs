openapi: 3.0.0
servers:
  - url: https://unify.apideck.com
info:
  x-ballerina-display:
    label: Apideck Accounting
    iconPath: "icon.png"
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: >
    This is a generated connector from [Apideck Accounting API v5.3.0](https://docs.apideck.com/apis/accounting/reference) OpenAPI specification.
    
    You can use this API to access all Accounting API endpoints.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials.

    Unify API accounts have sandbox mode and live mode API keys. To change modes just use the appropriate key to get a live or test object. 

    You can find your API keys on the unify settings of your Apideck app.Your Apideck application_id can also be found on the same page.

    Obtain API keys following [this guide](https://developers.apideck.com/apis/accounting/reference#section/Authorization).
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Accounting API
  version: 5.3.0
  x-apideck-api: accounting
  x-apideck-sdk-support: true
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/accounting.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: accounting
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
tags:
  - description: ""
    name: Tax Rates
    x-apideck-model:
      $ref: "#/components/schemas/TaxRate"
  - description: ""
    name: Invoices
    x-apideck-model:
      $ref: "#/components/schemas/Invoice"
  - description: ""
    name: Companies
    x-apideck-model:
      $ref: "#/components/schemas/Company"
  - description: ""
    name: Contacts
    x-apideck-model:
      $ref: "#/components/schemas/Contact"
  - description: ""
    name: Ledger Accounts
    x-apideck-model:
      $ref: "#/components/schemas/LedgerAccount"
paths:
  /accounting/companies:
    get:
      description: List Companies
      operationId: companiesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetCompaniesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: List Companies
      tags:
        - Companies
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.companiesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: companies
    post:
      description: Create Company
      operationId: companiesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        description: A record of type `Company` which contains details to create company. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Create Company
      tags:
        - Companies
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              company: {
                name: 'SpaceX',
                owner_id: '12345',
                image: 'https://www.spacex.com/static/images/share.jpg',
                description:
                  'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.',
                vat_number: 'BE0689615164',
                currency: 'USD',
                status: 'Open',
                fax: '+12129876543',
                annual_revenue: '+$35m',
                number_of_employees: '500-1000',
                industry: 'Apparel',
                ownership: 'Public',
                sales_tax_number: '12456EN',
                payee_number: '78932EN',
                abn_or_tfn: '46 115 614 695',
                abn_branch: '123',
                acn: 'XXX XXX XXX',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    bank_code: 'BNH',
                    account_number: '123456789',
                    account_name: 'SPACEX LLC'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New'],
                read_only: false
              }
            }

            try {
              const { data } = await apideck.accounting.companiesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/accounting/companies/{id}":
    delete:
      description: Delete Company
      operationId: companiesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Delete Company
      tags:
        - Companies
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.companiesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Company
      operationId: companiesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Get Company
      tags:
        - Companies
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.companiesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Company
      operationId: companiesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: A record of type `Company` which contains details to update company. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Update Company
      tags:
        - Companies
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              company: {
                name: 'SpaceX',
                owner_id: '12345',
                image: 'https://www.spacex.com/static/images/share.jpg',
                description:
                  'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.',
                vat_number: 'BE0689615164',
                currency: 'USD',
                status: 'Open',
                fax: '+12129876543',
                annual_revenue: '+$35m',
                number_of_employees: '500-1000',
                industry: 'Apparel',
                ownership: 'Public',
                sales_tax_number: '12456EN',
                payee_number: '78932EN',
                abn_or_tfn: '46 115 614 695',
                abn_branch: '123',
                acn: 'XXX XXX XXX',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    bank_code: 'BNH',
                    account_number: '123456789',
                    account_name: 'SPACEX LLC'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New'],
                read_only: false
              }
            }

            try {
              const { data } = await apideck.accounting.companiesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/contacts:
    get:
      description: List Contacts
      operationId: contactsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetContactsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: List Contacts
      tags:
        - Contacts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.contactsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: contacts
    post:
      description: Create Contact
      operationId: contactsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        description: A record of type `Contact` which contains details to create contact. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Create Contact
      tags:
        - Contacts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              contact: {
                name: 'Elon Musk',
                owner_id: '54321',
                type: 'personal',
                company_id: '23456',
                company_name: '23456',
                lead_id: '34567',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                prefix: 'Mr.',
                suffix: 'PhD',
                title: 'CEO',
                department: 'Engineering',
                language: 'EN',
                gender: 'female',
                birthday: '2000-08-12',
                image: 'https://unavatar.io/elon-musk',
                lead_source: 'Cold Call',
                fax: '+12129876543',
                description: 'Internal champion',
                current_balance: 10.5,
                status: 'open',
                active: true,
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.accounting.contactsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/accounting/contacts/{id}":
    delete:
      description: Delete Contact
      operationId: contactsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Delete Contact
      tags:
        - Contacts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.contactsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Contact
      operationId: contactsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Get Contact
      tags:
        - Contacts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.contactsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Contact
      operationId: contactsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: A record of type `Contact` which contains details to update contact. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Update Contact
      tags:
        - Contacts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              contact: {
                name: 'Elon Musk',
                owner_id: '54321',
                type: 'personal',
                company_id: '23456',
                company_name: '23456',
                lead_id: '34567',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                prefix: 'Mr.',
                suffix: 'PhD',
                title: 'CEO',
                department: 'Engineering',
                language: 'EN',
                gender: 'female',
                birthday: '2000-08-12',
                image: 'https://unavatar.io/elon-musk',
                lead_source: 'Cold Call',
                fax: '+12129876543',
                description: 'Internal champion',
                current_balance: 10.5,
                status: 'open',
                active: true,
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.accounting.contactsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/invoices:
    get:
      description: List Invoices
      operationId: invoicesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetInvoicesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: List Invoices
      tags:
        - Invoices
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: invoices
    post:
      description: Create Invoice
      operationId: invoicesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        description: A record of type `Invoice` which contains details to create invoice. 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invoice"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateInvoiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Create Invoice
      tags:
        - Invoices
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              invoice: {
                type: 'Service',
                number: 'OIT00546',
                customer: {
                  company_name: 'The boring company'
                },
                date: '2020-09-30',
                due_date: '2020-10-30',
                po_number: '90000117',
                status: 'paid',
                currency: 'USD',
                sub_total: 27500,
                total_tax: 1000,
                total: 28500,
                balance: 26500,
                deposit: 2000,
                customer_memo: 'Thank you for your business and have a great day!',
                line_items: [
                  {
                    line_number: 1,
                    description: 'Rock Fountain',
                    type: 'Transaction',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 2,
                    unit_price: 27500,
                    discount_percentage: 15,
                    item_id: 12344,
                    tax_rate: {
                      name: '15% GST on Expenses',
                      code: 'ABN'
                    },
                    general_ledger_account: {
                      name: 'Bank account'
                    }
                  }
                ],
                billing_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638'
                },
                shipping_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638'
                }
              }
            }

            try {
              const { data } = await apideck.accounting.invoicesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/accounting/invoices/{id}":
    delete:
      description: Delete Invoice
      operationId: invoicesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteInvoiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Delete Invoice
      tags:
        - Invoices
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Invoice
      operationId: invoicesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetInvoiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Get Invoice
      tags:
        - Invoices
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Invoice
      operationId: invoicesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: A record of type `Invoice` which contains details to update invoice.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invoice"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateInvoiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Update Invoice
      tags:
        - Invoices
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              invoice: {
                type: 'Service',
                number: 'OIT00546',
                customer: {
                  company_name: 'The boring company'
                },
                date: '2020-09-30',
                due_date: '2020-10-30',
                po_number: '90000117',
                status: 'paid',
                currency: 'USD',
                sub_total: 27500,
                total_tax: 1000,
                total: 28500,
                balance: 26500,
                deposit: 2000,
                customer_memo: 'Thank you for your business and have a great day!',
                line_items: [
                  {
                    line_number: 1,
                    description: 'Rock Fountain',
                    type: 'Transaction',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 2,
                    unit_price: 27500,
                    discount_percentage: 15,
                    item_id: 12344,
                    tax_rate: {
                      name: '15% GST on Expenses',
                      code: 'ABN'
                    },
                    general_ledger_account: {
                      name: 'Bank account'
                    }
                  }
                ],
                billing_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638'
                },
                shipping_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638'
                }
              }
            }

            try {
              const { data } = await apideck.accounting.invoicesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/ledger-accounts:
    get:
      description: List Ledger Accounts
      operationId: ledgerAccountsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetLedgerAccountsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: List Ledger Accounts
      tags:
        - Ledger Accounts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: ledgerAccounts
    post:
      description: Create Ledger Account
      operationId: ledgerAccountsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        description: A record of type `LedgerAccount` which contains details to create ledger account.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LedgerAccount"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateLedgerAccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Create Ledger Account
      tags:
        - Ledger Accounts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ledgerAccount: {
                nominal_code: '091',
                classification: 'asset',
                type: 'bank',
                sub_type: 'CHECKING_ACCOUNT',
                name: 'Bank account',
                fully_qualified_name: 'Asset.Bank.Checking_Account',
                description: 'The main checking account',
                opening_balance: 75000,
                current_balance: 20000,
                currency: 'USD',
                tax_type: 'USD',
                tax_code: 'N-T',
                level: '2',
                active: true,
                bank_account: {
                  iban: 'CH2989144532982975332',
                  bic: 'AUDSCHGGXXX',
                  bsb_number: '062-001',
                  bank_code: 'BNH',
                  account_number: '123456789',
                  account_name: 'SPACEX LLC'
                },
                sub_account: true
              }
            }

            try {
              const { data } = await apideck.accounting.ledgerAccountsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/accounting/ledger-accounts/{id}":
    delete:
      description: Delete Ledger Account
      operationId: ledgerAccountsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteLedgerAccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Delete Ledger Account
      tags:
        - Ledger Accounts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Ledger Account
      operationId: ledgerAccountsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetLedgerAccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Get Ledger Account
      tags:
        - Ledger Accounts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Ledger Account
      operationId: ledgerAccountsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: A record of type `LedgerAccount` which contains details to update ledger account.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LedgerAccount"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateLedgerAccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Update Ledger Account
      tags:
        - Ledger Accounts
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              ledgerAccount: {
                nominal_code: '091',
                classification: 'asset',
                type: 'bank',
                sub_type: 'CHECKING_ACCOUNT',
                name: 'Bank account',
                fully_qualified_name: 'Asset.Bank.Checking_Account',
                description: 'The main checking account',
                opening_balance: 75000,
                current_balance: 20000,
                currency: 'USD',
                tax_type: 'USD',
                tax_code: 'N-T',
                level: '2',
                active: true,
                bank_account: {
                  iban: 'CH2989144532982975332',
                  bic: 'AUDSCHGGXXX',
                  bsb_number: '062-001',
                  bank_code: 'BNH',
                  account_number: '123456789',
                  account_name: 'SPACEX LLC'
                },
                sub_account: true
              }
            }

            try {
              const { data } = await apideck.accounting.ledgerAccountsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/tax-rates:
    get:
      description: List Tax Rates
      operationId: taxRatesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetTaxRatesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: List Tax Rates
      tags:
        - Tax Rates
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: taxRates
    post:
      description: Create Tax Rate
      operationId: taxRatesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        description: A record of type `TaxRate` which contains details to create tax rate.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaxRate"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateTaxRateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Create Tax Rate
      tags:
        - Tax Rates
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              taxRate: {
                name: '15% GST on Expenses',
                code: 'ABN',
                description: 'No ABN Withholding',
                effective_tax_rate: 10,
                total_tax_rate: 10,
                components: [
                  {
                    name: 'City tax',
                    rate: 10,
                    compound: true
                  }
                ],
                special_tax_type: 'NONE',
                original_tax_rate_id: '12345',
                active: true
              }
            }

            try {
              const { data } = await apideck.accounting.taxRatesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/accounting/tax-rates/{id}":
    delete:
      description: Delete Tax Rate
      operationId: taxRatesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteTaxRateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Delete Tax Rate
      tags:
        - Tax Rates
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Tax Rate
      operationId: taxRatesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetTaxRateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Get Tax Rate
      tags:
        - Tax Rates
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update Tax Rate
      operationId: taxRatesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: A record of type `TaxRate` which contains details to update tax rate.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaxRate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateTaxRateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/PaymentRequired"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/Unprocessable"
        default:
          $ref: "#/components/responses/UnexpectedError"
      security:
        - apiKey: []
      summary: Update Tax Rate
      tags:
        - Tax Rates
      x-apideck-api: accounting
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              taxRate: {
                name: '15% GST on Expenses',
                code: 'ABN',
                description: 'No ABN Withholding',
                effective_tax_rate: 10,
                total_tax_rate: 10,
                components: [
                  {
                    name: 'City tax',
                    rate: 10,
                    compound: true
                  }
                ],
                special_tax_type: 'NONE',
                original_tax_rate_id: '12345',
                active: true
              }
            }

            try {
              const { data } = await apideck.accounting.taxRatesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
components:
  parameters:
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    consumerId:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    cursor:
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      in: query
      name: cursor
      schema:
        nullable: true
        type: string
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    limit:
      description: Number of records to return
      in: query
      name: limit
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: true
        type: boolean
    serviceId:
      description: Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.
      in: header
      name: x-apideck-service-id
      schema:
        type: string
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            properties:
              detail:
                anyOf:
                  - example: Missing property foobar
                    type: string
                  - example:
                      missing:
                        - foobar: required
                    type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Bad Request
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Invalid Params
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#requestbodyvalidationerror
                type: string
              status_code:
                description: HTTP status code
                example: 400
                type: number
              type_name:
                description: The type of error returned
                example: RequestHeadersValidationError
                type: string
      description: Bad Request
    CreateCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCompanyResponse"
      description: Companies
    CreateContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateContactResponse"
      description: Contacts
    CreateInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateInvoiceResponse"
      description: Invoices
    CreateLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateLedgerAccountResponse"
      description: LedgerAccounts
    CreateTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateTaxRateResponse"
      description: TaxRates
    DeleteCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteCompanyResponse"
      description: Companies
    DeleteContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteContactResponse"
      description: Contacts
    DeleteInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteInvoiceResponse"
      description: Invoices
    DeleteLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteLedgerAccountResponse"
      description: LedgerAccounts
    DeleteTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteTaxRateResponse"
      description: TaxRates
    GetCompaniesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCompaniesResponse"
      description: Company
    GetCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCompanyResponse"
      description: Companies
    GetContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetContactResponse"
      description: Contacts
    GetContactsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetContactsResponse"
      description: Contacts
    GetInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetInvoiceResponse"
      description: Invoices
    GetInvoicesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetInvoicesResponse"
      description: Invoices
    GetLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetLedgerAccountResponse"
      description: LedgerAccounts
    GetLedgerAccountsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetLedgerAccountsResponse"
      description: LedgerAccounts
    GetTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTaxRateResponse"
      description: TaxRates
    GetTaxRatesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTaxRatesResponse"
      description: TaxRates
    Invoice:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invoice"
      description: Invoices
    NotFound:
      content:
        application/json:
          schema:
            properties:
              detail:
                anyOf:
                  - example: "Could not find widget with id: '123'"
                    type: string
                  - example:
                      not_found:
                        entity: widget
                        id: "123"
                    type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Not Found
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Unknown Widget
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#entitynotfounderror
                type: string
              status_code:
                description: HTTP status code
                example: 404
                type: number
              type_name:
                description: The type of error returned
                example: EntityNotFoundError
                type: string
      description: The specified resource was not found
    NotImplemented:
      content:
        application/json:
          schema:
            properties:
              detail:
                anyOf:
                  - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
                    type: string
                  - type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Not Implemented
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Unmapped Attribute
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#mappingerror
                type: string
              status_code:
                description: HTTP status code
                example: 501
                type: number
              type_name:
                description: The type of error returned
                example: MappingError
                type: string
      description: Not Implemented
    PaymentRequired:
      content:
        application/json:
          schema:
            properties:
              detail:
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: You have reached your limit of 2000
                type: string
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Payment Required
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Request Limit Reached
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#requestlimiterror
                type: string
              status_code:
                description: HTTP status code
                example: 402
                type: number
              type_name:
                description: The type of error returned
                example: RequestLimitError
                type: string
      description: Payment Required
    TaxRate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaxRate"
      description: TaxRates
    Unauthorized:
      content:
        application/json:
          schema:
            properties:
              detail:
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: Failed to generate valid JWT Session. Verify applicationId is correct
                type: string
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unauthorized
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Unauthorized Request
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#unauthorizederror
                type: string
              status_code:
                description: HTTP status code
                example: 401
                type: number
              type_name:
                description: The type of error returned
                example: UnauthorizedError
                type: string
      description: Unauthorized
    UnexpectedError:
      content:
        application/json:
          schema:
            properties:
              detail:
                anyOf:
                  - example: "Missing Header: x-apideck-consumer-id"
                    type: string
                  - example:
                      missing:
                        - x-apideck-consumer-id: required
                    type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Bad Request
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Invalid Params
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#unauthorizederror
                type: string
              status_code:
                description: HTTP status code
                example: 400
                type: number
              type_name:
                description: The type of error returned
                example: RequestHeadersValidationError
                type: string
      description: Unexpected error
    Unprocessable:
      content:
        application/json:
          schema:
            properties:
              detail:
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: State did not include unified_api
                type: string
              error:
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unprocessable Entity
                type: string
              message:
                description: A human-readable message providing more details about the error.
                example: Invalid State
                type: string
              ref:
                description: Link to documentation of error type
                example: https://developers.apideck.com/errors#invalidstateerror
                type: string
              status_code:
                description: HTTP status code
                example: 422
                type: number
              type_name:
                description: The type of error returned
                example: InvalidStateError
                type: string
      description: Unprocessable
    UpdateCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateCompanyResponse"
      description: Companies
    UpdateContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateContactResponse"
      description: Contacts
    UpdateInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateInvoiceResponse"
      description: Invoices
    UpdateLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateLedgerAccountResponse"
      description: LedgerAccounts
    UpdateTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateTaxRateResponse"
      description: TaxRates
  schemas:
    Address:
      properties:
        city:
          description: Name of city.
          example: San Francisco
          nullable: true
          type: string
        country:
          description: country code according to ISO 3166-1 alpha-2.
          example: US
          nullable: true
          type: string
        id:
          example: "123"
          nullable: true
          type: string
        latitude:
          example: "40.759211"
          nullable: true
          type: string
        line1:
          description: "Line 1 of the address e.g. number, street, suite, apt #, etc."
          example: Main street
          nullable: true
          type: string
        line2:
          description: Line 2 of the address
          example: "apt #"
          nullable: true
          type: string
        longitude:
          example: "-73.984638"
          nullable: true
          type: string
        name:
          example: HQ US
          nullable: true
          type: string
        postal_code:
          description: Zip code or equivalent.
          example: "94104"
          nullable: true
          type: string
        state:
          description: Name of state
          example: CA
          nullable: true
          type: string
        string:
          example: 25 Spring Street, Blackburn, VIC 3130
          nullable: true
          title: The address string. Some APIs don't provide structured address data.
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
          type: string
          x-graphql-type-name: AddressType
      type: object
    BankAccount:
      properties:
        account_name:
          description: The name which you used in opening your bank account.
          example: SPACEX LLC
          nullable: true
          title: Bank Account Name
          type: string
        account_number:
          description: A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
          example: "123456789"
          nullable: true
          title: Bank Account Number
          type: string
        bank_code:
          description: A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
          example: BNH
          nullable: true
          title: Bank Code
          type: string
        bic:
          example: AUDSCHGGXXX
          nullable: true
          type: string
        bsb_number:
          description: A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
          example: 062-001
          nullable: true
          title: BSB Number
          type: string
        iban:
          example: CH2989144532982975332
          nullable: true
          type: string
      type: object
    Company:
      additionalProperties: false
      properties:
        abn_branch:
          description: An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
          example: "123"
          nullable: true
          title: ABN Branch
          type: string
        abn_or_tfn:
          description: An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
          example: 46 115 614 695
          nullable: true
          title: ABN or TFN
          type: string
        acn:
          description: The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
          example: XXX XXX XXX
          nullable: true
          title: ACN
          type: string
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        annual_revenue:
          description: Annual revenue
          example: +$35m
          nullable: true
          type: string
        bank_accounts:
          items:
            $ref: "#/components/schemas/BankAccount"
          type: array
        created_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        deleted:
          example: false
          readOnly: true
          type: boolean
        description:
          example: Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.
          nullable: true
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://www.spacex.com/static/images/share.jpg
          nullable: true
          type: string
        industry:
          description: Industry
          example: Apparel
          nullable: true
          type: string
        interaction_count:
          example: 1
          nullable: true
          readOnly: true
          type: integer
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          example: SpaceX
          minLength: 1
          type: string
        number_of_employees:
          description: Number of employees
          example: 500-1000
          nullable: true
          type: string
        owner_id:
          example: "12345"
          type: string
        ownership:
          description: Ownership
          example: Public
          nullable: true
          type: string
        parent_id:
          description: Parent ID
          example: "22345"
          readOnly: true
          type: string
        payee_number:
          example: 78932EN
          nullable: true
          title: Payee number
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        read_only:
          example: false
          nullable: true
          title: Read-only
          type: boolean
        sales_tax_number:
          example: 12456EN
          nullable: true
          title: Sales tax number
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: Open
          minLength: 1
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        vat_number:
          description: VAT number
          example: BE0689615164
          nullable: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
      type: object
    Contact:
      additionalProperties: false
      properties:
        active:
          example: true
          nullable: true
          type: boolean
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        birthday:
          example: 2000-08-12
          nullable: true
          type: string
        company_id:
          example: "23456"
          nullable: true
          type: string
        company_name:
          example: "23456"
          nullable: true
          type: string
        created_at:
          example: 2017-08-12T20:43:21.291Z
          format: date-time
          readOnly: true
          type: string
        current_balance:
          example: 10.5
          nullable: true
          title: Current Balance
          type: number
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        department:
          example: Engineering
          nullable: true
          type: string
        description:
          example: Internal champion
          nullable: true
          title: Description
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        first_call_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        first_email_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        gender:
          enum:
            - male
            - female
            - unisex
          example: female
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://unavatar.io/elon-musk
          nullable: true
          type: string
        language:
          description: language code according to ISO 639-1. For the United States - EN
          example: EN
          nullable: true
          type: string
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        lead_id:
          example: "34567"
          nullable: true
          type: string
        lead_source:
          example: Cold Call
          minLength: 1
          nullable: true
          type: string
        middle_name:
          example: D.
          nullable: true
          type: string
        name:
          example: Elon Musk
          minLength: 1
          type: string
        owner_id:
          example: "54321"
          nullable: true
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        prefix:
          example: Mr.
          nullable: true
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: open
          nullable: true
          type: string
        suffix:
          example: PhD
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: CEO
          nullable: true
          type: string
        type:
          enum:
            - customer
            - supplier
            - employee
            - personal
          example: personal
          nullable: true
          type: string
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          format: date-time
          readOnly: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
      x-pii:
        - name
        - first_name
        - middle_name
        - last_name
        - email
    CreateCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Contacts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateInvoiceResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Invoices
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateLedgerAccountResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: LedgerAccounts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateTaxRateResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TaxRates
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreatedAt:
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      readOnly: true
      type: string
    CreatedBy:
      example: "12345"
      nullable: true
      readOnly: true
      type: string
    Currency:
      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
      example: USD
      nullable: true
      title: Currency
      type: string
      x-enum-elements:
        - description: Unknown currency
          name: UNKNOWN_CURRENCY
        - description: United Arab Emirates dirham
          name: AED
        - description: Afghan afghani
          name: AFN
        - description: Albanian lek
          name: ALL
        - description: Armenian dram
          name: AMD
        - description: Netherlands Antillean guilder
          name: ANG
        - description: Angolan kwanza
          name: AOA
        - description: Argentine peso
          name: ARS
        - description: Australian dollar
          name: AUD
        - description: Aruban florin
          name: AWG
        - description: Azerbaijani manat
          name: AZN
        - description: Bosnia and Herzegovina convertible mark
          name: BAM
        - description: Barbados dollar
          name: BBD
        - description: Bangladeshi taka
          name: BDT
        - description: Bulgarian lev
          name: BGN
        - description: Bahraini dinar
          name: BHD
        - description: Burundian franc
          name: BIF
        - description: Bermudian dollar
          name: BMD
        - description: Brunei dollar
          name: BND
        - description: Boliviano
          name: BOB
        - description: Bolivian Mvdol
          name: BOV
        - description: Brazilian real
          name: BRL
        - description: Bahamian dollar
          name: BSD
        - description: Bhutanese ngultrum
          name: BTN
        - description: Botswana pula
          name: BWP
        - description: Belarusian ruble
          name: BYR
        - description: Belize dollar
          name: BZD
        - description: Canadian dollar
          name: CAD
        - description: Congolese franc
          name: CDF
        - description: WIR Euro
          name: CHE
        - description: Swiss franc
          name: CHF
        - description: WIR Franc
          name: CHW
        - description: Unidad de Fomento
          name: CLF
        - description: Chilean peso
          name: CLP
        - description: Chinese yuan
          name: CNY
        - description: Colombian peso
          name: COP
        - description: Unidad de Valor Real
          name: COU
        - description: Costa Rican colon
          name: CRC
        - description: Cuban convertible peso
          name: CUC
        - description: Cuban peso
          name: CUP
        - description: Cape Verdean escudo
          name: CVE
        - description: Czech koruna
          name: CZK
        - description: Djiboutian franc
          name: DJF
        - description: Danish krone
          name: DKK
        - description: Dominican peso
          name: DOP
        - description: Algerian dinar
          name: DZD
        - description: Egyptian pound
          name: EGP
        - description: Eritrean nakfa
          name: ERN
        - description: Ethiopian birr
          name: ETB
        - description: Euro
          name: EUR
        - description: Fiji dollar
          name: FJD
        - description: Falkland Islands pound
          name: FKP
        - description: Pound sterling
          name: GBP
        - description: Georgian lari
          name: GEL
        - description: Ghanaian cedi
          name: GHS
        - description: Gibraltar pound
          name: GIP
        - description: Gambian dalasi
          name: GMD
        - description: Guinean franc
          name: GNF
        - description: Guatemalan quetzal
          name: GTQ
        - description: Guyanese dollar
          name: GYD
        - description: Hong Kong dollar
          name: HKD
        - description: Honduran lempira
          name: HNL
        - description: Croatian kuna
          name: HRK
        - description: Haitian gourde
          name: HTG
        - description: Hungarian forint
          name: HUF
        - description: Indonesian rupiah
          name: IDR
        - description: Israeli new shekel
          name: ILS
        - description: Indian rupee
          name: INR
        - description: Iraqi dinar
          name: IQD
        - description: Iranian rial
          name: IRR
        - description: Icelandic króna
          name: ISK
        - description: Jamaican dollar
          name: JMD
        - description: Jordanian dinar
          name: JOD
        - description: Japanese yen
          name: JPY
        - description: Kenyan shilling
          name: KES
        - description: Kyrgyzstani som
          name: KGS
        - description: Cambodian riel
          name: KHR
        - description: Comoro franc
          name: KMF
        - description: North Korean won
          name: KPW
        - description: South Korean won
          name: KRW
        - description: Kuwaiti dinar
          name: KWD
        - description: Cayman Islands dollar
          name: KYD
        - description: Kazakhstani tenge
          name: KZT
        - description: Lao kip
          name: LAK
        - description: Lebanese pound
          name: LBP
        - description: Sri Lankan rupee
          name: LKR
        - description: Liberian dollar
          name: LRD
        - description: Lesotho loti
          name: LSL
        - description: Lithuanian litas
          name: LTL
        - description: Latvian lats
          name: LVL
        - description: Libyan dinar
          name: LYD
        - description: Moroccan dirham
          name: MAD
        - description: Moldovan leu
          name: MDL
        - description: Malagasy ariary
          name: MGA
        - description: Macedonian denar
          name: MKD
        - description: Myanmar kyat
          name: MMK
        - description: Mongolian tögrög
          name: MNT
        - description: Macanese pataca
          name: MOP
        - description: Mauritanian ouguiya
          name: MRO
        - description: Mauritian rupee
          name: MUR
        - description: Maldivian rufiyaa
          name: MVR
        - description: Malawian kwacha
          name: MWK
        - description: Mexican peso
          name: MXN
        - description: Mexican Unidad de Inversion
          name: MXV
        - description: Malaysian ringgit
          name: MYR
        - description: Mozambican metical
          name: MZN
        - description: Namibian dollar
          name: NAD
        - description: Nigerian naira
          name: NGN
        - description: Nicaraguan córdoba
          name: NIO
        - description: Norwegian krone
          name: NOK
        - description: Nepalese rupee
          name: NPR
        - description: New Zealand dollar
          name: NZD
        - description: Omani rial
          name: OMR
        - description: Panamanian balboa
          name: PAB
        - description: Peruvian sol
          name: PEN
        - description: Papua New Guinean kina
          name: PGK
        - description: Philippine peso
          name: PHP
        - description: Pakistani rupee
          name: PKR
        - description: Polish złoty
          name: PLN
        - description: Paraguayan guaraní
          name: PYG
        - description: Qatari riyal
          name: QAR
        - description: Romanian leu
          name: RON
        - description: Serbian dinar
          name: RSD
        - description: Russian ruble
          name: RUB
        - description: Rwandan franc
          name: RWF
        - description: Saudi riyal
          name: SAR
        - description: Solomon Islands dollar
          name: SBD
        - description: Seychelles rupee
          name: SCR
        - description: Sudanese pound
          name: SDG
        - description: Swedish krona
          name: SEK
        - description: Singapore dollar
          name: SGD
        - description: Saint Helena pound
          name: SHP
        - description: Sierra Leonean leone
          name: SLL
        - description: Somali shilling
          name: SOS
        - description: Surinamese dollar
          name: SRD
        - description: South Sudanese pound
          name: SSP
        - description: São Tomé and Príncipe dobra
          name: STD
        - description: Salvadoran colón
          name: SVC
        - description: Syrian pound
          name: SYP
        - description: Swazi lilangeni
          name: SZL
        - description: Thai baht
          name: THB
        - description: Tajikstani somoni
          name: TJS
        - description: Turkmenistan manat
          name: TMT
        - description: Tunisian dinar
          name: TND
        - description: Tongan pa'anga
          name: TOP
        - description: Turkish lira
          name: TRY
        - description: Trinidad and Tobago dollar
          name: TTD
        - description: New Taiwan dollar
          name: TWD
        - description: Tanzanian shilling
          name: TZS
        - description: Ukrainian hryvnia
          name: UAH
        - description: Ugandan shilling
          name: UGX
        - description: United States dollar
          name: USD
        - description: United States dollar (next day)
          name: USN
        - description: United States dollar (same day)
          name: USS
        - description: Uruguay Peso en Unidedades Indexadas
          name: UYI
        - description: Uruguyan peso
          name: UYU
        - description: Uzbekistan som
          name: UZS
        - description: Venezuelan bolívar soberano
          name: VEF
        - description: Vietnamese đồng
          name: VND
        - description: Vanuatu vatu
          name: VUV
        - description: Samoan tala
          name: WST
        - description: CFA franc BEAC
          name: XAF
        - description: Silver
          name: XAG
        - description: Gold
          name: XAU
        - description: European Composite Unit
          name: XBA
        - description: European Monetary Unit
          name: XBB
        - description: European Unit of Account 9
          name: XBC
        - description: European Unit of Account 17
          name: XBD
        - description: East Caribbean dollar
          name: XCD
        - description: Special drawing rights (International Monetary Fund)
          name: XDR
        - description: CFA franc BCEAO
          name: XOF
        - description: Palladium
          name: XPD
        - description: CFP franc
          name: XPF
        - description: Platinum
          name: XPT
        - description: Code reserved for testing
          name: XTS
        - description: No currency
          name: XXX
        - description: Yemeni rial
          name: YER
        - description: South African rand
          name: ZAR
        - description: Zambian kwacha
          name: ZMK
        - description: Zambian kwacha
          name: ZMW
        - description: Bitcoin
          name: BTC
    CustomField:
      additionalProperties: false
      properties:
        id:
          example: custom_technologies
          type: string
        value:
          anyOf:
            - example: Uses Salesforce and Marketo
              nullable: true
              type: string
            - example: 10
              nullable: true
              type: number
            - example: true
              nullable: true
              type: boolean
            - items:
                type: string
              type: array
      required:
        - id
      type: object
    DeleteCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Contacts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteInvoiceResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Invoices
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteLedgerAccountResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: LedgerAccounts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteTaxRateResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TaxRates
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    Email:
      properties:
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        id:
          example: "123"
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
          type: string
          x-graphql-type-name: EmailType
      required:
        - email
      type: object
    GetCompaniesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Company"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: CompanyList
    GetCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/Company"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: Company
    GetContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/Contact"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Contacts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: Contact
    GetContactsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Contact"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Contacts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: ContactList
    GetInvoiceResponse:
      properties:
        data:
          $ref: "#/components/schemas/Invoice"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Invoices
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: Invoice
    GetInvoicesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Invoice"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Invoices
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: InvoiceList
    GetLedgerAccountResponse:
      properties:
        data:
          $ref: "#/components/schemas/LedgerAccount"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: LedgerAccounts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: LedgerAccount
    GetLedgerAccountsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/LedgerAccount"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: LedgerAccounts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: LedgerAccountList
    GetTaxRateResponse:
      properties:
        data:
          $ref: "#/components/schemas/TaxRate"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TaxRates
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: TaxRate
    GetTaxRatesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/TaxRate"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TaxRates
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: TaxRateList
    Id:
      example: "12345"
      description: The unique Id.
      readOnly: true
      type: string
    Invoice:
      additionalProperties: false
      properties:
        balance:
          example: 26500
          nullable: true
          title: Balance
          type: number
        billing_address:
          $ref: "#/components/schemas/Address"
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        currency:
          $ref: "#/components/schemas/Currency"
        customer:
          description: The customer this invoice is linked to.
          nullable: true
          properties:
            company_name:
              description: The company name.
              example: The boring company
              minLength: 1
              nullable: true
              type: string
            id:
              $ref: "#/components/schemas/Id"
          title: Customer
          type: object
        customer_memo:
          example: Thank you for your business and have a great day!
          nullable: true
          title: Customer memo
          type: string
        date:
          description: Date invoice was issued - YYYY-MM-DD
          example: 2020-09-30
          format: date
          title: Invoice date
          type: string
        deposit:
          example: 2000
          nullable: true
          title: Deposit
          type: number
        due_date:
          description: The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD
          example: 2020-10-30
          format: date
          title: Due date
          type: string
        id:
          $ref: "#/components/schemas/Id"
        line_items:
          items:
            additionalProperties: false
            properties:
              description:
                example: Rock Fountain
                nullable: true
                title: Description
                type: string
              discount_percentage:
                example: 15
                nullable: true
                title: Amount
                type: integer
              general_ledger_account:
                properties:
                  id:
                    $ref: "#/components/schemas/Id"
                  name:
                    example: Bank account
                    minLength: 1
                    nullable: true
                    title: Account Name
                    type: string
              id:
                $ref: "#/components/schemas/Id"
              item_id:
                description: ID of the linked item
                example: 12344
                nullable: true
                title: Item ID
                type: integer
              line_number:
                example: 1
                nullable: true
                title: Line number
                type: integer
              quantity:
                example: 2
                nullable: true
                title: Quantity
                type: integer
              tax_amount:
                example: 27500
                nullable: true
                title: Tax amount
                type: integer
              tax_rate:
                properties:
                  code:
                    example: ABN
                    minLength: 1
                    nullable: true
                    title: Tax code
                    type: string
                  id:
                    $ref: "#/components/schemas/Id"
                  name:
                    example: 15% GST on Expenses
                    minLength: 1
                    nullable: true
                    type: string
              total_amount:
                example: 27500
                nullable: true
                title: Total amount
                type: integer
              type:
                example: Transaction
                nullable: true
                title: Type
                type: string
              unit_price:
                example: 27500
                nullable: true
                title: Unit price
                type: integer
            type: object
          type: array
        number:
          example: OIT00546
          nullable: true
          title: Invoice number
          type: string
        po_number:
          description: A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
          example: "90000117"
          nullable: true
          title: Purchase Order number
          type: string
        shipping_address:
          $ref: "#/components/schemas/Address"
        status:
          description: Invoice status
          enum:
            - draft
            - submitted
            - partially_paid
            - paid
            - void
          example: paid
          nullable: true
          title: Status
          type: string
        sub_total:
          example: 27500
          nullable: true
          title: Sub-total amount
          type: number
        total:
          example: 28500
          nullable: true
          title: Total amount
          type: number
        total_tax:
          example: 1000
          nullable: true
          title: Total tax amount
          type: number
        type:
          description: ""
          example: Service
          nullable: true
          title: Invoice type
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
    Lead:
      additionalProperties: false
      properties:
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        company_id:
          example: "2"
          nullable: true
          type: string
        company_name:
          example: Spacex
          nullable: true
          type: string
        contact_id:
          example: "2"
          nullable: true
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        description:
          example: A thinker
          nullable: true
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        language:
          description: language code according to ISO 639-1. For the United States - EN
          example: EN
          nullable: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        lead_source:
          example: Cold Call
          nullable: true
          type: string
        monetary_amount:
          example: 75000
          nullable: true
          type: number
        name:
          example: Elon Musk
          minLength: 1
          type: string
        owner_id:
          example: "54321"
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        prefix:
          example: Sir
          nullable: true
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: New
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: CEO
          nullable: true
          type: string
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
        - company_name
      x-pii:
        - name
        - email
        - first_name
        - last_name
    LedgerAccount:
      additionalProperties: false
      properties:
        active:
          example: true
          nullable: true
          type: boolean
        bank_account:
          $ref: "#/components/schemas/BankAccount"
        classification:
          enum:
            - asset
            - equity
            - expense
            - liability
            - revenue
            - income
            - other_income
            - other_expense
            - costs_of_sales
          example: asset
          nullable: true
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        currency:
          $ref: "#/components/schemas/Currency"
        current_balance:
          description: The current balance. A positive integer representing the smallest currency unit (e.g., 20000 cents equals $200.00 or 20000 equals ¥20000, a zero-decimal currency)
          example: 20000
          nullable: true
          type: number
        description:
          example: The main checking account
          minLength: 1
          nullable: true
          type: string
        display_id:
          example: 1-12345
          readOnly: true
          type: string
        fully_qualified_name:
          example: Asset.Bank.Checking_Account
          nullable: true
          type: string
        id:
          $ref: "#/components/schemas/Id"
        last_reconciliation_date:
          description: Reconciliation Date means the last calendar day of each Reconciliation Period.
          example: 2020-09-30
          format: date
          readOnly: true
          title: Last Reconciliation Date
          type: string
        level:
          example: "2"
          nullable: true
          type: string
        name:
          example: Bank account
          nullable: true
          type: string
        nominal_code:
          example: 91
          nullable: true
          type: string
        opening_balance:
          description: The opening balance. A positive integer representing the smallest currency unit (e.g., 100 cents equals $1.00 or 100 equals ¥100, a zero-decimal currency)
          example: 75000
          nullable: true
          type: number
        parent_account:
          properties:
            display_id:
              example: 1-1100
              title: Display ID
              type: string
            id:
              example: "12345"
              type: string
            name:
              example: Bank Accounts
              title: Name
              type: string
          readOnly: true
          type: object
        sub_account:
          example: true
          nullable: true
          type: boolean
        sub_accounts:
          items:
            properties:
              account_sub_name:
                example: Petty Cash
                readOnly: true
                title: Account Sub Name
                type: string
              id:
                example: "12345"
                readOnly: true
                type: string
          readOnly: true
          type: array
        sub_type:
          example: CHECKING_ACCOUNT
          nullable: true
          type: string
        tax_code:
          example: N-T
          nullable: true
          type: string
        tax_type:
          example: USD
          nullable: true
          type: string
        type:
          enum:
            - accounts_receivable
            - bank
            - current_asset
            - non_current_asset
            - other_asset
            - equity
            - expense
            - other_expense
            - costs_of_sales
            - accounts_payable
            - credit_card
            - current_liability
            - non_current_liability
            - other_liability
          example: bank
          nullable: true
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
    Links:
      description: Links to navigate to previous or next pages through the API
      properties:
        current:
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
          type: string
        next:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
          type: string
        previous:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
          type: string
      type: object
    Meta:
      description: Reponse metadata
      properties:
        cursors:
          description: Cursors to navigate to previous or next pages through the API
          properties:
            current:
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
              type: string
            next:
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
              type: string
            previous:
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
              type: string
          type: object
        items_on_page:
          description: Number of items returned in the data property of the response
          example: 50
          type: integer
      type: object
    Opportunity:
      additionalProperties: false
      properties:
        close_date:
          example: 2020-10-30
          format: date
          nullable: true
          type: string
        company_id:
          example: "12345"
          nullable: true
          type: string
        company_name:
          example: Copper
          nullable: true
          type: string
        contact_id:
          example: "12345"
          nullable: true
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        date_last_contacted:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        date_lead_created:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        date_stage_changed:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        deleted:
          example: false
          readOnly: true
          type: boolean
        description:
          example: Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines.
          minLength: 1
          nullable: true
          type: string
        expected_revenue:
          description: Expected Revenue
          example: 75000
          nullable: true
          readOnly: true
          type: number
        id:
          example: "12345"
          readOnly: true
          type: string
        interaction_count:
          example: 0
          nullable: true
          readOnly: true
          type: number
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          nullable: true
          readOnly: true
          type: string
        lead_id:
          example: "12345"
          nullable: true
          type: string
        lead_source:
          description: Lead source
          example: Website
          nullable: true
          type: string
        loss_reason:
          example: No budget
          nullable: true
          type: string
        loss_reason_id:
          example: "12345"
          nullable: true
          type: string
        monetary_amount:
          example: 75000
          nullable: true
          type: number
        owner_id:
          example: "12345"
          nullable: true
          type: string
        pipeline_id:
          example: "12345"
          nullable: true
          type: string
        pipeline_stage_id:
          example: "12345"
          nullable: true
          type: string
        primary_contact_id:
          example: "12345"
          nullable: true
          type: string
        priority:
          example: None
          minLength: 1
          nullable: true
          type: string
        source_id:
          example: "12345"
          nullable: true
          type: string
        stage_last_changed_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          type: string
        status:
          example: Open
          minLength: 1
          nullable: true
          type: string
        status_id:
          example: "12345"
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: New Rocket
          minLength: 1
          type: string
        type:
          example: Existing Customer - Upgrade
          minLength: 1
          nullable: true
          type: string
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        win_probability:
          example: 40
          nullable: true
          type: number
        won_reason:
          example: Best pitch
          nullable: true
          type: string
        won_reason_id:
          example: "12345"
          nullable: true
          type: string
      required:
        - title
        - primary_contact_id
      type: object
    PhoneNumber:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        number:
          example: 111-111-1111
          minLength: 1
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - mobile
            - assistant
            - fax
            - other
          example: primary
          type: string
          x-graphql-type-name: PhoneType
      required:
        - number
      type: object
    Pipeline:
      additionalProperties: false
      properties:
        archived:
          example: false
          type: boolean
        created_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        currency:
          example: USD
          type: string
        display_order:
          example: 1
          type: integer
        id:
          example: default
          type: string
        name:
          example: Sales Pipeline
          minLength: 1
          type: string
        stages:
          items:
            properties:
              display_order:
                example: 1
                type: integer
              id:
                example: contractsent
                readOnly: true
                type: string
              name:
                example: Contract Sent
                type: string
              value:
                example: CONTRACT_SENT
                type: string
            type: object
          type: array
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
      required:
        - name
      x-pii: []
    SocialLink:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          example: twitter
          nullable: true
          type: string
        url:
          example: https://www.twitter.com/apideck-io
          minLength: 1
          type: string
      required:
        - url
      type: object
    Tags:
      example:
        - New
      items:
        type: string
      type: array
    TaxRate:
      additionalProperties: false
      properties:
        active:
          example: true
          nullable: true
          title: Active
          type: boolean
        code:
          example: ABN
          minLength: 1
          nullable: true
          title: Tax code
          type: string
        components:
          items:
            properties:
              compound:
                example: true
                nullable: true
                title: Compound
                type: boolean
              name:
                example: City tax
                minLength: 1
                type: string
              rate:
                example: 10
                nullable: true
                title: Tax rate
                type: number
          nullable: true
          title: Tax components
          type: array
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        description:
          example: No ABN Withholding
          nullable: true
          title: Description
          type: string
        effective_tax_rate:
          example: 10
          nullable: true
          title: Effective tax rate
          type: number
        id:
          $ref: "#/components/schemas/Id"
        name:
          example: 15% GST on Expenses
          minLength: 1
          type: string
        original_tax_rate_id:
          description: ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
          example: "12345"
          nullable: true
          title: Original tax rate ID
          type: string
        special_tax_type:
          description: Special tax type to handle zero rate taxes. Used with VAT registered Businesses who receive goods/services (acquisitions) from other EU countries, will need to calculate the VAT due, but not paid, on these acquisitions. The rate of VAT payable is the same that would have been paid if the goods had been supplied by a UK supplier.
          example: NONE
          nullable: true
          title: Description
          type: string
        total_tax_rate:
          description: Not compounded sum of the components of a tax rate
          example: 10
          nullable: true
          title: Total tax rate
          type: number
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
    UnifiedId:
      properties:
        id:
          example: "12345"
          readOnly: true
          type: string
      required:
        - id
      title: UnifiedId
    UpdateCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Contacts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateInvoiceResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Invoices
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateLedgerAccountResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: LedgerAccounts
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateTaxRateResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: TaxRates
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdatedAt:
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      readOnly: true
      type: string
    UpdatedBy:
      example: "12345"
      nullable: true
      readOnly: true
      type: string
    User:
      properties:
        created_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://logo.clearbit.com/spacex.com?s=128
          nullable: true
          type: string
        language:
          example: EN
          nullable: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        parent_id:
          example: "54321"
          nullable: true
          type: string
        password:
          example: supersecretpassword
          type: string
          writeOnly: true
        status:
          example: active
          nullable: true
          type: string
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        username:
          example: masterofcoin
          nullable: true
          type: string
      required:
        - email
      x-pii:
        - username
        - first_name
        - last_name
        - email
    Website:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
          type: string
          x-graphql-type-name: WebsiteType
        url:
          example: http://example.com
          minLength: 1
          type: string
      required:
        - url
      type: object
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      x-ballerina-apikey-description: "Provide your API key as `Authorization`. Eg: `{\"Authorization\" : \"<API key>\"}`"
      type: apiKey