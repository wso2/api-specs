openapi: 3.0.1
info:
  x-ballerina-display:
    label: Avaza
    iconPath: "icon.png"
  title: Avaza API Documentation
  description:
    This is a generated connector for [Avaza API v1](https://api.avaza.com/swagger/ui/index) OpenAPI specification. 
    
    Avaza API allows to collaborate on projects, chat, schedule resources, track time, manage expenses & invoice customers.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials.

    Create a [Avaza account](https://signup.avaza.com/account/signup) and obtain tokens by following [this guide](https://www.avaza.com/avaza-api-oauth2-authentication/).  
  version: v1
servers:
- url: https://api.avaza.com/
paths:
  /api/Account:
    get:
      tags:
      - Account
      summary: Account Details
      operationId: Account_Get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/AccountDetails'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_account
  /api/Company/Lookup:
    get:
      tags:
      - Company
      summary: Gets minimal list of Companies.
      description: Certain roles see a restricted set of companies based on their
        project memberships
      operationId: CompanyLookup
      parameters:
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: search
        in: query
        description: Search string to match against Company title
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/CompanyDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/CompanyDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/CompanyDropdownList'
      security:
      - oauth2:
        - read_contacts
  /api/Company:
    get:
      tags:
      - Company
      summary: Gets list of Companies
      operationId: Company_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of results per page
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: 1 based page number to retrieve
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: '(optional) Supply one of: "DateUpdated", "DateCreated", "CompanyName","DateUpdated
          desc","DateCreated desc", "CompanyName desc"'
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyList'
            text/json:
              schema:
                $ref: '#/components/schemas/CompanyList'
            application/xml:
              schema:
                $ref: '#/components/schemas/CompanyList'
            text/xml:
              schema:
                $ref: '#/components/schemas/CompanyList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_contacts
    put:
      tags:
      - Company
      summary: Update a Company record.
      description: Requires CompanyID and a list of field names to update. The FieldsToUpdate
        field accepts a string array containing field names that should be updated.
      operationId: Company_Put
      requestBody:
        description: A record of type `UpdateCompany` which contains the necessary data to update company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
            text/json:
              schema:
                $ref: '#/components/schemas/Company'
            application/xml:
              schema:
                $ref: '#/components/schemas/Company'
            text/xml:
              schema:
                $ref: '#/components/schemas/Company'
      security:
      - oauth2:
        - write_contacts
      x-codegen-request-body-name: model
    post:
      tags:
      - Company
      summary: Create a Company
      operationId: Company_Post
      requestBody:
        description: A record of type `NewCompany` which contains the necessary data to create company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompany'
          text/json:
            schema:
              $ref: '#/components/schemas/NewCompany'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewCompany'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewCompany'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewCompany'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
            text/json:
              schema:
                $ref: '#/components/schemas/Company'
            application/xml:
              schema:
                $ref: '#/components/schemas/Company'
            text/xml:
              schema:
                $ref: '#/components/schemas/Company'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - write_contacts
      x-codegen-request-body-name: model
  /api/Company/{id}:
    get:
      tags:
      - Company
      summary: Gets Company by Company ID
      operationId: Company_GetByID
      parameters:
      - name: id
        in: path
        description: Company ID Number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
            text/json:
              schema:
                $ref: '#/components/schemas/Company'
            application/xml:
              schema:
                $ref: '#/components/schemas/Company'
            text/xml:
              schema:
                $ref: '#/components/schemas/Company'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_contacts
  /api/Contact:
    get:
      tags:
      - Contact
      summary: Gets list of Contacts
      operationId: Contact_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        description: Sort method
        in: query
        schema:
          type: string
      - name: CompanyIDFK
        description: Company related to contacts
        in: query
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactList'
            text/json:
              schema:
                $ref: '#/components/schemas/ContactList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContactList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_contacts
    post:
      tags:
      - Contact
      summary: Create a Contact
      operationId: Contact_Post
      requestBody:
        description: A record of type `NewCompanyContact` which contains the necessary data to create contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompanyContact'
          text/json:
            schema:
              $ref: '#/components/schemas/NewCompanyContact'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewCompanyContact'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewCompanyContact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewCompanyContact'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            text/json:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            application/xml:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            text/xml:
              schema:
                $ref: '#/components/schemas/CompanyContact'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - write_contacts
      x-codegen-request-body-name: model
  /api/Contact/{id}:
    get:
      tags:
      - Contact
      summary: Gets Contact by Contact ID
      operationId: Contact_GetByID
      parameters:
      - name: id
        in: path
        description: Contact ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            text/json:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            application/xml:
              schema:
                $ref: '#/components/schemas/CompanyContact'
            text/xml:
              schema:
                $ref: '#/components/schemas/CompanyContact'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_contacts
  /api/CreditNote:
    get:
      tags:
      - CreditNote
      summary: Gets list of CreditNotes
      operationId: CreditNote_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNoteList'
            text/json:
              schema:
                $ref: '#/components/schemas/CreditNoteList'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditNoteList'
            text/xml:
              schema:
                $ref: '#/components/schemas/CreditNoteList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/CreditNote/{id}:
    get:
      tags:
      - CreditNote
      summary: Gets Credit Note by CreditNoteID
      operationId: CreditNote_GetByID
      parameters:
      - name: id
        in: path
        description: Credit Note ID Number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
            text/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditNote'
            text/xml:
              schema:
                $ref: '#/components/schemas/CreditNote'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Currency:
    get:
      tags:
      - Currency
      summary: Gets list of Currencies
      operationId: Currency_Get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
            text/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
            application/xml:
              schema:
                $ref: '#/components/schemas/CurrencyList'
            text/xml:
              schema:
                $ref: '#/components/schemas/CurrencyList'
  /api/Estimate:
    get:
      tags:
      - Estimate
      summary: Gets list of Estimates
      description: 'EstimateStatusCode values are: "Draft", "Sent", "Accepted", "Converted",
        "Expired", "Rejected"'
      operationId: Estimate_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        description: Sort method
        in: query
        schema:
          type: string
      - name: CompanyIDFK
        description: Company related to estimates 
        in: query
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateList'
            text/json:
              schema:
                $ref: '#/components/schemas/EstimateList'
            application/xml:
              schema:
                $ref: '#/components/schemas/EstimateList'
            text/xml:
              schema:
                $ref: '#/components/schemas/EstimateList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
    post:
      tags:
      - Estimate
      summary: Create a new draft Estimate
      operationId: Estimate_Post
      requestBody:
        description: A record of type `NewEstimate` which contains the necessary data to create a new draft estimate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEstimate'
          text/json:
            schema:
              $ref: '#/components/schemas/NewEstimate'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewEstimate'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewEstimate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewEstimate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/EstimateDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/EstimateDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/EstimateDetails'
      security:
      - oauth2:
        - write_financials
      x-codegen-request-body-name: model
  /api/Estimate/{id}:
    get:
      tags:
      - Estimate
      summary: Gets Estimate by Estimate ID
      operationId: Estimate_GetByID
      parameters:
      - name: id
        in: path
        description: Estimate Estimate ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Expense/Attachment:
    post:
      tags:
      - Expense
      summary: Create expense attachment
      operationId: ExpenseAttachment
      requestBody:
        description: Request to create expense attachment
        content:
          application/json:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: Upload software package
                  format: binary
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseAttachmentUploadResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseAttachmentUploadResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseAttachmentUploadResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseAttachmentUploadResult'
      security:
      - oauth2:
        - write_expenses
  /api/ExpenseApproval/Submit:
    post:
      tags:
      - Expense
      summary: Submit Expenses for Approval.
      operationId: ExpenseApproval
      parameters:
      - name: UserID
        in: query
        description: The user to submit the Expenses for. Defaults to current user.
          Only allowed to be different from the current user when the current user
          has rights to Impersonate other users.
        schema:
          type: integer
          format: int32
      - name: SendNotifications
        in: query
        description: Send email alerts to expense approvers. Defaults to true
        schema:
          type: boolean
      requestBody:
        description: A collection of ExpenseID's that should be submitted for approval.
          If not provided, submits all verified expenses for approval.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
          application/xml:
            schema:
              type: array
              items:
                type: integer
                format: int64
          text/xml:
            schema:
              type: array
              items:
                type: integer
                format: int64
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
      security:
      - oauth2:
        - write_expenses
      x-codegen-request-body-name: ExpenseIDs
  /api/Expense:
    get:
      tags:
      - Expense
      summary: Gets list of Expenses
      operationId: Expense_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: ExpenseDateFrom
        description: Start date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: ExpenseDateTo
        description: End date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: UserEmail
        description: User email address
        in: query
        schema:
          type: string
      - name: UserID
        description: User Id
        in: query
        schema:
          type: integer
          format: int32
      - name: CategoryName
        description: Category name
        in: query
        schema:
          type: string
      - name: CustomerID
        description: Customer Id
        in: query
        schema:
          type: integer
          format: int32
      - name: ProjectID
        description: Project Id
        in: query
        schema:
          type: integer
          format: int32
      - name: isChargeable
        description: Chargeable status
        in: query
        schema:
          type: boolean
      - name: isInvoiced
        description: Invoiced status
        in: query
        schema:
          type: boolean
      - name: ExpenseReimbursementIDFK
        description: Expense reimbursement
        in: query
        schema:
          type: integer
          format: int64
      - name: ExpensePaymentMethodIDFK
        description: Expense payment method
        in: query
        schema:
          type: integer
          format: int32
      - name: ExpenseApprovalStatusCode
        description: Expense apprval status code
        in: query
        schema:
          type: string
      - name: Search
        description: Search query
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        description: Sort method
        in: query
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseList'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_expenses
    put:
      tags:
      - Expense
      summary: Update an Expense
      description: Update an Expense
      operationId: Expense_Put
      requestBody:
        description: A record of type `UpdateExpense` which contains the necessary data to update expense
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
      security:
      - oauth2:
        - write_expenses
      x-codegen-request-body-name: model
    post:
      tags:
      - Expense
      summary: Create an Expense
      description: Create an Expense
      operationId: Expense_Post
      requestBody:
        description: A record of type `NewExpense` which contains the necessary data to create expense
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
          text/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewExpense'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewExpense'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewExpense'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
      security:
      - oauth2:
        - write_expenses
      x-codegen-request-body-name: model
    delete:
      tags:
      - Expense
      summary: Delete a Timesheet Entry
      operationId: Expense_Delete
      # requestBody:
      #   description: A collection of ExpenseIDs to delete
      #   content:
      #     application/json:
      #       schema:
      #         type: array
      #         items:
      #           type: integer
      #           format: int64
      #     text/json:
      #       schema:
      #         type: array
      #         items:
      #           type: integer
      #           format: int64
      #     application/xml:
      #       schema:
      #         type: array
      #         items:
      #           type: integer
      #           format: int64
      #     text/xml:
      #       schema:
      #         type: array
      #         items:
      #           type: integer
      #           format: int64
      #     application/x-www-form-urlencoded:
      #       schema:
      #         type: array
      #         items:
      #           type: integer
      #           format: int64
      #   required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDeleteResultSet'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseDeleteResultSet'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDeleteResultSet'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDeleteResultSet'
      security:
      - oauth2:
        - write_expenses
      x-codegen-request-body-name: ExpenseIDs
  /api/Expense/{id}:
    get:
      tags:
      - Expense
      summary: Gets an Expense Entry by Expense ID
      operationId: Expense_GetByID
      parameters:
      - name: id
        in: path
        description: Expense ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseDetails'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_expenses
  /api/ExpenseCategory:
    get:
      tags:
      - ExpenseCategory
      summary: Gets list of Expense Categories
      description: The default sort order is by Name asc
      operationId: ExpenseCategory_Get
      parameters:
      - name: isEnabled
        in: query
        description: Optional filter on for enabled/disabled categories. Defaults
          to true.
        schema:
          type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryList'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_expenses
  /api/ExpenseGroup/Lookup:
    get:
      tags:
      - ExpenseGroup
      summary: Gets minimal list of Expense Groups.
      description: Expense Groups are for adhoc grouping of reported expenses. e.g.
        for expenses incurred on a Trip
      operationId: ExpenseGroupLookup
      parameters:
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: search
        in: query
        description: Search string to match against Expense Group Name
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseGroupDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseGroupDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseGroupDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseGroupDropdownList'
      security:
      - oauth2:
        - read_expenses
  /api/ExpenseMerchant/Lookup:
    get:
      tags:
      - ExpenseMerchant
      summary: Gets minimal list of Expense Merchants.
      operationId: ExpenseMerchangeLookup
      parameters:
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: search
        in: query
        description: Search string to match against Expense Group Name
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseMerchantDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseMerchantDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseMerchantDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseMerchantDropdownList'
      security:
      - oauth2:
        - read_expenses
  /api/ExpensePaymentMethod/Lookup:
    get:
      tags:
      - ExpensePaymentMethod
      summary: Gets minimal list of Expense Payment Methods.
      operationId: ExpensePaymentMethodLookup
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpensePaymentMethodDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpensePaymentMethodDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpensePaymentMethodDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpensePaymentMethodDropdownList'
      security:
      - oauth2:
        - read_expenses
  /api/ExpenseSummary:
    get:
      tags:
      - ExpenseSummary
      summary: Gets Basic Summary of Expense Statistics
      operationId: ExpenseSummary_Get
      parameters:
      - name: model.groupBy
        in: query
        description: '(Optional) Combine one, two or three levels of Grouping. Combine
          these possible grouping values: "Category", "ChargeableStatus", "Merchant",
          "ApprovalStatus", "ReimbursementStatus", "Customer", "Project", "User",
          "Task", "Year", "Month", "Day", "Week".'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: model.expenseDateFrom
        in: query
        description: (Required) Filter for expenses with expense dates greater or
          equal to the specified date. e.g. 2019-01-25.
        schema:
          type: string
          format: date-time
      - name: model.expenseDateTo
        in: query
        description: (Required) Filter for expenses with an expense date smaller or
          equal to the specified  date. e.g. 2019-01-25.
        schema:
          type: string
          format: date-time
      - name: model.userID
        in: query
        description: (Optional) Defaults to the current user. Provide one or more
          UserIDs of Users whose expenses should be retrieved. If the current user
          doesn't have impersonation rights, then they will only see their own data.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: model.projectID
        in: query
        description: (Optional) Filter by Project
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseSummaryResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ExpenseSummaryResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExpenseSummaryResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExpenseSummaryResult'
      security:
      - oauth2:
        - read_expenses
  /api/FixedAmount:
    get:
      tags:
      - FixedAmount
      summary: Gets list of Fixed Amounts
      operationId: FixedAmount_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: EntryDateFrom
        description: Start date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: EntryDateTo
        description: End date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: ProjectID
        in: query
        description: (Optional) The ProjectID of a Project to filter Fixed Amounts
          for
        schema:
          type: integer
          format: int32
      - name: TaskID
        in: query
        description: (Optional) The TaskID of a Task to filter Fixed Amounts for
        schema:
          type: integer
          format: int32
      - name: isInvoiced
        description: Invoiced status
        in: query
        schema:
          type: boolean
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'Optional sorting instruction. Currently possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc","EntryDate", "EntryDate
          desc", "StartTimeLocal","StartTimeLocal desc", "TimeSheetEntryID", "TimeSheetEntryID
          desc"'
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FixedAmountList'
            text/json:
              schema:
                $ref: '#/components/schemas/FixedAmountList'
            application/xml:
              schema:
                $ref: '#/components/schemas/FixedAmountList'
            text/xml:
              schema:
                $ref: '#/components/schemas/FixedAmountList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Inventory:
    get:
      tags:
      - Inventory
      summary: Gets list of Inventory
      operationId: Inventory_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryList'
            text/json:
              schema:
                $ref: '#/components/schemas/InventoryList'
            application/xml:
              schema:
                $ref: '#/components/schemas/InventoryList'
            text/xml:
              schema:
                $ref: '#/components/schemas/InventoryList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Inventory/{id}:
    get:
      tags:
      - Inventory
      summary: Gets InventoryItem by InventoryItem ID
      operationId: Inventory_GetByID
      parameters:
      - name: id
        in: path
        description: InventoryItem ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Invoice:
    get:
      tags:
      - Invoice
      summary: Gets list of Invoices
      description: 'TransactionStatusCode values are: "Draft", "Sent", "Late", "Paid",
        "Partial", "Void"'
      operationId: Invoice_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        description: Sort method
        in: query
        schema:
          type: string
      - name: CompanyIDFK
        description: Invoice issued company
        in: query
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceList'
            text/json:
              schema:
                $ref: '#/components/schemas/InvoiceList'
            application/xml:
              schema:
                $ref: '#/components/schemas/InvoiceList'
            text/xml:
              schema:
                $ref: '#/components/schemas/InvoiceList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
    post:
      tags:
      - Invoice
      summary: Create a new draft invoice
      operationId: Invoice_Post
      requestBody:
        description: A record of type `NewInvoice` which contains the necessary data to create invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInvoice'
          text/json:
            schema:
              $ref: '#/components/schemas/NewInvoice'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewInvoice'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewInvoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewInvoice'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            text/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            application/xml:
              schema:
                $ref: '#/components/schemas/Invoice'
            text/xml:
              schema:
                $ref: '#/components/schemas/Invoice'
      security:
      - oauth2:
        - write_financials
      x-codegen-request-body-name: model
  /api/Invoice/{id}:
    get:
      tags:
      - Invoice
      summary: Gets Invoice by Invoice ID
      operationId: Invoice_GetByID
      parameters:
      - name: id
        in: path
        description: Invoice Transaction ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Payment:
    get:
      tags:
      - Payment
      summary: Gets list of Payments
      operationId: Payment_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentList'
            text/json:
              schema:
                $ref: '#/components/schemas/PaymentList'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentList'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_financials
    post:
      tags:
      - Payment
      summary: Create new Payment and optionally assign payment allocations to Invoices
      operationId: Payment_Post
      requestBody:
        description: A record of type `NewPayment` which contains the necessary data to create payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
          text/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewPayment'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewPayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewPayment'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
            text/json:
              schema:
                $ref: '#/components/schemas/Payment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Payment'
            text/xml:
              schema:
                $ref: '#/components/schemas/Payment'
      security:
      - oauth2:
        - write_financials
      x-codegen-request-body-name: model
  /api/Payment/{id}:
    get:
      tags:
      - Payment
      summary: Gets Payment by Payment Transaction ID
      operationId: Payment_GetByID
      parameters:
      - name: id
        in: path
        description: Invoice Transaction ID Number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
            text/json:
              schema:
                $ref: '#/components/schemas/Payment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Payment'
            text/xml:
              schema:
                $ref: '#/components/schemas/Payment'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_financials
  /api/Project/Lookup:
    get:
      tags:
      - Project
      summary: Gets minimal list of active Projects for the current user
      operationId: ProjectLookup
      parameters:
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: TimesheetUserID
        in: query
        description: Optionally Filter to the projects that the supplied UserID can
          add timesheets to
        schema:
          type: integer
          format: int32
      - name: CompanyIDFK
        in: query
        description: Optionally Filter for a specific Company ID
        schema:
          type: integer
          format: int32
      - name: search
        in: query
        description: Search string to match against Project title and Customer name
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectDropdownList'
      security:
      - oauth2:
        - read_projects
  /api/Project:
    get:
      tags:
      - Project
      summary: Gets list of Projects
      operationId: Project_Get
      parameters:
      - name: UpdatedAfter
        in: query
        description: Only show project records updated after a certain date (UTC)
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'A column to sort on. Current possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc"'
        schema:
          type: string
      - name: TimesheetUserID
        in: query
        description: Filter to the projects that the supplied UserID can add timesheets
          to
        schema:
          type: integer
          format: int32
      - name: includeArchived
        in: query
        description: Include Archived Projects in the results
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectList'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectList'
      security:
      - oauth2:
        - read_projects
    put:
      tags:
      - Project
      summary: Update an Project
      description: Update a Project
      operationId: Project_Put
      requestBody:
        description: A record of type `UpdateProjectModel` which contains the necessary data to update project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateProjectModel'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateProjectModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateProjectModel'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
    post:
      tags:
      - Project
      summary: Create a Project
      operationId: Project_Post
      requestBody:
        description: A record of type `NewProjectModel` which contains the necessary data to create project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjectModel'
          text/json:
            schema:
              $ref: '#/components/schemas/NewProjectModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewProjectModel'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewProjectModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewProjectModel'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
  /api/Project/{id}:
    get:
      tags:
      - Project
      summary: Gets Project by Project ID
      operationId: Project_GetByID
      parameters:
      - name: id
        in: path
        description: Project ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_projects
  /api/ProjectMember:
    post:
      tags:
      - ProjectMember
      summary: Assign a user as a Member of a Project
      description: the Amount columns for Cost, Budget, Rates should be specified
        as a decimal. Financial amounts assume the currency of the Customer company.
        Budget units depend on the Budget method set on the Project.
      operationId: ProjectMember_Post
      requestBody:
        description: A record of type `NewProjectMember` which contains the necessary data to assign user to project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjectMember'
          text/json:
            schema:
              $ref: '#/components/schemas/NewProjectMember'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewProjectMember'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewProjectMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewProjectMember'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectMemberDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectMemberDetails'
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
  /api/ProjectTimesheetCategory:
    get:
      tags:
      - ProjectTimesheetCategory
      summary: Gets list of Project Timesheet Categories
      description: The default sort order is by isBillable desc, Name asc
      operationId: ProjectTimesheetCategory_Get
      parameters:
      - name: ProjectID
        in: query
        description: Get categories filtered by ProjectID
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTimesheetCategoryList'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectTimesheetCategoryList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectTimesheetCategoryList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProjectTimesheetCategoryList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_timesheets
  /api/ScheduleAssignment:
    get:
      tags:
      - ScheduleAssignment
      summary: Gets list of Schedule Assignments.
      description: Schedule assignments are per-day, and link to a parent Schedule
        Series.
      operationId: ScheduleAssignment_Get
      parameters:
      - name: UpdatedAfter
        in: query
        description: Limit results to records updated after the specified date
        schema:
          type: string
          format: date-time
      - name: ScheduleDateFrom
        in: query
        description: Filter for schedule assignement  that are  on or after a specific
          date
        schema:
          type: string
          format: date-time
      - name: ScheduleDateTo
        in: query
        description: Filter for schedules that are on or before a specific date
        schema:
          type: string
          format: date-time
      - name: ScheduleSeriesID
        in: query
        description: Filter to records for a particular Schedule Series
        schema:
          type: integer
          format: int64
      - name: UserID
        in: query
        description: The UserID of a schedule user to filter assignments for. Only
          api users with Admin role can see all schedules across all users. Users
          with ScheduleUser role can access their own ScheduleSeries.
        schema:
          type: integer
          format: int32
      - name: UserEmail
        in: query
        description: The email of the user who has been scheduled
        schema:
          type: string
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'Optional sorting instruction. Currently possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc"'
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleAssignmentList'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleAssignmentList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleAssignmentList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleAssignmentList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_schedule
  /ScheduleSeries/AddBooking:
    post:
      tags:
      - ScheduleSeries
      summary: Create new Schedule Booking
      operationId: ScheduleSeries_AddBooking
      requestBody:
        description: A record of type `CreateBooking` which contains the necessary data to create schedule booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBooking'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateBooking'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateBooking'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateBooking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateBooking'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
      security:
      - oauth2:
        - write_schedule
      x-codegen-request-body-name: model
  /ScheduleSeries/AddLeave:
    post:
      tags:
      - ScheduleSeries
      summary: Create new Leave Booking
      operationId: ScheduleSeries_AddLeave
      requestBody:
        description: A record of type `CreateLeave` which contains the necessary data to create leave booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeave'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateLeave'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateLeave'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateLeave'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLeave'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
      security:
      - oauth2:
        - write_schedule
      x-codegen-request-body-name: model
  /ScheduleSeries/EditLeave:
    put:
      tags:
      - ScheduleSeries
      summary: Edit Leave Booking
      operationId: ScheduleSeries_EditLeave
      requestBody:
        description: A record of type `EditLeave` which contains the necessary data to edit leave booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLeave'
          text/json:
            schema:
              $ref: '#/components/schemas/EditLeave'
          application/xml:
            schema:
              $ref: '#/components/schemas/EditLeave'
          text/xml:
            schema:
              $ref: '#/components/schemas/EditLeave'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EditLeave'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
      security:
      - oauth2:
        - write_schedule
      x-codegen-request-body-name: model
  /ScheduleSeries/EditBooking:
    put:
      tags:
      - ScheduleSeries
      summary: Edit Booking
      operationId: ScheduleSeries_EditBooking
      requestBody:
        description: A record of type `EditBooking` which contains the necessary data to edit booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditBooking'
          text/json:
            schema:
              $ref: '#/components/schemas/EditBooking'
          application/xml:
            schema:
              $ref: '#/components/schemas/EditBooking'
          text/xml:
            schema:
              $ref: '#/components/schemas/EditBooking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EditBooking'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesDetails'
      security:
      - oauth2:
        - write_schedule
      x-codegen-request-body-name: model
  /api/ScheduleSeries:
    get:
      tags:
      - ScheduleSeries
      summary: Gets list of Schedule Series
      description: Schedule Series represents a strip of time assigned to a user over
        a date range, for a certain number of hours per day. They can be for Leave
        or for project work Bookings.
      operationId: ScheduleSeries_Get
      parameters:
      - name: UpdatedAfter
        in: query
        description: Limit results to records updated after the specified date
        schema:
          type: string
          format: date-time
      - name: ScheduleStartDateFrom
        in: query
        description: Filter for schedules that start on or after a specific date
        schema:
          type: string
          format: date-time
      - name: ScheduleStartDateTo
        in: query
        description: Filter for schedules that start on or before a specific date
        schema:
          type: string
          format: date-time
      - name: ScheduleEndDateFrom
        in: query
        description: Filter for schedules that end on or after a specific date
        schema:
          type: string
          format: date-time
      - name: ScheduleEndDateTo
        in: query
        description: Filter for schedules that end on or before a specific date
        schema:
          type: string
          format: date-time
      - name: UserID
        in: query
        description: The UserID of a schedule user to filter assignments for. Only
          api users with Admin role can see all schedules across all users. Users
          with ScheduleUser role can access their own ScheduleSeries.
        schema:
          type: integer
          format: int32
      - name: UserEmail
        in: query
        description: The email of the user who has been scheduled
        schema:
          type: string
      - name: TimeSheetCategoryID
        in: query
        description: Filter for schedule records linked to a specific timesheeet category
        schema:
          type: integer
          format: int32
      - name: TimeSheetCategoryName
        in: query
        description: Filter for schedule records with a specific timesheeet category
          name (exact string match)
        schema:
          type: string
      - name: LeaveTypeID
        in: query
        description: Filter to records of a particular leave type
        schema:
          type: integer
          format: int32
      - name: ProjectID
        in: query
        description: Filter to only include books linked to a specific project
        schema:
          type: integer
          format: int32
      - name: CompanyID
        in: query
        description: Filter to only include records linked to projects, where that
          project belongs to a specific customer company
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'Optional sorting instruction. Currently possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc"'
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesList'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesList'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesList'
            text/xml:
              schema:
                $ref: '#/components/schemas/ScheduleSeriesList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_schedule
  /api/Section:
    get:
      tags:
      - Section
      summary: Gets list of Sections
      operationId: Section_Get
      parameters:
      - name: ProjectID
        in: query
        description: Get sections for Project with ProjectID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionList'
            text/json:
              schema:
                $ref: '#/components/schemas/SectionList'
            application/xml:
              schema:
                $ref: '#/components/schemas/SectionList'
            text/xml:
              schema:
                $ref: '#/components/schemas/SectionList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_projects
    post:
      tags:
      - Section
      summary: Create a Section
      operationId: Section_Post
      requestBody:
        description: A record of type `NewSection` which contains the necessary data to create section
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSection'
          text/json:
            schema:
              $ref: '#/components/schemas/NewSection'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewSection'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewSection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewSection'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/SectionDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/SectionDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/SectionDetails'
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
    delete:
      tags:
      - Section
      summary: Delete a Section
      operationId: Section_Delete
      parameters:
      - name: SectionID
        description: Unique identifier for section
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
      security:
      - oauth2:
        - write_projects
  /api/Task/Lookup:
    get:
      tags:
      - Task
      summary: Gets minimal list of Tasks for the current user
      description: Groups Tasks by Section. Default sort is by Section Title followed
        by Task Title
      operationId: TaskLookup
      parameters:
      - name: projectID
        in: query
        description: (required) The ProjectID to use when filtering Tasks
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: hideCompleted
        in: query
        description: (optional) true/false to hide completed tasks. Defaults false
        schema:
          type: boolean
      - name: search
        in: query
        description: (optional) Search string to match against Task title. Performs
          begins-with match
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDropdownList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskDropdownList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskDropdownList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskDropdownList'
      security:
      - oauth2:
        - read_projects
  /api/Task:
    get:
      tags:
      - Task
      summary: Gets list of Tasks
      operationId: Task_Get
      parameters:
      - name: UpdatedAfter
        in: query
        description: Optional filter to records updated after a specific date.
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: Number of items per page. Defaults to 20.
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1. Defaults to 1
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'Optional sorting instruction. Currently possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc", "SectionTitle", "Title"'
        schema:
          type: string
      - name: isComplete
        in: query
        description: Optional filter to only display tasks linked to a Task Status
          where isComplete=false, or where isComplete=true
        schema:
          type: boolean
      - name: ProjectID
        in: query
        description: Optional filter to only display tasks belonging to a specific
          ProjectID
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_projects
    put:
      tags:
      - Task
      summary: Update a Task.
      description: Requires TaskID and a list of field names to update. The FieldsToUpdate
        field accepts a string array containing field names that should be updated.
      operationId: Task_Put
      requestBody:
        description: A record of type `UpdateTask` which contains the necessary data to update task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateTask'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateTask'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
    post:
      tags:
      - Task
      summary: Create a Task
      operationId: Task_Post
      requestBody:
        description: A record of type `NewTask` which contains the necessary data to create task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTask'
          text/json:
            schema:
              $ref: '#/components/schemas/NewTask'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewTask'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewTask'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
      security:
      - oauth2:
        - write_projects
      x-codegen-request-body-name: model
    delete:
      tags:
      - Task
      summary: Delete a Task
      operationId: Task_Delete
      parameters:
      - name: TaskID
        description: Task Id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
      security:
      - oauth2:
        - write_projects
  /api/Task/{id}:
    get:
      tags:
      - Task
      summary: Gets Task by Task ID
      operationId: Task_GetByID
      parameters:
      - name: id
        in: path
        description: Task ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskDetails'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_projects
  /api/TaskStatus:
    get:
      tags:
      - TaskStatus
      summary: Gets list of Task Statuses
      operationId: TaskStatus_Get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskStatusList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskStatusList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskStatusList'
      security:
      - oauth2:
        - read_projects
  /api/TaskType:
    get:
      tags:
      - TaskType
      summary: Gets list of Task Types
      operationId: TaskType_Get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypeList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaskTypeList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskTypeList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaskTypeList'
      security:
      - oauth2:
        - read_projects
  /api/Tax:
    get:
      tags:
      - Tax
      summary: Get List of Taxes configured in the Avaza account.
      operationId: Tax_Get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxList'
            text/json:
              schema:
                $ref: '#/components/schemas/TaxList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaxList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TaxList'
      security:
      - oauth2:
        - read_financials
  /api/Timesheet:
    get:
      tags:
      - Timesheet
      summary: Gets list of Timsheets
      operationId: Timesheet_Get
      parameters:
      - name: UpdatedAfter
        description: Limit results to records updated after the specified date
        in: query
        schema:
          type: string
          format: date-time
      - name: EntryDateFrom
        description: Timesheet start entry date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: EntryDateTo
        description: Timesheet end entry date to filter
        in: query
        schema:
          type: string
          format: date-time
      - name: UserID
        in: query
        description: The UserID of a timesheet user to filter timesheets for. Only
          api users with certain higher roles can see timesheets across multiple users.
        schema:
          type: integer
          format: int32
      - name: UserEmail
        description: User email address
        in: query
        schema:
          type: string
      - name: CategoryName
        description: Category name
        in: query
        schema:
          type: string
      - name: ProjectID
        description: Project Id
        in: query
        schema:
          type: integer
          format: int32
      - name: isBillable
        description: Billable status
        in: query
        schema:
          type: boolean
      - name: isInvoiced
        description: Invoiced status
        in: query
        schema:
          type: boolean
      - name: isTimerRunning
        description: Timer running status
        in: query
        schema:
          type: boolean
      - name: pageSize
        in: query
        description: Number of items per page (max 1000)
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        description: Page to display. Starts from 1.
        schema:
          type: integer
          format: int32
      - name: Sort
        in: query
        description: 'Optional sorting instruction. Currently possible values: "DateUpdated",
          "DateCreated", "DateUpdated desc", "DateCreated desc","EntryDate", "EntryDate
          desc", "StartTimeLocal","StartTimeLocal desc", "TimeSheetEntryID", "TimeSheetEntryID
          desc"'
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetList'
            text/json:
              schema:
                $ref: '#/components/schemas/TimesheetList'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimesheetList'
            text/xml:
              schema:
                $ref: '#/components/schemas/TimesheetList'
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - read_timesheets
    put:
      tags:
      - Timesheet
      summary: Update a Timesheet
      description: The FieldsToUpdate field expects a string array collection of the
        field names you would like updated. Valid fields to update inlcude "ProjectIDFK",
        "TimeSheetCategoryIDFK", "TaskIDFK", "Duration", "EntryDate", "Notes", "hasStartEndTime",
        "CustomMetadata". If you intend to provide start/end times on timesheets,
        this is achieved by including the start time in the EntryDate field (Iso date
        format), along with a Duration (decimal format).
      operationId: Timesheet_Put
      requestBody:
        description: A record of type `UpdateTimesheetModel` which contains the necessary data to update timesheet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimesheetModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateTimesheetModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateTimesheetModel'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateTimesheetModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateTimesheetModel'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
      security:
      - oauth2:
        - write_timesheets
      x-codegen-request-body-name: model
    post:
      tags:
      - Timesheet
      summary: Create a new Timesheet Entry
      operationId: Timesheet_Post
      requestBody:
        description: A record of type `NewTimesheet` which contains the necessary data to create timesheet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTimesheet'
          text/json:
            schema:
              $ref: '#/components/schemas/NewTimesheet'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewTimesheet'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewTimesheet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewTimesheet'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
      security:
      - oauth2:
        - write_timesheets
      x-codegen-request-body-name: model
  /api/Timesheet/{id}:
    get:
      tags:
      - Timesheet
      summary: Gets a Timesheet Entry by Timesheet ID
      operationId: Timesheet_GetByID
      parameters:
      - name: id
        in: path
        description: Timesheet ID number
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
            text/xml:
              schema:
                $ref: '#/components/schemas/TimesheetDetails'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_timesheets
    delete:
      tags:
      - Timesheet
      summary: Delete a Timesheet Entry
      operationId: Timesheet_Delete
      parameters:
      - name: id
        in: path
        description: The id of the timesheet entry to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
      security:
      - oauth2:
        - write_timesheets
  /api/TimesheetSubmission:
    post:
      tags:
      - TimesheetSubmission
      summary: Submit Timesheets for Approval.
      description: Either provide a a specific Day (WholeDayOf) or any day in a Week
        (WholeWeekOf) to submit all draft timesheets in that day or week
      operationId: TimesheetSubmission_Post
      parameters:
      - name: SendNotifications
        in: query
        description: Send email alerts to timesheet approvers. Defaults to true
        schema:
          type: boolean
      - name: WholeWeekOf
        in: query
        description: A date (yyyy-MM-dd) that falls within  a Week to have all timesheets
          in that week submitted. Respects the First Day of Week setting in your account
          Timesheet Settings to determine the week range.
        schema:
          type: string
          format: date-time
      - name: WholeDayOf
        in: query
        description: A date (yyyy-MM-dd) to submit all timesheets on this day
        schema:
          type: string
          format: date-time
      - name: UserID
        in: query
        description: The user to submit timesheets for. Defaults to current user.
          Only allowed to be different from the current user when the current user
          has rights to Impersonate other users.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
      security:
      - oauth2:
        - write_timesheets
  /api/TimesheetSummary:
    get:
      tags:
      - TimesheetSummary
      summary: Gets Basic Summary of Timesheet Statistics
      operationId: TimesheetSummary_Get
      parameters:
      - name: model.groupBy
        in: query
        description: '(Optional) Combine one, two or three levels of Grouping. Combine
          these possible grouping values: "Customer", "Project", "Category", "User",
          "Task", "Year", "Month", "Day", "Week".'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: model.entryDateFrom
        in: query
        description: (Required) Filter for timesheets greater or equal to the specified
          date. e.g. 2019-01-25. You can optionally include a time component, otherwise
          it assumes 00:00
        schema:
          type: string
          format: date-time
      - name: model.entryDateTo
        in: query
        description: (Required) Filter for timesheets with an entry date smaller or
          equal to the specified  date. e.g. 2019-01-25. You can optionally include
          a time component, otherwise it assumes 00:00
        schema:
          type: string
          format: date-time
      - name: model.userID
        in: query
        description: (Optional) Defaults to the current user. Provide one or more
          UserIDs of Users whose timesheets should be retrieved. If the current user
          doesn't have impersonation rights, then they will only see their own data.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: model.projectID
        in: query
        description: (Optional) Filter by Project
        schema:
          type: integer
          format: int32
      - name: model.isBillable
        in: query
        description: (Optional) Filter by the billable status of Timesheets.
        schema:
          type: boolean
      - name: model.isInvoiced
        in: query
        description: (Optional) Filter for timesheets by whether they have been Invoiced
          or not.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetSummaryResult'
            text/json:
              schema:
                $ref: '#/components/schemas/TimesheetSummaryResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimesheetSummaryResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/TimesheetSummaryResult'
      security:
      - oauth2:
        - read_timesheets
  /api/TimesheetTimer:
    get:
      tags:
      - TimesheetTimer
      summary: Gets the  Running Timer if there is one for a user.
      operationId: TimesheetTimer_GetRunningTimer
      parameters:
      - name: UserID
        in: query
        description: Optional - User ID number if impersonating a different user.
          Otherwise assumes the current user. Only users with certain security roles
          have permission to impersonate other users
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - read_timesheets
  /api/TimesheetTimer/{id}:
    post:
      tags:
      - TimesheetTimer
      summary: Starts a Timer running on an existing Timesheet Entry
      operationId: TimesheetTimer_StartTimer
      parameters:
      - name: id
        in: path
        description: id of timesheet entry that should be used as the basis for running
          a timer. If the existing timesheet is not on the current day, or you have
          start/end times enabled, then a new timesheet will be created for the timer.
        required: true
        schema:
          type: integer
          format: int64
      - name: UserID
        in: query
        description: Optional - User ID number if impersonating a different user.
          Otherwise assumes the current user. Only users with certain security roles
          have permission to impersonate other users
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - write_timesheets
    delete:
      tags:
      - TimesheetTimer
      summary: Stop the timer running on an existing Timesheet Entry
      operationId: TimesheetTimer_StopTimer
      parameters:
      - name: id
        in: path
        description: The ID of the existing timesheet entry that needs its timer stopped
        required: true
        schema:
          type: integer
          format: int64
      - name: UserID
        in: query
        description: Optional - User ID number if impersonating a different user.
          Otherwise assumes the current user. Only users with certain security roles
          have permission to impersonate other users
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - oauth2:
        - write_timesheets
  /api/UserProfile:
    get:
      tags:
      - UserProfile
      summary: Get Collection of Users who have roles in the current Avaza account.
      description: Admin and Invoice Managers can see all. Other users are limited
        to seeing their own profile.
      operationId: UserProfile_Get
      parameters:
      - name: Roles
        in: query
        description: Optional list of comma separated role codes to filter users by
          (e.g. "TimesheetUser,Admin")
        schema:
          type: string
      - name: Tags
        description: User role tags
        in: query
        schema:
          type: string
      - name: CurrentUserOnly
        in: query
        description: Optional boolean (true/false) to filter to only show current
          authenticated user (always true for non Admin/InvoiceManager users)
        schema:
          type: boolean
      - name: CompanyIDFK
        in: query
        description: Optionally filter by Company ID
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
            text/json:
              schema:
                $ref: '#/components/schemas/UserList'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserList'
            text/xml:
              schema:
                $ref: '#/components/schemas/UserList'
      security:
      - oauth2:
        - read_users
  /api/Webhook:
    get:
      tags:
      - Webhook
      summary: Get list of Webhook Subscriptions
      operationId: Webhook_Get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
            application/xml:
              schema:
                $ref: '#/components/schemas/WebhookList'
            text/xml:
              schema:
                $ref: '#/components/schemas/WebhookList'
      security:
      - oauth2:
        - webhook_notifications
    post:
      tags:
      - Webhook
      summary: Subscribe to Webhook. On success, returns ID of webhook subscription.
      description: 'When you receive a webhook, you should respond with Http 200 OK
        Status Code, otherwise we will retry. To create a webhook, you need both the
        webhook_notifications scope, as well as the scope for the required entity
        being monitored.  Event values are: "company_created", "company_deleted",
        "company_updated", "contact_created", "contact_deleted", "contact_updated",
        "invoice_created", "invoice_sent","invoice_updated","invoice_deleted", "project_created",
        "project_deleted", "project_updated", "task_created", "task_updated","task_deleted",
        "timesheet_created", "timesheet_deleted", "timesheet_updated".  You can subscribe
        to any webhook, but you will only receive notifications for data appropriate
        to the roles of your user account. There is an optional  Secret parameter
        (string 255 char max). This allows for webhook authentication. If provided,
        the Secret will be BASE 64 encoded and passed with notications as a basic
        authentication http header. i.e. Authorization Basic [BASE64 of Secret]"'
      operationId: Webhook_Post
      requestBody:
        description: A record of type `CreateSubscription` which contains the necessary data to subscribe to webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
          text/xml:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
        required: true
      responses:
        201:
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeResult'
            text/json:
              schema:
                $ref: '#/components/schemas/SubscribeResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/SubscribeResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/SubscribeResult'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Duplicate subscription already exists
          content: {}
      security:
      - oauth2:
        - webhook_notifications
        - read_contacts
        - read_account
        - read_users
        - read_financials
        - read_projects
        - read_schedule
        - read_timesheets
        - read_expenses
        - write_contacts
        - write_account
        - write_users
        - write_financials
        - write_projects
        - write_schedule
        - write_timesheets
        - write_expenses
      x-codegen-request-body-name: model
    delete:
      tags:
      - Webhook
      summary: Delete webhook subscription by URL
      operationId: Webhook_DeleteByUrl
      parameters:
      - name: target_url
        in: query
        description: Target URL that should be used to delete subscriptions
        required: true
        schema:
          type: string
      responses:
        200:
          description: Subscription Deleted OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - webhook_notifications
  /api/Webhook/{id}:
    get:
      tags:
      - Webhook
      summary: Get Webhook Subscription by SubscriptionID
      operationId: Webhook_GetByID
      parameters:
      - name: id
        description: Subscription Id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
            application/xml:
              schema:
                $ref: '#/components/schemas/WebhookList'
            text/xml:
              schema:
                $ref: '#/components/schemas/WebhookList'
      security:
      - oauth2:
        - webhook_notifications
    delete:
      tags:
      - Webhook
      summary: Delete Webhook Subscription by ID
      operationId: Webhook_Delete
      parameters:
      - name: id
        in: path
        description: Subscription id to be deleted
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Subscription deleted ok
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
      security:
      - oauth2:
        - webhook_notifications
components:
  schemas:
    AccountDetails:
      type: object
      properties:
        AccountID:
          type: integer
          format: int32
        CompanyName:
          type: string
        Subdomain:
          type: string
        AccountEmail:
          type: string
        hasStartEndTimesheets:
          type: boolean
        has24HourTimesheetFormat:
          type: boolean
        WeeklyTimesheetReminder:
          type: boolean
        LockApprovedTimesheets:
          type: boolean
        TimesheetDayOfWeek:
          type: integer
          format: int32
        TimesheetDisplayFormatCode:
          type: string
        AllowHidingCompletedTasksOnTimesheet:
          type: boolean
        CurrentServerTimeISO:
          type: string
          description: 'Format: ISO "YYYY-MM-DD HH:mm:ss.SSS"'
        SC:
          type: string
        DefaultCurrencyCode:
          type: string
          description: ISO 3 letter base Currency Code for the account
        ExpenseApprovalRequired:
          type: boolean
          description: Whether the account requires expenses be approved.
        LockApprovedExpenses:
          type: boolean
          description: Approved expenses get locked from subsequent editing by standard
            expense users.
    CompanyDropdownList:
      type: object
      properties:
        Companies:
          type: array
          items:
            $ref: '#/components/schemas/CompanyMinimal'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    CompanyMinimal:
      type: object
      properties:
        CompanyID:
          type: integer
          format: int64
        CompanyName:
          type: string
    CompanyList:
      type: object
      properties:
        Companies:
          type: array
          items:
            $ref: '#/components/schemas/Company'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    Company:
      type: object
      properties:
        CompanyID:
          type: integer
          format: int32
        CompanyName:
          type: string
        BillingAddressLine:
          type: string
        BillingAddressCity:
          type: string
        BillingAddressState:
          type: string
        BillingAddressPostCode:
          type: string
        BillingCountryCode:
          type: string
        BillingAddress:
          type: string
        Phone:
          type: string
        Fax:
          type: string
        website:
          type: string
        TaxNumber:
          type: string
        Comments:
          type: string
        CurrencyCode:
          type: string
        DefaultTradingTermIDFK:
          type: integer
          format: int32
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        Contacts:
          type: array
          items:
            $ref: '#/components/schemas/CompanyContact'
    CompanyContact:
      type: object
      properties:
        ContactID:
          type: integer
          format: int32
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        Firstname:
          type: string
        Lastname:
          type: string
        Email:
          type: string
        Phone:
          type: string
        Mobile:
          type: string
        PositionTitle:
          type: string
        TimeZone:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    NewCompany:
      required:
      - CompanyName
      type: object
      properties:
        CompanyName:
          type: string
        CurrencyCode:
          type: string
        BillingAddressLine:
          type: string
        BillingAddressCity:
          type: string
        BillingAddressState:
          type: string
        BillingAddressPostCode:
          type: string
        BillingCountryCode:
          type: string
        BillingAddress:
          type: string
        Phone:
          type: string
        Fax:
          type: string
        website:
          type: string
        TaxNumber:
          type: string
        Comments:
          type: string
    UpdateCompany:
      type: object
      properties:
        CompanyID:
          type: integer
          format: int32
        FieldsToUpdate:
          type: array
          items:
            type: string
        CompanyName:
          type: string
        BillingAddressLine:
          type: string
        BillingAddressCity:
          type: string
        BillingAddressState:
          type: string
        BillingAddressPostCode:
          type: string
        BillingCountryCode:
          type: string
        BillingAddress:
          type: string
        Phone:
          type: string
        Fax:
          type: string
        website:
          type: string
        TaxNumber:
          type: string
        Comments:
          type: string
    ContactList:
      type: object
      properties:
        Contacts:
          type: array
          items:
            $ref: '#/components/schemas/CompanyContact'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    NewCompanyContact:
      required:
      - ContactEmail
      - Firstname
      - Lastname
      type: object
      properties:
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        CurrencyCode:
          type: string
        CompanyBillingAddress:
          type: string
        CompanyBillingAddressLine:
          type: string
        CompanyBillingAddressCity:
          type: string
        CompanyBillingAddressState:
          type: string
        CompanyBillingAddressPostCode:
          type: string
        CompanyBillingAddressCountryCode:
          type: string
        ContactEmail:
          type: string
        Firstname:
          type: string
        Lastname:
          type: string
        PositionTitle:
          type: string
        Mobile:
          type: string
        Phone:
          type: string
        UpdateExisting:
          type: boolean
    CreditNoteList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        CreditNotes:
          type: array
          items:
            $ref: '#/components/schemas/CreditNote'
    CreditNote:
      type: object
      properties:
        TransactionID:
          type: integer
          format: int64
        TransactionPrefix:
          type: string
        CreditNoteNumber:
          type: string
        CustomerIDFK:
          type: integer
          format: int32
        DateIssued:
          type: string
          format: date-time
        TransactionStatusCode:
          type: string
        Balance:
          type: number
          format: double
        CurrencyCode:
          type: string
        TotalAmount:
          type: number
          format: double
        Notes:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        CreditNoteAllocations:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteAllocation'
        CreditNoteLineItems:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteLineItem'
    CreditNoteAllocation:
      type: object
      properties:
        TransactionAllocationID:
          type: integer
          format: int64
        InvoiceTransactionIDFK:
          type: integer
          format: int64
        CreditNoteTransactionIDFK:
          type: integer
          format: int64
        AllocationDate:
          type: string
          format: date-time
        AllocationAmount:
          type: number
          format: double
    CreditNoteLineItem:
      type: object
      properties:
        TransactionLineItemID:
          type: integer
          format: int64
        Description:
          type: string
        Quantity:
          type: number
          format: double
        UnitPrice:
          type: number
          format: double
        TaxAmount:
          type: number
          format: double
        TaxIDFK:
          type: integer
          format: int32
        Amount:
          type: number
          format: double
        Discount:
          type: number
          format: double
    CurrencyList:
      type: object
      properties:
        Currencies:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
    Currency:
      type: object
      properties:
        CurrencyCode:
          type: string
        Name:
          type: string
        Symbol:
          type: string
        Symbol2:
          type: string
        DecimalPlaces:
          type: integer
          format: int32
    EstimateList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        Estimates:
          type: array
          items:
            $ref: '#/components/schemas/EstimateDetails'
    EstimateDetails:
      type: object
      properties:
        EstimateID:
          type: integer
          format: int64
        AccountIDFK:
          type: integer
          format: int32
        EstimatePrefix:
          type: string
        EstimateItemNumber:
          type: string
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        Subject:
          type: string
        DateIssued:
          type: string
          format: date-time
        DateSent:
          type: string
          format: date-time
        DueDate:
          type: string
          format: date-time
        EstimateStatusCode:
          type: string
        TaxAmount:
          type: number
          format: double
        EstimateTaxConfigCode:
          type: string
        Balance:
          type: number
          format: double
        CurrencyCode:
          type: string
        TotalAmount:
          type: number
          format: double
        ExchangeRate:
          type: number
          format: double
        Notes:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        LineItems:
          type: array
          items:
            $ref: '#/components/schemas/EstimateLineItemDetails'
        Links:
          $ref: '#/components/schemas/EstimateLinks'
        Issuer:
          $ref: '#/components/schemas/IssuerDetails'
        Recipient:
          $ref: '#/components/schemas/RecipientDetails'
    EstimateLineItemDetails:
      type: object
      properties:
        EstimateLineItemID:
          type: integer
          format: int64
        InventoryItemIDFK:
          type: integer
          format: int64
        InventoryItemName:
          type: string
        InventoryItemSKU:
          type: string
        Description:
          type: string
        Quantity:
          type: number
          format: double
        UnitPrice:
          type: number
          format: double
        TaxAmount:
          type: number
          format: double
        TaxIDFK:
          type: integer
          format: int32
        TaxCode:
          type: string
        TaxName:
          type: string
        Amount:
          type: number
          format: double
        Discount:
          type: number
          format: double
    EstimateLinks:
      type: object
      properties:
        ClientView:
          type: string
        View:
          type: string
        Edit:
          type: string
    IssuerDetails:
      type: object
      properties:
        BillingAddress:
          type: string
        BillingAddressLine:
          type: string
        BillingAddressCity:
          type: string
        BillingAddressState:
          type: string
        BillingAddressPostCode:
          type: string
        BillingCountryCode:
          type: string
        TaxNumber:
          type: string
    RecipientDetails:
      type: object
      properties:
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        RecipientFormattedBillingAddress:
          type: string
        RecipientBillingAddressLine:
          type: string
        RecipientBillingAddressCity:
          type: string
        RecipientBillingAddressState:
          type: string
        RecipientBillingAddressPostCode:
          type: string
        RecipientBillingAddressCountryCode:
          type: string
    NewEstimate:
      type: object
      properties:
        EstimatePrefix:
          type: string
          description: A prefix for the Estimate number. e.g. 'INV'. If left blank
            it will be set to the account default. Max length 20 characters.
        EstimateNumber:
          type: string
          description: Pass any string. If left blank it will use the next number
            in the auto incrementing sequence. If an integer is passed then the largest
            integer will be use as the seed to auto generate the next Estimate number
            in the sequence.
        CompanyIDFK:
          type: integer
          description: If left blank then you must specify Company Name.
          format: int32
        CompanyName:
          type: string
          description: If left blank then you must specify Company ID. Specified Name
            will be used to match existing customer record. If not matched then it
            will be used to create a new customer. First Name, Last Name and Email
            will only be used if it is a new company. If the Company name appears
            multiple times we will check the email address to find a matching company.
            If email address doesn't identify a matching company then the Estimate
            creation will be rejected.
        Firstname:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        Lastname:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        Email:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        CurrencyCode:
          type: string
          description: Expects ISO Standard 3 character currency code. If left blank
            the currency will default to account's currency in general setting. For
            existing companies this field will be ignored and the Estimate will use
            the currency of the customer. For new customers if the currency is not
            specified then account currency will be used otherwise the specified currency
            will be used.
        ExchangeRate:
          type: number
          description: Exchange rate is only valid for Estimates in currency other
            than default account currency. If not specified it will get the market
            rate based on the Date Issued.
          format: double
        InvoiceTemplateIDFK:
          type: integer
          description: If left blank the account default Estimate template will be
            used.
          format: int32
        Subject:
          type: string
          description: Plain UTF8 text. (no HTML). 255 characters max
        CustomerPONumber:
          type: string
          description: Plain UTF8 text. 100 characters max
        DateIssued:
          type: string
          description: If not specified it will use today's date. The date should
            be specified as local date.
          format: date-time
        DueDate:
          type: string
          description: It will be auto calculated based on the payment term and issue
            date. Due Date must be greater than or equal to Issue Date. If the Due
            Date is specified then Payment Terms will be set to -1 (Custom)
          format: date-time
        EstimateTaxConfigCode:
          type: string
          description: Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive).
            If left empty it will use the account default.
        Notes:
          type: string
          description: Plain UTF8 text. (no HTML). Max 2000 characters
        LineItems:
          description: Line item to be added to new Estimate
          type: array
          items:
            $ref: '#/components/schemas/NewEstimateLineItem'
      description: New Estimate to be created
    NewEstimateLineItem:
      description: Line item to be added to new Estimate
      required:
      - Quantity
      - UnitPrice
      type: object
      properties:
        InventoryItemIDFK:
          type: integer
          description: If not specified then Inventory Item Name must be specified.
          format: int32
        InventoryItemName:
          type: string
          description: If not specified then Inventory item ID must be specified.
            If specified and not matched to any existing inventory items then a new
            inventory item will be created. Max 200 characters.
        Description:
          type: string
          description: Plain UTF8 text. (no HTML)
        Quantity:
          type: number
          description: The quantity for the line item
          format: double
        UnitPrice:
          type: number
          description: The unit price for the lineitem.
          format: double
        TaxIDFK:
          type: integer
          description: If specified then it must match an existing Tax ID. If not
            specified then Tax Name and Tax Percent must be specified.
          format: int32
        TaxName:
          type: string
          description: Must be specified if the Tax ID is blank. If the Tax Name is
            specified it will be matched to an existing Tax Name or else a new Tax
            will be created.
        TaxPercent:
          type: number
          description: The Tax Percent will only be used if a new tax is being created.
          format: double
        Discount:
          type: number
          description: Enter 10.5 to give a 10.5% discount
          format: double
    ExpenseAttachmentUploadResult:
      type: object
      properties:
        FileAttachments:
          type: array
          items:
            $ref: '#/components/schemas/FileAttachmentDetails'
    FileAttachmentDetails:
      type: object
      properties:
        FileAttachmentID:
          type: integer
          format: int64
        SizeBytes:
          type: integer
          format: int64
        OriginalFilename:
          type: string
        PublicFileURL:
          type: string
        PreviewBaseURL:
          type: string
    ExpenseList:
      type: object
      properties:
        Expenses:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    ExpenseDetails:
      type: object
      properties:
        ExpenseID:
          type: integer
          format: int64
        UserIDFK:
          type: integer
          format: int32
        Firstname:
          type: string
        Lastname:
          type: string
        Email:
          type: string
        CustomerIDFK:
          type: integer
          format: int32
        CustomerName:
          type: string
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        ProjectCode:
          type: string
        TaskIDFK:
          type: integer
          format: int32
        TaskTitle:
          type: string
        ExpenseCategoryIDFK:
          type: integer
          format: int32
        ExpenseCategoryName:
          type: string
        ExpenseCategoryHasUnitPrice:
          type: boolean
        ExpenseCategoryUnitPrice:
          type: number
          format: double
        ExpenseCategoryUnitName:
          type: string
        CurrencyCode:
          type: string
        ExchangeRate:
          type: number
          format: double
        Quantity:
          type: number
          format: double
        Amount:
          type: number
          format: double
        TaxAmount:
          type: number
          format: double
        TaxIDFK:
          type: integer
          format: int32
        TaxName:
          type: string
        TransactionTaxConfigCode:
          type: string
        TransactionTaxConfigName:
          type: string
        isOfficialExchangeRate:
          type: boolean
        ExpenseApprovalStatusCode:
          type: string
        ExpensePaymentMethodIDFK:
          type: integer
          format: int32
        ExpensePaymentMethodName:
          type: string
        isChargeable:
          type: boolean
        ChargeableStatusCode:
          type: string
        isReimbursable:
          type: boolean
        ExpenseReimbursementStatusCode:
          type: string
        ExpenseReimbursementIDFK:
          type: integer
          format: int64
        ExpenseDate:
          type: string
          format: date-time
        FileAttachmentIDFK:
          type: integer
          format: int64
        AttachmentURL:
          type: string
        AttachmentPreviewURL:
          type: string
        Merchant:
          type: string
        MerchantTaxNumber:
          type: string
        Notes:
          type: string
        ExpenseReportIDFK:
          type: integer
          format: int64
        ExpenseReportName:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    NewExpense:
      type: object
      properties:
        ExpenseDate:
          type: string
          description: The date of the expense entry (Required)
          format: date-time
        UserIDFK:
          type: integer
          description: UserID for a Timesheet/Expense user in Avaza. If not provided,
            UserEmail field must be provided
          format: int32
        UserEmail:
          type: string
          description: The email address of a Timesheet/Expense user in Avaza. If
            not provided, UserIDFK field must be provided.
        ExpenseCategoryIDFK:
          type: integer
          description: The expense category to link the Expense to. If not provided,
            ExpenseCategoryName must be provided
          format: int32
        ExpenseCategoryName:
          type: string
          description: Must match an existing expense category name otherwise a new
            category will be created. If left blank Expense Category ID must be provided.
        isChargeable:
          type: boolean
          description: aka Billable. Defaults to false if not provided. If set to
            true, a CustomerIDFK or CustomerName must be provided.
        isReimbursable:
          type: boolean
          description: Defaults to false if not provided.
        Quantity:
          type: number
          description: Conditional - available for expenses that are assigned a unit
            priced based expense category. e.g Mileage
          format: double
        CustomerIDFK:
          type: integer
          description: The Avaza Customer ID to associate the Expense with. Either
            this field or CustomerName can be provided.
          format: int32
        CustomerName:
          type: string
          description: The name of an existing customer in Avaza. Must be an exact
            (case insensitive) match.
        ProjectIDFK:
          type: integer
          description: The Avaza project ID to associate the Expense with.
          format: int32
        ProjectName:
          type: string
          description: Can work for matching an expense to a project, but only if
            it's an exact match for a single project under the customer.
        TaskIDFK:
          type: integer
          description: (optional) TaskID of a Task to link the new Expense to. A Customer
            and Project must be provided also.
          format: int32
        CurrencyCode:
          type: string
          description: A 3-letter ISO CurrencyCode for the expense currency. (e.g.
            USD). If not provided, defaults to the Account base currency.
        ExchangeRate:
          type: number
          description: Optional (Only relevant if the expense currency is different
            to your account currency. If not provided we will look up the market exchange
            rate for you based on the expense date.) Exchange Rate = Expense Currency
            Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and
            Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)
          format: double
        Amount:
          type: number
          description: Expense Amount (Required). Must be &gt;= 0
          format: double
        TaxIDFK:
          type: integer
          description: Avaza Tax ID the expense belongs to. If left blank then Tax
            Name must be provided.
          format: int32
        TaxName:
          type: string
          description: Must exactly match an existing Tax Name that you have configured
            in Avaza Tax settings. If left blank then Tax ID must be provided.
        TransactionTaxConfigCode:
          type: string
          description: Optional - Enter "INC" if the tax amount is included in the
            expense amount otherwise enter "EX" when the amount exlcudes the tax.
            Defaults to "Ex". The tax amount on the expense will be autocalculated.
        GroupTripName:
          type: string
          description: Links the expense to a Grouping/Trip report. If no matching
            name found, creates a new Group/Trip Report name.
        ExpensePaymentMethodIDFK:
          type: integer
          description: (Optional) ID of Expense Payment Method.
          format: int32
        Merchant:
          type: string
          description: The name of the merchant.
        MerchantTaxNumber:
          type: string
          description: A Tax number identifier for the merchant.
        Notes:
          type: string
          description: Expense Notes
        VerifyAndSave:
          type: boolean
          description: Pass false if creating a draft expense. True otherwise.
        FileAttachmentIDs:
          type: array
          description: Array of File Attachment IDs to associate with this expense.
            The files need to have already been uploaded. Currently only accepts a
            single file.
          items:
            type: integer
            format: int64
    ExpenseDeleteResultSet:
      type: object
      properties:
        Results:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseDeleteResult'
    ExpenseDeleteResult:
      type: object
      properties:
        ExpenseID:
          type: integer
          format: int64
        Success:
          type: boolean
        ErrorMessage:
          type: string
    UpdateExpense:
      required:
      - ExpenseID
      - FieldsToUpdate
      type: object
      properties:
        ExpenseID:
          type: integer
          format: int64
        FieldsToUpdate:
          type: array
          items:
            type: string
        ExpenseDate:
          type: string
          description: The date of the expense entry
          format: date-time
        ExpenseCategoryIDFK:
          type: integer
          description: The expense category to link the Expense to.
          format: int32
        isChargeable:
          type: boolean
          description: aka Billable. Defaults to false if not provided. If set to
            true, a CustomerIDFK or CustomerName must be provided.
        isReimbursable:
          type: boolean
          description: Defaults to false if not provided.
        Quantity:
          type: number
          description: Conditional - available for expenses that are assigned a unit
            priced based expense category. e.g Mileage
          format: double
        CustomerIDFK:
          type: integer
          description: The Avaza Customer ID to associate the Expense with.
          format: int32
        ProjectIDFK:
          type: integer
          description: The Avaza project ID to associate the Expense with.
          format: int32
        TaskIDFK:
          type: integer
          description: (optional) TaskID of a Task to link the new Expense to. A Customer
            and Project must be provided also.
          format: int32
        CurrencyCode:
          type: string
          description: A 3-letter ISO CurrencyCode for the expense currency. (e.g.
            USD). If not provided, defaults to the Account base currency.
        ExchangeRate:
          type: number
          description: Optional (Only relevant if the expense currency is different
            to your account currency. If not provided we will look up the market exchange
            rate for you based on the expense date.) Exchange Rate = Expense Currency
            Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and
            Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)
          format: double
        Amount:
          type: number
          description: Expense Amount (Required). Must be &gt;= 0
          format: double
        TaxIDFK:
          type: integer
          description: Avaza Tax ID the expense belongs to.
          format: int32
        TransactionTaxConfigCode:
          type: string
          description: Optional - Enter "INC" if the tax amount is included in the
            expense amount otherwise enter "EX" when the amount exlcudes the tax.
            Defaults to "Ex". The tax amount on the expense will be autocalculated.
        GroupTripName:
          type: string
          description: Links the expense to a Grouping/Trip report. If no matching
            name found, creates a new Group/Trip Report name.
        ExpensePaymentMethodIDFK:
          type: integer
          description: (Optional) ID of Expense Payment Method.
          format: int32
        Merchant:
          type: string
          description: The name of the merchant.
        MerchantTaxNumber:
          type: string
          description: A Tax number identifier for the merchant.
        Notes:
          type: string
          description: Expense Notes
        VerifyAndSave:
          type: boolean
          description: Pass false if creating a draft expense. True otherwise.
        FileAttachmentIDs:
          type: array
          description: Array of File Attachment IDs to associate with this expense.
            The files need to have already been uploaded. Currently only accepts a
            single file.
          items:
            type: integer
            format: int64
    ExpenseCategoryList:
      type: object
      properties:
        Categories:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseCategoryDetails'
    ExpenseCategoryDetails:
      type: object
      properties:
        ExpenseCategoryID:
          type: integer
          format: int32
        Name:
          type: string
        Enabled:
          type: boolean
        hasUnitPrice:
          type: boolean
        UnitPrice:
          type: number
          format: double
        UnitName:
          type: string
    ExpenseGroupDropdownList:
      type: object
      properties:
        ExpenseGroups:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseGroupMinimal'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    ExpenseGroupMinimal:
      type: object
      properties:
        ExpenseGroupID:
          type: integer
          format: int64
        Name:
          type: string
    ExpenseMerchantDropdownList:
      type: object
      properties:
        ExpenseMerchants:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseMerchantMinimal'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    ExpenseMerchantMinimal:
      type: object
      properties:
        MerchantName:
          type: string
    ExpensePaymentMethodDropdownList:
      type: object
      properties:
        ExpensePaymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/ExpensePaymentMethodMinimal'
    ExpensePaymentMethodMinimal:
      type: object
      properties:
        ExpensePaymentMethodID:
          type: integer
          format: int64
        Name:
          type: string
    ExpenseSummaryRequest:
      type: object
      properties:
        GroupBy:
          type: array
          description: '(Optional) Combine one, two or three levels of Grouping. Combine
            these possible grouping values: "Category", "ChargeableStatus", "Merchant",
            "ApprovalStatus", "ReimbursementStatus", "Customer", "Project", "User",
            "Task", "Year", "Month", "Day", "Week".'
          items:
            type: string
        ExpenseDateFrom:
          type: string
          description: (Required) Filter for expenses with expense dates greater or
            equal to the specified date. e.g. 2019-01-25.
          format: date-time
        ExpenseDateTo:
          type: string
          description: (Required) Filter for expenses with an expense date smaller
            or equal to the specified  date. e.g. 2019-01-25.
          format: date-time
        UserID:
          type: array
          description: (Optional) Defaults to the current user. Provide one or more
            UserIDs of Users whose expenses should be retrieved. If the current user
            doesn't have impersonation rights, then they will only see their own data.
          items:
            type: integer
            format: int32
        ProjectID:
          type: integer
          description: (Optional) Filter by Project
          format: int32
    ExpenseSummaryResult:
      type: object
      properties:
        ExpenseDateFrom:
          type: string
          format: date-time
        ExpenseDateTo:
          type: string
          format: date-time
        TotalAmount:
          type: number
          format: double
        UserID:
          type: array
          items:
            type: integer
            format: int32
        GroupingLevels:
          type: array
          items:
            type: string
        GroupData:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseSummaryGroup'
    ExpenseSummaryGroup:
      type: object
      properties:
        GroupID:
          type: string
        GroupName:
          type: string
        TotalAmount:
          type: number
          format: double
        GroupData:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseSummaryGroup'
    FixedAmountList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        FixedAmounts:
          type: array
          items:
            $ref: '#/components/schemas/FixedAmountDetails'
    FixedAmountDetails:
      type: object
      properties:
        FixedAmountID:
          type: integer
          format: int32
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        ProjectCode:
          type: string
        TaskIDFK:
          type: integer
          format: int32
        TaskTitle:
          type: string
        InventoryItemIDFK:
          type: integer
          format: int64
        InventoryItemName:
          type: string
        Amount:
          type: number
          format: double
        Notes:
          type: string
        isInvoiced:
          type: boolean
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        UpdatedByUserIDFK:
          type: integer
          format: int32
    InventoryList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        Inventory:
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'
    InventoryItem:
      type: object
      properties:
        InventoryItemID:
          type: integer
          format: int64
        Name:
          type: string
        Description:
          type: string
        SKU:
          type: string
        CostPrice:
          type: number
          format: double
        SalePrice:
          type: number
          format: double
        SaleTaxIDFK:
          type: integer
          format: int32
        isHidden:
          type: boolean
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    InvoiceList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        Invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    Invoice:
      type: object
      properties:
        TransactionID:
          type: integer
          format: int64
        AccountIDFK:
          type: integer
          format: int32
        TransactionPrefix:
          type: string
        InvoiceNumber:
          type: string
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        Subject:
          type: string
        DateIssued:
          type: string
          format: date-time
        DateSent:
          type: string
          format: date-time
        DueDate:
          type: string
          format: date-time
        TransactionStatusCode:
          type: string
        TaxAmount:
          type: number
          format: double
        TransactionTaxConfigCode:
          type: string
        Balance:
          type: number
          format: double
        CurrencyCode:
          type: string
        TotalAmount:
          type: number
          format: double
        ExchangeRate:
          type: number
          format: double
        Notes:
          type: string
        CustomerPONumber:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        LineItems:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        Links:
          $ref: '#/components/schemas/InvoiceLinks'
        Issuer:
          $ref: '#/components/schemas/IssuerDetails'
        Recipient:
          $ref: '#/components/schemas/RecipientDetails'
    InvoiceLineItem:
      type: object
      properties:
        TransactionLineItemID:
          type: integer
          format: int64
        InventoryItemIDFK:
          type: integer
          format: int64
        InventoryItemName:
          type: string
        InventoryItemSKU:
          type: string
        Description:
          type: string
        Quantity:
          type: number
          format: double
        UnitPrice:
          type: number
          format: double
        TaxAmount:
          type: number
          format: double
        TaxIDFK:
          type: integer
          format: int32
        TaxCode:
          type: string
        TaxName:
          type: string
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        Amount:
          type: number
          format: double
        Discount:
          type: number
          format: double
    InvoiceLinks:
      type: object
      properties:
        ClientView:
          type: string
        View:
          type: string
        Edit:
          type: string
    NewInvoice:
      type: object
      properties:
        TransactionPrefix:
          type: string
          description: A prefix for the Invoice number. e.g. 'INV'. If left blank
            it will be set to the account default. Max length 20 characters.
        InvoiceNumber:
          type: string
          description: Pass any string. If left blank it will use the next number
            in the auto incrementing sequence. If an integer is passed then the largest
            integer will be use as the seed to auto generate the next invoice number
            in the sequence.
        CompanyIDFK:
          type: integer
          description: If left blank then you must specify Company Name.
          format: int32
        CompanyName:
          type: string
          description: If left blank then you must specify Company ID. Specified Name
            will be used to match existing customer record. If not matched then it
            will be used to create a new customer. First Name, Last Name and Email
            will only be used if it is a new company. If the Company name appears
            multiple times we will check the email address to find a matching company.
            If email address doesn't identify a matching company then the invoice
            creation will be rejected.
        Firstname:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        Lastname:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        Email:
          type: string
          description: Specified value will be used to create a new customer contact
            only if a new customer is being created.
        CurrencyCode:
          type: string
          description: Expects ISO Standard 3 character currency code. If left blank
            the currency will default to account's currency in general setting. For
            existing companies this field will be ignored and the invoice will use
            the currency of the customer. For new customers if the currency is not
            specified then account currency will be used otherwise the specified currency
            will be used.
        ExchangeRate:
          type: number
          description: Exchange rate is only valid for invoices in currency other
            than default account currency. If not specified it will get the market
            rate based on the Date Issued.
          format: double
        InvoiceTemplateIDFK:
          type: integer
          description: If left blank the account default invoice template will be
            used.
          format: int32
        Subject:
          type: string
          description: Plain UTF8 text. (no HTML). 255 characters max
        CustomerPONumber:
          type: string
          description: Plain UTF8 text. 100 characters max
        DateIssued:
          type: string
          description: If not specified it will use today's date. The date should
            be specified as local date.
          format: date-time
        PaymentTerms:
          type: integer
          description: " \"If left blank we will set it to customer default. If specified\
            \ then it must match one of your existing pre configured payment term\
            \ periods. Your account starts with:\r\n(-1 --- Custom, 0 --- Upon Receipt,\
            \ 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 ---\
            \ 60 Days)"
          format: int32
        DueDate:
          type: string
          description: It will be auto calculated based on the payment term and issue
            date. Due Date must be greater than or equal to Issue Date. If the Due
            Date is specified then Payment Terms will be set to -1 (Custom)
          format: date-time
        TransactionTaxConfigCode:
          type: string
          description: Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive).
            If left empty it will use the account default.
        Notes:
          type: string
          description: Plain UTF8 text. (no HTML). Max 2000 characters
        LineItems:
          description: Line item to be added to new invoice
          type: array
          items:
            $ref: '#/components/schemas/NewInvoiceLineItem'
      description: New invoice to be created
    NewInvoiceLineItem:
      description: Line item to be added to new invoice
      required:
      - Quantity
      - UnitPrice
      type: object
      properties:
        InventoryItemIDFK:
          type: integer
          description: If not specified then Inventory Item Name must be specified.
          format: int32
        InventoryItemName:
          type: string
          description: If not specified then Inventory item ID must be specified.
            If specified and not matched to any existing inventory items then a new
            inventory item will be created. Max 200 characters.
        Description:
          type: string
          description: Plain UTF8 text. (no HTML)
        Quantity:
          type: number
          description: The quantity for the line item
          format: double
        UnitPrice:
          type: number
          description: The unit price for the lineitem.
          format: double
        TaxIDFK:
          type: integer
          description: If specified then it must match an existing Tax ID. If not
            specified then Tax Name and Tax Percent must be specified.
          format: int32
        TaxName:
          type: string
          description: Must be specified if the Tax ID is blank. If the Tax Name is
            specified it will be matched to an existing Tax Name or else a new Tax
            will be created.
        TaxPercent:
          type: number
          description: The Tax Percent will only be used if a new tax is being created.
          format: double
        Discount:
          type: number
          description: Enter 10.5 to give a 10.5% discount
          format: double
        ProjectIDFK:
          type: integer
          description: Optional. Project ID of an Avaza Project that belongs to this
            customer, so line item is attributed to that Project for reporting.
          format: int32
    PaymentList:
      type: object
      properties:
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
        Payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    Payment:
      type: object
      properties:
        TransactionID:
          type: integer
          format: int64
        AccountIDFK:
          type: integer
          format: int32
        TransactionPrefix:
          type: string
        PaymentNumber:
          type: string
        TransactionReference:
          type: string
        CustomerIDFK:
          type: integer
          format: int32
        DateIssued:
          type: string
          format: date-time
        TransactionStatusCode:
          type: string
        PaymentProviderCode:
          type: string
        ExchangeRate:
          type: number
          format: double
        Balance:
          type: number
          format: double
        CurrencyCode:
          type: string
        TotalAmount:
          type: number
          format: double
        Notes:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        PaymentAllocations:
          type: array
          items:
            $ref: '#/components/schemas/PaymentAllocation'
    PaymentAllocation:
      type: object
      properties:
        TransactionAllocationID:
          type: integer
          format: int64
        InvoiceTransactionIDFK:
          type: integer
          format: int64
        PaymentTransactionIDFK:
          type: integer
          format: int64
        AllocationDate:
          type: string
          format: date-time
        AllocationAmount:
          type: number
          format: double
    NewPayment:
      type: object
      properties:
        Amount:
          type: number
          format: double
        PaymentNumber:
          type: string
          description: Optional. If not specified will be automatically generated
        DateIssued:
          type: string
          description: Date of Payment. If not specified, assumes today.
          format: date-time
        TransactionPrefix:
          type: string
          description: Optional to override the default prefix added to Payment Numbers
        CustomerIDFK:
          type: integer
          description: Only required if no invoice allocations specified.
          format: int32
        ExchangeRate:
          type: number
          description: Optional. Only used when the Customer's currecy is different
            from the Avaza account's base currency. Specifies the exchange rate that
            should apply between the customer currency and base currency. If not provided
            we will obtain an up to date exchange rate for the Payment Issue Date.
          format: double
        TransactionReference:
          type: string
          description: 'Optional for storing the reference # of the payment method.'
        Notes:
          type: string
        PaymentProviderCode:
          type: string
          description: Optional for storing the payment provider who was the source
            of funds.
        PaymentAllocations:
          type: array
          description: List of amounts within this payment that are allocated to invoices.
            The sum of these be less than or equal to the payment amount.
          items:
            $ref: '#/components/schemas/NewPaymentAllocation'
    NewPaymentAllocation:
      type: object
      properties:
        InvoiceTransactionIDFK:
          type: integer
          description: The Avaza Invoice TransactionID that is having a payment amount
            allocated to it.
          format: int64
        AllocationAmount:
          type: number
          description: The Amount being allocated to the invoice. Expects same currency
            as invoice currency
          format: double
        AllocationDate:
          type: string
          description: Optional. Defaults to the current time in the Avaza account's
            timezone. The date the allocation is applied to the invoice. Can be difference
            from the Payment Date when doing prepayments etc.
          format: date-time
    ProjectDropdownList:
      type: object
      properties:
        companies:
          type: array
          description: List of Projects grouped by Customer Name
          items:
            $ref: '#/components/schemas/ProjectCompanyGroup'
        pageNumber:
          type: integer
          description: Current page number (1 based)
          format: int32
        PageSize:
          type: integer
          description: Current page size
          format: int32
        hasMore:
          type: boolean
          description: More records probably exist
    ProjectCompanyGroup:
      type: object
      properties:
        CompanyID:
          type: integer
          format: int64
        CompanyName:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDropdownSelection'
    ProjectDropdownSelection:
      type: object
      properties:
        ProjectID:
          type: integer
          format: int64
        ProjectCode:
          type: string
        Title:
          type: string
    ProjectList:
      type: object
      properties:
        Projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectListDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    ProjectListDetails:
      type: object
      properties:
        ProjectID:
          type: integer
          format: int32
        ProjectCode:
          type: string
        Title:
          type: string
        isArchived:
          type: boolean
        Notes:
          type: string
        CompanyName:
          type: string
        CompanyIDFK:
          type: integer
          format: int32
        isTaskRequiredOnTimesheet:
          type: boolean
        DefaultAccountTaskTypeIDFK:
          type: integer
          format: int32
        DefaultAccountTaskTypeName:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    NewProjectModel:
      required:
      - ProjectTitle
      type: object
      properties:
        CompanyIDFK:
          type: integer
          description: An ID of a company in Avaza to create the Project under. You
            must provide either a CompanyID, or a CompanyName
          format: int32
        CompanyName:
          type: string
          description: The name for a Company to create the project under. Will create
            company unless it matches an existing company name
        CurrencyCode:
          type: string
          description: The ISO 3 letter currency code to use when creating a new Company.
            If not provided, the account's default currency will be used.
        ProjectTitle:
          type: string
          description: The title of the new project. (255 characters max)
        ProjectCode:
          type: string
          description: Used when Manual Project Codes are enabled
        ProjectNotes:
          type: string
          description: Any descriptive notes about the project. (2000 characters max)
        TimesheetApprovalRequiredbyDefault:
          type: boolean
        PopulateDefaultProjectMembers:
          type: boolean
          description: Defaults to true.
        isTaskRequiredOnTimesheet:
          type: boolean
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        BudgetAmount:
          type: number
          format: double
        BudgetHours:
          type: number
          format: double
        ProjectStatusCode:
          type: string
        ProjectCategoryIDFK:
          type: integer
          format: int32
    ProjectDetails:
      type: object
      properties:
        ProjectID:
          type: integer
          format: int32
        Title:
          type: string
        ProjectCode:
          type: string
        Notes:
          type: string
        CompanyName:
          type: string
        CompanyIDFK:
          type: integer
          format: int32
        ProjectOwnerUserIDFK:
          type: integer
          format: int32
        ProjectStatusCode:
          type: string
          description: 'Possible values: NotStarted, InProgress, Complete'
        isArchived:
          type: boolean
        ProjectBillableTypeCode:
          type: string
          description: 'Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly,
            ProjectHourly'
        ProjectBudgetTypeCode:
          type: string
          description: 'Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees,
            ProjectHours'
        BudgetAmount:
          type: number
          format: double
        BudgetHours:
          type: number
          format: double
        ProjectHourlyRate:
          type: number
          format: double
        ProjectCategoryIDFK:
          type: integer
          format: int32
        ProjectCategoryName:
          type: string
        isTaskRequiredOnTimesheet:
          type: boolean
        DefaultAccountTaskTypeIDFK:
          type: integer
          format: int32
        DefaultAccountTaskTypeName:
          type: string
        ProjectCategoryColor:
          type: string
          description: 'Html Hex Color Code starting with #'
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        Sections:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSectionDetails'
        Members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberDetails'
        ProjectTags:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTagItem'
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    ProjectSectionDetails:
      type: object
      properties:
        SectionID:
          type: integer
          format: int32
        Title:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        DisplayOrder:
          type: integer
          format: int32
    ProjectMemberDetails:
      type: object
      properties:
        UserIDFK:
          type: integer
          format: int32
        Firstname:
          type: string
        Lastname:
          type: string
        Fullname:
          type: string
        Email:
          type: string
        CostAmount:
          type: number
          format: double
        RateAmount:
          type: number
          format: double
        BudgetAmount:
          type: number
          format: double
        isMemberDisabled:
          type: boolean
        isProjectManager:
          type: boolean
        isTimesheetAllowed:
          type: boolean
        isTimesheetApprover:
          type: boolean
        isTimesheetApprovalRequired:
          type: boolean
        canCreateTasks:
          type: boolean
        canDeleteTasks:
          type: boolean
        canCommentOnTasks:
          type: boolean
        canUpdateTasks:
          type: boolean
    ProjectTagItem:
      type: object
      properties:
        ProjectTagID:
          type: integer
          format: int32
        Name:
          type: string
    UpdateProjectModel:
      type: object
      properties:
        ProjectID:
          type: integer
          description: The ID of the Project to update
          format: int32
        FieldsToUpdate:
          type: array
          description: ""
          items:
            type: string
        ProjectTitle:
          type: string
          description: (optional) An updated project title. (255 characters max)
        ProjectNotes:
          type: string
          description: (optional) Any descriptive notes about the project. (2000 characters
            max)
        TimesheetApprovalRequiredbyDefault:
          type: boolean
          description: Whether timesheet approval should be required by default for
            newly added project members.
        isTaskRequiredOnTimesheet:
          type: boolean
          description: Whether timesheets entered against this project require a task
            to be selected.
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        BudgetAmount:
          type: number
          format: double
        BudgetHours:
          type: number
          format: double
        ProjectStatusCode:
          type: string
          description: 'Update the project status (string, optional): (Possible values:
            NotStarted, InProgress, Complete, OnHold)'
        ProjectCategoryIDFK:
          type: integer
          format: int32
        ProjectBillableTypeCode:
          type: string
          description: 'The billing method of the project. (string, optional) Possible
            values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly'
        ProjectBudgetTypeCode:
          type: string
          description: 'The project budgeting type. (string, optional) Possible values:
            NoBudget, PersonHours, ProjectFees, ProjectHours, CategoryHours'
    NewProjectMember:
      type: object
      properties:
        isProjectManager:
          type: boolean
        isTimesheetAllowed:
          type: boolean
        isTimesheetApprover:
          type: boolean
        isTimesheetApprovalRequired:
          type: boolean
        canCreateTasks:
          type: boolean
        canDeleteTasks:
          type: boolean
        canCommentOnTasks:
          type: boolean
        canUpdateTasks:
          type: boolean
        ProjectIDFK:
          type: integer
          description: Required. The ProjectID
          format: int32
        UserIDFK:
          type: integer
          description: Required. The UserID to assign
          format: int32
        CostAmount:
          type: number
          description: Optional. If not provided, defaults to the User's default Cost
            Amount.
          format: double
        RateAmount:
          type: number
          description: Optional. If not provided, defaults to the User's default Rate
            Amount.
          format: double
        BudgetAmount:
          type: number
          description: Optional
          format: double
    ProjectTimesheetCategoryList:
      type: object
      properties:
        Categories:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTimesheetCategoryDetails'
    ProjectTimesheetCategoryDetails:
      type: object
      properties:
        TimeSheetCategoryIDFK:
          type: integer
          format: int32
        AccountIDFK:
          type: integer
          format: int32
        ProjectIDFK:
          type: integer
          format: int32
        Name:
          type: string
        isBillable:
          type: boolean
        RateAmount:
          type: number
          format: double
        BudgetHours:
          type: number
          format: double
        CostAmount:
          type: number
          format: double
    ScheduleAssignmentList:
      type: object
      properties:
        ScheduleAssignments:
          type: array
          items:
            $ref: '#/components/schemas/ScheduleAssignmentDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    ScheduleAssignmentDetails:
      type: object
      properties:
        ScheduleAssignmentID:
          type: integer
          format: int64
        AccountIDFK:
          type: integer
          format: int32
        UserIDFK:
          type: integer
          format: int32
        ScheduleSeriesIDFK:
          type: integer
          format: int64
        ScheduleDate:
          type: string
          format: date-time
        Duration:
          type: number
          format: double
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    CreateBooking:
      type: object
      properties:
        UserIDFK:
          type: integer
          format: int32
        HoursPerDay:
          type: number
          format: double
        TotalDuration:
          type: number
          format: double
        DurationType:
          type: string
        ScheduleOnDaysOff:
          type: boolean
        ProjectIDFK:
          type: integer
          format: int32
        CategoryIDFK:
          type: integer
          format: int32
        TaskIDFK:
          type: integer
          format: int32
        Notes:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
    ScheduleSeriesDetails:
      type: object
      properties:
        ScheduleSeriesID:
          type: integer
          format: int64
        AccountIDFK:
          type: integer
          format: int32
        UserIDFK:
          type: integer
          format: int32
        Firstname:
          type: string
        Lastname:
          type: string
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        TimeSheetCategoryIDFK:
          type: integer
          format: int32
        TimeSheetCategoryName:
          type: string
        LeaveTypeIDFK:
          type: integer
          format: int32
        LeaveTypeName:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
        HoursPerDay:
          type: number
          format: double
        TotalDuration:
          type: number
          format: double
        ScheduleOnDaysOff:
          type: boolean
        Notes:
          type: string
        TaskIDFK:
          type: integer
          format: int32
        TaskTitle:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        UpdatedByUserIDFK:
          type: integer
          format: int32
    CreateLeave:
      type: object
      properties:
        LeaveUserIDFK:
          type: integer
          format: int32
        LeaveNotify:
          type: boolean
        LeaveHoursPerDay:
          type: number
          format: double
        LeaveTypeIDFK:
          type: integer
          format: int32
        LeaveNotes:
          type: string
        LeaveStartDate:
          type: string
          format: date-time
        LeaveEndDate:
          type: string
          format: date-time
    EditLeave:
      type: object
      properties:
        ScheduleSeriesID:
          type: integer
          format: int64
        UserIDFK:
          type: integer
          format: int32
        HoursPerDay:
          type: number
          format: double
        LeaveTypeIDFK:
          type: integer
          format: int32
        Notes:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
    EditBooking:
      type: object
      properties:
        ScheduleSeriesID:
          type: integer
          format: int64
        UserIDFK:
          type: integer
          format: int32
        HoursPerDay:
          type: number
          format: double
        TotalDuration:
          type: number
          format: double
        DurationType:
          type: string
        ScheduleOnDaysOff:
          type: boolean
        ProjectIDFK:
          type: integer
          format: int32
        CategoryIDFK:
          type: integer
          format: int32
        TaskIDFK:
          type: integer
          format: int32
        Notes:
          type: string
        StartDate:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
    ScheduleSeriesList:
      type: object
      properties:
        ScheduleSeries:
          type: array
          items:
            $ref: '#/components/schemas/ScheduleSeriesDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    SectionList:
      type: object
      properties:
        Sections:
          type: array
          items:
            $ref: '#/components/schemas/SectionDetails'
        TotalCount:
          type: integer
          format: int32
    SectionDetails:
      type: object
      properties:
        SectionID:
          type: integer
          format: int32
        ProjectIDFK:
          type: integer
          format: int32
        Title:
          type: string
        DisplayOrder:
          type: integer
          format: int32
        StartDateUTC:
          type: string
          format: date-time
        StartDate:
          type: string
          format: date-time
        EndDateUTC:
          type: string
          format: date-time
        EndDate:
          type: string
          format: date-time
    NewSection:
      type: object
      properties:
        ProjectIDFK:
          type: integer
          format: int32
        Title:
          type: string
        StartDateUTC:
          type: string
          format: date-time
        EndDateUTC:
          type: string
          format: date-time
    TaskDropdownList:
      type: object
      properties:
        sections:
          type: array
          description: List of Task grouped by Section
          items:
            $ref: '#/components/schemas/TaskSectionGroup'
        pageNumber:
          type: integer
          description: Current page number (1 based)
          format: int32
        PageSize:
          type: integer
          description: Current page size
          format: int32
        hasMore:
          type: boolean
          description: More records probably exist
    TaskSectionGroup:
      type: object
      properties:
        SectionTitle:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskDropdownSelection'
    TaskDropdownSelection:
      type: object
      properties:
        TaskID:
          type: string
        Title:
          type: string
    TaskList:
      type: object
      properties:
        Tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    TaskDetails:
      type: object
      properties:
        TaskID:
          type: integer
          format: int32
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        ProjectCode:
          type: string
        SectionTitle:
          type: string
        SectionIDFK:
          type: integer
          format: int32
        Title:
          type: string
        Description:
          type: string
        DescriptionNoHTML:
          type: string
        AssignedToFirstname:
          type: string
        AssignedToLastname:
          type: string
        AssignedToEmail:
          type: string
        AssignedToUserIDFK:
          type: string
        DateStart:
          type: string
          format: date-time
        DateDue:
          type: string
          format: date-time
        DateCompleted:
          type: string
          format: date-time
        EstimatedEffort:
          type: number
          format: double
        ActualTime:
          type: number
          format: double
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/TagItem'
        AccountTaskTypeIDFK:
          type: integer
          format: int32
        TaskStatusCode:
          type: string
        TaskStatusName:
          type: string
        isCompleteStatus:
          type: boolean
        PercentComplete:
          type: number
          format: double
        TaskPriorityCode:
          type: string
        TaskPriorityName:
          type: string
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
    TagItem:
      type: object
      properties:
        TagID:
          type: integer
          format: int64
        Name:
          type: string
        Color:
          type: string
    UpdateTask:
      required:
      - FieldsToUpdate
      - TaskID
      type: object
      properties:
        TaskID:
          type: integer
          format: int32
        FieldsToUpdate:
          type: array
          items:
            type: string
        SectionIDFK:
          type: integer
          format: int32
        Title:
          type: string
        Description:
          type: string
        AssignedToUserIDFK:
          type: integer
          format: int32
        DateStart:
          type: string
          format: date-time
        DateDue:
          type: string
          format: date-time
        TaskPriorityCode:
          type: string
        EstimatedEffort:
          type: number
          description: Decimal hours
          format: double
        TaskStatusCode:
          type: string
        PercentComplete:
          type: integer
          format: int32
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/NewTag'
    NewTag:
      type: object
      properties:
        Name:
          type: string
        Color:
          type: string
          description: 'Hex color code in format #000000'
    NewTask:
      required:
      - ProjectIDFK
      - SectionIDFK
      - Title
      type: object
      properties:
        ProjectIDFK:
          type: integer
          format: int32
        SectionIDFK:
          type: integer
          format: int32
        AccountTaskTypeIDFK:
          type: integer
          format: int32
        Title:
          type: string
        Description:
          type: string
        AssignedToUserIDFK:
          type: integer
          format: int32
        TaskPriorityCode:
          type: string
        DateStart:
          type: string
          format: date-time
        DateDue:
          type: string
          format: date-time
        EstimatedEffort:
          type: number
          description: Decimal hours
          format: double
        Tags:
          type: array
          description: Collection of tags specifying Name and Color (Hex)
          items:
            $ref: '#/components/schemas/NewTag'
    TaskStatusList:
      type: object
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatusDetails'
    TaskStatusDetails:
      type: object
      properties:
        TaskStatusCode:
          type: string
        Name:
          type: string
        Color:
          type: string
        DisplayOrder:
          type: integer
          format: int32
        isComplete:
          type: boolean
        AccountTaskTypeIDFK:
          type: integer
          format: int32
        TaskTypeName:
          type: string
    TaskTypeList:
      type: object
      properties:
        tasktypes:
          type: array
          items:
            $ref: '#/components/schemas/AccountTaskTypeDetails'
    AccountTaskTypeDetails:
      type: object
      properties:
        AccountTaskTypeID:
          type: integer
          format: int32
        Name:
          type: string
        Icon:
          type: string
        IconType:
          type: string
        isDefault:
          type: boolean
    TaxList:
      type: object
      properties:
        Taxes:
          type: array
          items:
            $ref: '#/components/schemas/TaxItem'
    TaxItem:
      type: object
      properties:
        TaxID:
          type: integer
          format: int32
        TaxCode:
          type: string
        Name:
          type: string
        CalculatedPercent:
          type: number
          format: double
        TaxComponents:
          type: array
          items:
            $ref: '#/components/schemas/TaxComponent'
    TaxComponent:
      type: object
      properties:
        TaxComponentID:
          type: integer
          format: int32
        TaxIDFK:
          type: integer
          format: int32
        ComponentTaxCode:
          type: string
        Name:
          type: string
        Percentage:
          type: number
          format: double
        isCompound:
          type: boolean
    TimesheetList:
      type: object
      properties:
        Timesheets:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetDetails'
        TotalCount:
          type: integer
          format: int32
        PageNumber:
          type: integer
          format: int32
        PageSize:
          type: integer
          format: int32
    TimesheetDetails:
      type: object
      properties:
        TimesheetEntryID:
          type: integer
          format: int64
        UserIDFK:
          type: integer
          format: int32
        Firstname:
          type: string
        Lastname:
          type: string
        Email:
          type: string
        ProjectIDFK:
          type: integer
          format: int32
        ProjectTitle:
          type: string
        ProjectCode:
          type: string
        CustomerIDFK:
          type: integer
          format: int32
        CustomerName:
          type: string
        TimesheetCategoryIDFK:
          type: integer
          format: int32
        CategoryName:
          type: string
        Duration:
          type: number
          format: double
        TimesheetEntryApprovalStatusCode:
          type: string
        HasTimer:
          type: boolean
        TimerStartedAtUTC:
          type: string
          format: date-time
        isBillable:
          type: boolean
        isInvoiced:
          type: boolean
        EntryDate:
          type: string
          format: date-time
        StartTimeLocal:
          type: string
          format: date-time
        StartTimeUTC:
          type: string
          format: date-time
        EndTimeLocal:
          type: string
          format: date-time
        EndTimeUTC:
          type: string
          format: date-time
        TimesheetUserTimeZone:
          type: string
        Notes:
          type: string
        TaskIDFK:
          type: integer
          format: int32
        TaskTitle:
          type: string
        InvoiceIDFK:
          type: integer
          format: int64
        InvoiceLineItemIDFK:
          type: integer
          format: int64
        DateCreated:
          type: string
          format: date-time
        DateUpdated:
          type: string
          format: date-time
        DateApproved:
          type: string
          format: date-time
        ApprovedBy:
          type: string
        CustomMetadata:
          type: string
    NewTimesheet:
      type: object
      properties:
        UserIDFK:
          type: integer
          description: UserID for a Timesheet user in Avaza
          format: int32
        ProjectIDFK:
          type: integer
          description: The project to associate the timesheet with.
          format: int32
        TimesheetCategoryIDFK:
          type: integer
          description: The Project timesheet category to link the timesheet to
          format: int32
        Duration:
          type: number
          description: The duration of the timesheet, in decimal hours. If null or
            0, a timer will be started.
          format: double
        isInvoiced:
          type: boolean
          description: Optional. False by default. Allows you to mark the timesheet
            as invoiced in an external system.
        EntryDate:
          type: string
          description: The date of the timesheet entry, with an optional start time
            component.
          format: date-time
        hasStartEndTime:
          type: boolean
          description: If true, the start time will be take from the time component
            of the Entry Date field, and the end time will be calculated by adding
            the Duration to the StartDate
        Notes:
          type: string
          description: Timesheet Notes
        TaskIDFK:
          type: integer
          description: Optional. Link the timesheet to a specific task
          format: int32
        CustomMetadata:
          type: string
          description: Optional. free nvarchar field available via Api to store any
            additional metadata against a timesheet. We suggest you use Json or your
            preferred serialisation format. 1000 characters max.
    UpdateTimesheetModel:
      required:
      - FieldsToUpdate
      - ProjectIDFK
      - TimeSheetEntryID
      type: object
      properties:
        TimeSheetEntryID:
          type: integer
          format: int64
        FieldsToUpdate:
          type: array
          items:
            type: string
        ProjectIDFK:
          type: integer
          format: int32
        TimesheetCategoryIDFK:
          type: integer
          format: int32
        TaskIDFK:
          type: integer
          format: int32
        Duration:
          type: number
          format: double
        EntryDate:
          type: string
          format: date-time
        hasStartEndTime:
          type: boolean
        Notes:
          type: string
        CustomMetadata:
          type: string
          description: Optional. free nvarchar field available via Api to store any
            additional metadata against a timesheet. We suggest you use Json or your
            preferred serialisation format. 1000 characters max.
    TimesheetSummaryRequest:
      type: object
      properties:
        GroupBy:
          type: array
          description: '(Optional) Combine one, two or three levels of Grouping. Combine
            these possible grouping values: "Customer", "Project", "Category", "User",
            "Task", "Year", "Month", "Day", "Week".'
          items:
            type: string
        EntryDateFrom:
          type: string
          description: (Required) Filter for timesheets greater or equal to the specified
            date. e.g. 2019-01-25. You can optionally include a time component, otherwise
            it assumes 00:00
          format: date-time
        EntryDateTo:
          type: string
          description: (Required) Filter for timesheets with an entry date smaller
            or equal to the specified  date. e.g. 2019-01-25. You can optionally include
            a time component, otherwise it assumes 00:00
          format: date-time
        UserID:
          type: array
          description: (Optional) Defaults to the current user. Provide one or more
            UserIDs of Users whose timesheets should be retrieved. If the current
            user doesn't have impersonation rights, then they will only see their
            own data.
          items:
            type: integer
            format: int32
        ProjectID:
          type: integer
          description: (Optional) Filter by Project
          format: int32
        isBillable:
          type: boolean
          description: (Optional) Filter by the billable status of Timesheets.
        isInvoiced:
          type: boolean
          description: (Optional) Filter for timesheets by whether they have been
            Invoiced or not.
    TimesheetSummaryResult:
      type: object
      properties:
        EntryDateFrom:
          type: string
          format: date-time
        EntryDateTo:
          type: string
          format: date-time
        TotalHours:
          type: number
          format: double
        BillableHours:
          type: number
          format: double
        UserID:
          type: array
          items:
            type: integer
            format: int32
        GroupingLevels:
          type: array
          items:
            type: string
        GroupData:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetSummaryGroup'
    TimesheetSummaryGroup:
      type: object
      properties:
        GroupID:
          type: string
        GroupName:
          type: string
        TotalHours:
          type: number
          format: double
        BillableHours:
          type: number
          format: double
        GroupData:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetSummaryGroup'
    UserList:
      type: object
      properties:
        Users:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
    UserDetails:
      type: object
      properties:
        UserID:
          type: integer
          format: int32
        AccountIDFK:
          type: integer
          format: int32
        Email:
          type: string
        Firstname:
          type: string
        Lastname:
          type: string
        PositionTitle:
          type: string
        Phone:
          type: string
        Mobile:
          type: string
        TimeZone:
          type: string
          description: Windows Timezone ID
        IANATimezone:
          type: string
          description: IANA tz database timezone name
        isTeamMember:
          type: boolean
        CompanyIDFK:
          type: integer
          format: int32
        CompanyName:
          type: string
        DefaultBillableRate:
          type: number
          format: double
        DefaultCostRate:
          type: number
          format: double
        MondayAvailableHours:
          type: number
          format: double
        TuesdayAvailableHours:
          type: number
          format: double
        WednesdayAvailableHours:
          type: number
          format: double
        ThursdayAvailableHours:
          type: number
          format: double
        FridayAvailableHours:
          type: number
          format: double
        SaturdayAvailableHours:
          type: number
          format: double
        SundayAvailableHours:
          type: number
          format: double
        Roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDetails'
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/UserTagDetails'
    RoleDetails:
      type: object
      properties:
        RoleCode:
          type: string
        RoleName:
          type: string
    UserTagDetails:
      type: object
      properties:
        UserTagID:
          type: integer
          format: int32
        UserTagName:
          type: string
    CreateSubscription:
      required:
      - event
      - target_url
      type: object
      properties:
        target_url:
          type: string
          description: The URL that should be notified of the event.
        event:
          type: string
          description: 'The event code to be notified about. Possible values: company_created,
            contact_created, invoice_created, invoice_sent, project_created, task_created'
        secret:
          type: string
          description: Optional Secret string (255 char max). If provided, the secret
            will be BASE 64 encoded and used as a basic authentication http header
            with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]"
      description: New Subscription to be Created
    SubscribeResult:
      type: object
      properties:
        ID:
          type: integer
          format: int32
    WebhookList:
      type: object
      properties:
        Webhooks:
          type: array
          items:
            $ref: '#/components/schemas/WebhookDetails'
    WebhookDetails:
      type: object
      properties:
        SubscriptionID:
          type: integer
          format: int32
        EventCode:
          type: string
        NotificationURL:
          type: string
        UserIDFK:
          type: integer
          format: int32
  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth2 Implicit Grant
      flows:
        implicit:
          authorizationUrl: https://any.avaza.com/oauth2/authorize
          scopes:
            read_contacts: Read access to Customers, Contacts
            read_account: Read access to Account metadata
            read_users: Read access to User Profiles
            read_financials: Read access to Estimates, Invoices, Payments, Credit
              Notes
            read_projects: Read access to Projects, Project Settings, Tasks
            read_schedule: Read access to Schedule Details
            read_timesheets: Read access to Timesheet Details
            read_expenses: Read access to Expense Details
            write_contacts: Write access to Customers, Contacts
            write_account: Write access to Account metadata
            write_users: Write access to User Profiles
            write_financials: Write access to Estimates, Invoices, Payments, Credit
              Notes
            write_projects: Write access to Projects, Project Settings, Tasks
            write_schedule: Write access to Schedule module
            write_timesheets: Write access to Timesheets module
            write_expenses: Write access to Expense module
            webhook_notifications: Read access to webhook notification events
