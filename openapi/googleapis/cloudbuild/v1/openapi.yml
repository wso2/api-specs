openapi: 3.0.0
servers:
  - url: https://cloudbuild.googleapis.com/
x-hasEquivalentPaths: true
info:
  x-ballerina-display:
    label: Google Cloud Build
    iconPath: "icon.png"
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: |
    This is a generated connector for [Google Cloud Build REST API v1](https://cloud.google.com/build/docs/api/reference/rest) OpenAPI specification.
    The Google Cloud Build API provides the capability to manage builds on Google Cloud Platform.
  x-ballerina-init-description: |
    The connector initialization requires setting the API credentials. 
    Create a [Google account](https://accounts.google.com/signup) and obtain tokens by following [this guide](https://developers.google.com/identity/protocols/oauth2).
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Build API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/mermade/oas-kit
        version: 7.0.4
      format: google
      url: https://cloudbuild.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: cloudbuild
externalDocs:
  url: https://cloud.google.com/cloud-build/docs/
tags:
  - name: operations
  - name: projects
  - name: v1
paths:
  "/v1/projects/{projectId}/builds":
    get:
      summary: Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.
      operationId: listBuilds
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: The raw filter text to constrain the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`"
          in: query
          name: parent
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBuildsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
      operationId: createBuild
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
          in: query
          name: parent
          schema:
            type: string
      requestBody:
        description: Build to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Build"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/builds/{id}":
    get:
      summary: Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.
      operationId: getBuild
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. ID of the build.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`"
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Build"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/v1/projects/{projectId}/builds/{id}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Cancels a build in progress.
      operationId: cancelBuild
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. ID of the build.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Build to be cancelled
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelBuildRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Build"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/builds/{id}:retry":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings."
      operationId: retryBuild
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. Build ID of the original build.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Build to be retried
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetryBuildRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers":
    get:
      summary: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: listTriggers
      parameters:
        - description: Required. ID of the project for which to list BuildTriggers.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`"
          in: query
          name: parent
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBuildTriggersResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Creates a new `BuildTrigger`. This API is experimental.
      operationId: createTrigger
      parameters:
        - description: Required. ID of the project for which to configure automatic builds.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`"
          in: query
          name: parent
          schema:
            type: string
      requestBody:
        description: Trigger to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildTrigger"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildTrigger"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers/{triggerId}":
    delete:
      summary: Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: deleteTrigger
      parameters:
        - description: Required. ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. ID of the `BuildTrigger` to delete.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
        - description: "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    get:
      summary: Returns information about a `BuildTrigger`. This API is experimental.
      operationId: getTrigger
      parameters:
        - description: Required. ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
        - description: "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildTrigger"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      summary: Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: updateTrigger
      parameters:
        - description: Required. ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. ID of the `BuildTrigger` to update.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
      requestBody:
        description: Trigger to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildTrigger"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildTrigger"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers/{triggerId}:run":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Runs a `BuildTrigger` at a particular source revision.
      operationId: runTrigger
      parameters:
        - description: Required. ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Required. ID of the trigger.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
        - description: "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: query
          name: name
          schema:
            type: string
      requestBody:
        description: Trigger to be ran
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepoSource"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers/{trigger}:webhook":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.
      operationId: receiveWebhookTrigger
      parameters:
        - description: Project in which the specified trigger lives
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Name of the trigger to run the payload against
          in: path
          name: trigger
          required: true
          schema:
            type: string
        - description: "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: query
          name: name
          schema:
            type: string
        - description: Secret token used for authorization if an OAuth token isn't provided.
          in: query
          name: secret
          schema:
            type: string
      requestBody:
        description: Webhook to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpBody"
      responses:
        "200":
          description: Successful response
      tags:
        - projects
  /v1/webhook:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: ReceiveWebhook is called when the API receives a GitHub webhook.
      operationId: receiveWebhook
      parameters:
        - description: For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.
          in: query
          name: webhookKey
          schema:
            type: string
      requestBody:
        description: Webhook to be received
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpBody"
      responses:
        "200":
          description: Successful response
      tags:
        - v1
  "/v1/{name}":
    delete:
      summary: Deletes a `WorkerPool`.
      operationId: deleteWorkerPool
      parameters:
        - description: "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{workerPool}/workerPools/{workerPool}`."
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server.
          in: query
          name: allowMissing
          schema:
            type: boolean
        - description: Optional. If this is provided, it must match the server's etag on the workerpool for the request to be processed.
          in: query
          name: etag
          schema:
            type: string
        - description: If set, validate the request and preview the response, but do not actually post it.
          in: query
          name: validateOnly
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    get:
      summary: Returns details of a `WorkerPool`.
      operationId: getWorkerPool
      parameters:
        - description: "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`."
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Required. ID of the project that owns the trigger.
          in: query
          name: projectId
          schema:
            type: string
        - description: Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.
          in: query
          name: triggerId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerPool"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      summary: Updates a `WorkerPool`.
      operationId: updateWorkerPool
      parameters:
        - description: Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: A mask specifying which fields in `worker_pool` to update.
          in: query
          name: updateMask
          schema:
            type: string
        - description: If set, validate the request and preview the response, but do not actually post it.
          in: query
          name: validateOnly
          schema:
            type: boolean
      requestBody:
        description: WorkerPool to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkerPool"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}:approve":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.
      operationId: approveBuild
      parameters:
        - description: 'Required. Name of the target build. For example: "projects/{$project_id}/builds/{$build_id}"'
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        description: WorkerPool to be approved
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApproveBuildRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: cancelOperation
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}:retry":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings."
      operationId: retryBuildByName
      parameters:
        - description: "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        description: Build to be retried
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetryBuildRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}:run":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Runs a `BuildTrigger` at a particular source revision.
      operationId: runTriggerByName
      parameters:
        - description: "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        description: Trigger to be run
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunBuildTriggerRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}:webhook":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.
      operationId: receiveWebhookTriggerByName
      parameters:
        - description: "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Project in which the specified trigger lives
          in: query
          name: projectId
          schema:
            type: string
        - description: Secret token used for authorization if an OAuth token isn't provided.
          in: query
          name: secret
          schema:
            type: string
        - description: Name of the trigger to run the payload against
          in: query
          name: trigger
          schema:
            type: string
      requestBody:
        description: Webhook trigger to be received
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpBody"
      responses:
        "200":
          description: Successful response
      tags:
        - projects
  "/v1/{parent}/builds":
    get:
      summary: Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.
      operationId: listBuildsByPath
      parameters:
        - description: "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The raw filter text to constrain the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Required. ID of the project.
          in: query
          name: projectId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBuildsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
      operationId: createBuildByPath
      parameters:
        - description: "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: Required. ID of the project.
          in: query
          name: projectId
          schema:
            type: string
      requestBody:
        description: Build to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Build"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/githubEnterpriseConfigs":
    get:
      summary: List all GitHubEnterpriseConfigs for a given project. This API is experimental.
      operationId: listGithubEnterpriseConfigs
      parameters:
        - description: "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: ID of the project
          in: query
          name: projectId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGithubEnterpriseConfigsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Create an association between a GCP project and a GitHub Enterprise server. This API is experimental.
      operationId: createGithubEnterpriseConfig
      parameters:
        - description: "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: ID of the project.
          in: query
          name: projectId
          schema:
            type: string
      requestBody:
        description: Github Enterprise Config to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitHubEnterpriseConfig"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/triggers":
    get:
      summary: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: listTriggersByPath
      parameters:
        - description: "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Required. ID of the project for which to list BuildTriggers.
          in: query
          name: projectId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBuildTriggersResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Creates a new `BuildTrigger`. This API is experimental.
      operationId: createTriggerByPath
      parameters:
        - description: "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: Required. ID of the project for which to configure automatic builds.
          in: query
          name: projectId
          schema:
            type: string
      requestBody:
        description: Trigger to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildTrigger"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildTrigger"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/workerPools":
    get:
      summary: Lists `WorkerPool`s.
      operationId: listWorkerPools
      parameters:
        - description: "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`."
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkerPoolsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      summary: Creates a `WorkerPool`.
      operationId: createWorkerPool
      parameters:
        - description: "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`."
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: If set, validate the request and preview the response, but do not actually post it.
          in: query
          name: validateOnly
          schema:
            type: boolean
        - description: Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.
          in: query
          name: workerPoolId
          schema:
            type: string
      requestBody:
        description: WorkerPool to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkerPool"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{resourceName}":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
    
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      summary: Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: updateTriggerByName
      parameters:
        - description: "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          in: path
          name: resourceName
          required: true
          schema:
            type: string
        - description: Required. ID of the project that owns the trigger.
          in: query
          name: projectId
          schema:
            type: string
        - description: Required. ID of the `BuildTrigger` to update.
          in: query
          name: triggerId
          schema:
            type: string
      requestBody:
        description: Trigger to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildTrigger"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildTrigger"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    ApprovalConfig:
      description: ApprovalConfig describes configuration for manual approval of a build.
      properties:
        approvalRequired:
          description: Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
          type: boolean
      type: object
    ApprovalResult:
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      properties:
        approvalTime:
          description: Output only. The time when the approval decision was made.
          format: google-datetime
          readOnly: true
          type: string
        approverAccount:
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called (the user's actual email that is tied to their GAIA ID may have changed). This field is not stored, rather, it is calculated on the fly using approver_id.
          readOnly: true
          type: string
        comment:
          description: Optional. An optional comment for this manual approval result.
          type: string
        decision:
          description: Required. The decision of this manual approval.
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          type: string
        url:
          description: Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
          type: string
      type: object
    ApproveBuildRequest:
      description: Request to approve or reject a pending build.
      properties:
        approvalResult:
          $ref: "#/components/schemas/ApprovalResult"
          description: Approval decision and metadata.
      type: object
    ArtifactObjects:
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
      properties:
        location:
          description: Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
          type: string
        paths:
          description: Path globs used to match files in the build's workspace.
          items:
            type: string
          type: array
        timing:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for pushing all artifact objects.
          readOnly: true
      type: object
    ArtifactResult:
      description: An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.
      properties:
        fileHash:
          description: The file hash of the artifact.
          items:
            $ref: "#/components/schemas/FileHashes"
          type: array
        location:
          description: The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.
          type: string
      type: object
    Artifacts:
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
      properties:
        images:
          description: A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
          items:
            type: string
          type: array
        objects:
          $ref: "#/components/schemas/ArtifactObjects"
          description: A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
      type: object
    Build:
      description: "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA."
      properties:
        approval:
          $ref: "#/components/schemas/BuildApproval"
          description: Output only. Describes this build's approval configuration, status, and result.
          readOnly: true
        artifacts:
          $ref: "#/components/schemas/Artifacts"
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        availableSecrets:
          $ref: "#/components/schemas/Secrets"
          description: Secrets and secret environment variables.
        buildTriggerId:
          description: Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
          readOnly: true
          type: string
        createTime:
          description: Output only. Time at which the request to create the build was received.
          format: google-datetime
          readOnly: true
          type: string
        failureInfo:
          $ref: "#/components/schemas/FailureInfo"
          description: Output only. Contains information about the build when status=FAILURE.
          readOnly: true
        finishTime:
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
          format: google-datetime
          readOnly: true
          type: string
        id:
          description: Output only. Unique identifier of the build.
          readOnly: true
          type: string
        images:
          description: A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
          items:
            type: string
          type: array
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
          type: string
        logsBucket:
          description: Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
          type: string
        name:
          description: "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service."
          readOnly: true
          type: string
        options:
          $ref: "#/components/schemas/BuildOptions"
          description: Special options for this build.
        projectId:
          description: Output only. ID of the project.
          readOnly: true
          type: string
        queueTtl:
          description: TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
          format: google-duration
          type: string
        results:
          $ref: "#/components/schemas/Results"
          description: Output only. Results of the build.
          readOnly: true
        secrets:
          description: "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets"
          items:
            $ref: "#/components/schemas/Secret"
          type: array
        serviceAccount:
          description: "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
          type: string
        source:
          $ref: "#/components/schemas/Source"
          description: The location of the source files to build.
        sourceProvenance:
          $ref: "#/components/schemas/SourceProvenance"
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
        startTime:
          description: Output only. Time at which execution of the build was started.
          format: google-datetime
          readOnly: true
          type: string
        status:
          description: Output only. Status of the build.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
          type: string
        statusDetail:
          description: Output only. Customer-readable message about the current status.
          readOnly: true
          type: string
        steps:
          description: Required. The operations to be performed on the workspace.
          items:
            $ref: "#/components/schemas/BuildStep"
          type: array
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
          type: object
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        timeout:
          description: Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
          format: google-duration
          type: string
        timing:
          additionalProperties:
            $ref: "#/components/schemas/TimeSpan"
          description: "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included."
          readOnly: true
          type: object
        warnings:
          description: Output only. Non-fatal problems encountered during the execution of the build.
          items:
            $ref: "#/components/schemas/Warning"
          readOnly: true
          type: array
      type: object
    BuildApproval:
      description: BuildApproval describes a build's approval configuration, state, and result.
      properties:
        config:
          $ref: "#/components/schemas/ApprovalConfig"
          description: Output only. Configuration for manual approval of this build.
          readOnly: true
        result:
          $ref: "#/components/schemas/ApprovalResult"
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        state:
          description: Output only. The state of this build's approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          readOnly: true
          type: string
      type: object
    BuildOperationMetadata:
      description: Metadata for build operations.
      properties:
        build:
          $ref: "#/components/schemas/Build"
          description: The build that the operation is tracking.
      type: object
    BuildOptions:
      description: Optional arguments to enable specific features of builds.
      properties:
        diskSizeGb:
          description: Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
          format: int64
          type: string
        dynamicSubstitutions:
          description: "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file."
          type: boolean
        env:
          description: A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        logStreamingOption:
          description: Option to define build log streaming behavior to Google Cloud Storage.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          type: string
        logging:
          description: Option to specify the logging mode, which determines if and where build logs are stored.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
        machineType:
          description: Compute Engine machine type on which to run the build.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
          type: string
        pool:
          $ref: "#/components/schemas/PoolOption"
          description: Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
        requestedVerifyOption:
          description: Requested verifiability options.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
        secretEnv:
          description: A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
          items:
            type: string
          type: array
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          items:
            enum:
              - NONE
              - SHA256
              - MD5
            type: string
          type: array
        substitutionOption:
          description: "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file."
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          type: string
        volumes:
          description: Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        workerPool:
          description: This field deprecated; please use `pool.name` instead.
          type: string
      type: object
    BuildStep:
      description: A step in the build pipeline.
      properties:
        args:
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
          items:
            type: string
          type: array
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        entrypoint:
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
          type: string
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        id:
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
          type: string
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        pullTiming:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for pulling this build step's builder image only.
          readOnly: true
        script:
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
          type: string
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        status:
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
          type: string
        timeout:
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          format: google-duration
          type: string
        timing:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for executing this build step.
          readOnly: true
        volumes:
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        waitFor:
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
          items:
            type: string
          type: array
      type: object
    BuildTrigger:
      description: Configuration for an automated build in response to source repository changes.
      properties:
        approvalConfig:
          $ref: "#/components/schemas/ApprovalConfig"
          description: Configuration for manual approval to start a build invocation of this BuildTrigger.
        autodetect:
          description: "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers."
          type: boolean
        build:
          $ref: "#/components/schemas/Build"
          description: Contents of the build template.
        createTime:
          description: Output only. Time when the trigger was created.
          format: google-datetime
          readOnly: true
          type: string
        description:
          description: Human-readable description of this trigger.
          type: string
        disabled:
          description: If true, the trigger will never automatically execute a build.
          type: boolean
        filename:
          description: Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
          type: string
        filter:
          description: A Common Expression Language string.
          type: string
        gitFileSource:
          $ref: "#/components/schemas/GitFileSource"
          description: The file source describing the local or remote Build template.
        github:
          $ref: "#/components/schemas/GitHubEventsConfig"
          description: GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
        id:
          description: Output only. Unique identifier of the trigger.
          readOnly: true
          type: string
        ignoredFiles:
          description: ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
          items:
            type: string
          type: array
        includedFiles:
          description: If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
          items:
            type: string
          type: array
        name:
          description: "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character."
          type: string
        pubsubConfig:
          $ref: "#/components/schemas/PubsubConfig"
          description: PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
        resourceName:
          description: "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          type: string
        serviceAccount:
          description: "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`"
          type: string
        sourceToBuild:
          $ref: "#/components/schemas/GitRepoSource"
          description: The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
        substitutions:
          additionalProperties:
            type: string
          description: "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`."
          type: object
        tags:
          description: Tags for annotation of a `BuildTrigger`
          items:
            type: string
          type: array
        triggerTemplate:
          $ref: "#/components/schemas/RepoSource"
          description: Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
        webhookConfig:
          $ref: "#/components/schemas/WebhookConfig"
          description: WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
      type: object
    BuiltImage:
      description: An image built by the pipeline.
      properties:
        digest:
          description: Docker Registry 2.0 digest.
          type: string
        name:
          description: Name used to push the container image to Google Container Registry, as presented to `docker push`.
          type: string
        pushTiming:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for pushing the specified image.
          readOnly: true
      type: object
    CancelBuildRequest:
      description: Request to cancel an ongoing build.
      properties:
        id:
          description: Required. ID of the build.
          type: string
        name:
          description: "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
          type: string
        projectId:
          description: Required. ID of the project.
          type: string
      type: object
    CreateGitHubEnterpriseConfigOperationMetadata:
      description: Metadata for `CreateGithubEnterpriseConfig` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        githubEnterpriseConfig:
          description: "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
          type: string
      type: object
    CreateWorkerPoolOperationMetadata:
      description: Metadata for the `CreateWorkerPool` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        workerPool:
          description: "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
          type: string
      type: object
    DeleteGitHubEnterpriseConfigOperationMetadata:
      description: Metadata for `DeleteGitHubEnterpriseConfig` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        githubEnterpriseConfig:
          description: "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
          type: string
      type: object
    DeleteWorkerPoolOperationMetadata:
      description: Metadata for the `DeleteWorkerPool` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        workerPool:
          description: "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
          type: string
      type: object
    FailureInfo:
      description: A fatal problem encountered during the execution of the build.
      properties:
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
        type:
          description: The name of the failure.
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
          type: string
      type: object
    FileHashes:
      description: Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: "#/components/schemas/Hash"
          type: array
      type: object
    GitFileSource:
      description: GitFileSource describes a file within a (possibly remote) code repository.
      properties:
        path:
          description: The path of the file, with the repo root as the root of the path.
          type: string
        repoType:
          description: See RepoType above.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
          type: string
        revision:
          description: "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path."
          type: string
        uri:
          description: The URI of the repo (optional). If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
          type: string
      type: object
    GitHubEnterpriseConfig:
      description: GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.
      properties:
        appId:
          description: Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
          format: int64
          type: string
        createTime:
          description: Output only. Time when the installation was associated with the project.
          format: google-datetime
          readOnly: true
          type: string
        displayName:
          description: Name to display for this config.
          type: string
        hostUrl:
          description: The URL of the github enterprise host the configuration is for.
          type: string
        name:
          description: 'Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfig/{$config_id}"'
          type: string
        peeredNetwork:
          description: Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
          type: string
        secrets:
          $ref: "#/components/schemas/GitHubEnterpriseSecrets"
          description: Names of secrets in Secret Manager.
        sslCa:
          description: Optional. SSL certificate to use for requests to GitHub Enterprise.
          type: string
        webhookKey:
          description: The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
          type: string
      type: object
    GitHubEnterpriseSecrets:
      description: "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/."
      properties:
        oauthClientIdName:
          description: The resource name for the OAuth client ID secret in Secret Manager.
          type: string
        oauthClientIdVersionName:
          description: The resource name for the OAuth client ID secret version in Secret Manager.
          type: string
        oauthSecretName:
          description: The resource name for the OAuth secret in Secret Manager.
          type: string
        oauthSecretVersionName:
          description: The resource name for the OAuth secret secret version in Secret Manager.
          type: string
        privateKeyName:
          description: The resource name for the private key secret.
          type: string
        privateKeyVersionName:
          description: The resource name for the private key secret version.
          type: string
        webhookSecretName:
          description: The resource name for the webhook secret in Secret Manager.
          type: string
        webhookSecretVersionName:
          description: The resource name for the webhook secret secret version in Secret Manager.
          type: string
      type: object
    GitHubEventsConfig:
      description: GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
      properties:
        enterpriseConfigResourceName:
          description: 'Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/githubEnterpriseConfig/{$config_id}"'
          type: string
        installationId:
          description: The installationID that emits the GitHub event.
          format: int64
          type: string
        name:
          description: 'Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".'
          type: string
        owner:
          description: 'Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".'
          type: string
        pullRequest:
          $ref: "#/components/schemas/PullRequestFilter"
          description: filter to match changes in pull requests.
        push:
          $ref: "#/components/schemas/PushFilter"
          description: filter to match changes in refs like branches, tags.
      type: object
    GitRepoSource:
      description: GitRepoSource describes a repo and ref of a code repository.
      properties:
        ref:
          description: The branch or tag to use. Must start with "refs/" (required).
          type: string
        repoType:
          description: See RepoType below.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
          type: string
        uri:
          description: The URI of the repo (required).
          type: string
      type: object
    GoogleDevtoolsCloudbuildV2OperationMetadata:
      description: Represents the metadata of the long-running operation.
      properties:
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        createTime:
          description: Output only. The time the operation was created.
          format: google-datetime
          readOnly: true
          type: string
        endTime:
          description: Output only. The time the operation finished running.
          format: google-datetime
          readOnly: true
          type: string
        requestedCancellation:
          description: Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        target:
          description: Output only. Server-defined resource path for the target of the operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
      type: object
    HTTPDelivery:
      description: HTTPDelivery is the delivery configuration for an HTTP notification.
      properties:
        uri:
          description: The URI to which JSON-containing HTTP POST requests should be sent.
          type: string
      type: object
    Hash:
      description: Container message for hash values.
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
            - MD5
          type: string
        value:
          description: The hash value.
          format: byte
          type: string
      type: object
    HttpBody:
      description: "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
      properties:
        contentType:
          description: The HTTP Content-Type header value specifying the content type of the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          type: string
        extensions:
          description: Application specific response metadata. Must be set in the first response for streaming APIs.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
      type: object
    InlineSecret:
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      properties:
        envMap:
          additionalProperties:
            format: byte
            type: string
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
          type: object
        kmsKeyName:
          description: "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*"
          type: string
      type: object
    ListBuildTriggersResponse:
      description: Response containing existing `BuildTriggers`.
      properties:
        nextPageToken:
          description: Token to receive the next page of results.
          type: string
        triggers:
          description: "`BuildTriggers` for the project, sorted by `create_time` descending."
          items:
            $ref: "#/components/schemas/BuildTrigger"
          type: array
      type: object
    ListBuildsResponse:
      description: Response including listed builds.
      properties:
        builds:
          description: Builds will be sorted by `create_time`, descending.
          items:
            $ref: "#/components/schemas/Build"
          type: array
        nextPageToken:
          description: Token to receive the next page of results. This will be absent if the end of the response list has been reached.
          type: string
      type: object
    ListGithubEnterpriseConfigsResponse:
      description: RPC response object returned by ListGithubEnterpriseConfigs RPC method.
      properties:
        configs:
          description: A list of GitHubEnterpriseConfigs
          items:
            $ref: "#/components/schemas/GitHubEnterpriseConfig"
          type: array
      type: object
    ListWorkerPoolsResponse:
      description: Response containing existing `WorkerPools`.
      properties:
        nextPageToken:
          description: Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.
          type: string
        workerPools:
          description: "`WorkerPools` for the specified project."
          items:
            $ref: "#/components/schemas/WorkerPool"
          type: array
      type: object
    NetworkConfig:
      description: Defines the network configuration for the pool.
      properties:
        egressOption:
          description: Option to configure network egress for the workers.
          enum:
            - EGRESS_OPTION_UNSPECIFIED
            - NO_PUBLIC_EGRESS
            - PUBLIC_EGRESS
          type: string
        peeredNetwork:
          description: Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
          type: string
      type: object
    Notification:
      description: Notification is the container which holds the data that is relevant to this particular notification.
      properties:
        filter:
          description: The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more.
          type: string
        httpDelivery:
          $ref: "#/components/schemas/HTTPDelivery"
          description: Configuration for HTTP delivery.
        slackDelivery:
          $ref: "#/components/schemas/SlackDelivery"
          description: Configuration for Slack delivery.
        smtpDelivery:
          $ref: "#/components/schemas/SMTPDelivery"
          description: Configuration for SMTP (email) delivery.
        structDelivery:
          additionalProperties:
            description: Properties of the object.
          description: Escape hatch for users to supply custom delivery configs.
          type: object
      type: object
    NotifierConfig:
      description: NotifierConfig is the top-level configuration message.
      properties:
        apiVersion:
          description: The API version of this configuration format.
          type: string
        kind:
          description: The type of notifier to use (e.g. SMTPNotifier).
          type: string
        metadata:
          $ref: "#/components/schemas/NotifierMetadata"
          description: Metadata for referring to/handling/deploying this notifier.
        spec:
          $ref: "#/components/schemas/NotifierSpec"
          description: The actual configuration for this notifier.
      type: object
    NotifierMetadata:
      description: NotifierMetadata contains the data which can be used to reference or describe this notifier.
      properties:
        name:
          description: 'The human-readable and user-given name for the notifier. For example: "repo-merge-email-notifier".'
          type: string
        notifier:
          description: 'The string representing the name and version of notifier to deploy. Expected to be of the form of "/:". For example: "gcr.io/my-project/notifiers/smtp:1.2.34".'
          type: string
      type: object
    NotifierSecret:
      description: NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.
      properties:
        name:
          description: Name is the local name of the secret, such as the verbatim string "my-smtp-password".
          type: string
        value:
          description: 'Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: "projects/my-project/secrets/my-secret/versions/latest".'
          type: string
      type: object
    NotifierSecretRef:
      description: NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.
      properties:
        secretRef:
          description: The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.
          type: string
      type: object
    NotifierSpec:
      description: NotifierSpec is the configuration container for notifications.
      properties:
        notification:
          $ref: "#/components/schemas/Notification"
          description: The configuration of this particular notifier.
        secrets:
          description: Configurations for secret resources used by this particular notifier.
          items:
            $ref: "#/components/schemas/NotifierSecret"
          type: array
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
          description: The error result of the operation in case of failure or cancellation.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type XxxResponse, where `Xxx` is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is `TakeSnapshotResponse`.
          type: object
      type: object
    OperationMetadata:
      description: Represents the metadata of the long-running operation.
      properties:
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        cancelRequested:
          description: Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        createTime:
          description: Output only. The time the operation was created.
          format: google-datetime
          readOnly: true
          type: string
        endTime:
          description: Output only. The time the operation finished running.
          format: google-datetime
          readOnly: true
          type: string
        statusDetail:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        target:
          description: Output only. Server-defined resource path for the target of the operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
      type: object
    PoolOption:
      description: Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
      properties:
        name:
          description: The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
          type: string
      type: object
    PrivatePoolV1Config:
      description: Configuration for a V1 `PrivatePool`.
      properties:
        networkConfig:
          $ref: "#/components/schemas/NetworkConfig"
          description: Network configuration for the pool.
        workerConfig:
          $ref: "#/components/schemas/WorkerConfig"
          description: Machine configuration for the workers in the pool.
      type: object
    ProcessAppManifestCallbackOperationMetadata:
      description: Metadata for `ProcessAppManifestCallback` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        githubEnterpriseConfig:
          description: "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
          type: string
      type: object
    PubsubConfig:
      description: PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
      properties:
        serviceAccountEmail:
          description: Service account that will make the push request.
          type: string
        state:
          description: Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SUBSCRIPTION_DELETED
            - TOPIC_DELETED
            - SUBSCRIPTION_MISCONFIGURED
          type: string
        subscription:
          description: Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
          readOnly: true
          type: string
        topic:
          description: The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
          type: string
      type: object
    PullRequestFilter:
      description: PullRequestFilter contains filter properties for matching GitHub Pull Requests.
      properties:
        branch:
          description: Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        commentControl:
          description: Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
          enum:
            - COMMENTS_DISABLED
            - COMMENTS_ENABLED
            - COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY
          type: string
        invertRegex:
          description: If true, branches that do NOT match the git_ref will trigger a build.
          type: boolean
      type: object
    PushFilter:
      description: Push contains filter properties for matching GitHub git pushes.
      properties:
        branch:
          description: Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        invertRegex:
          description: When true, only trigger a build if the revision regex does NOT match the git_ref regex.
          type: boolean
        tag:
          description: Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
      type: object
    RepoSource:
      description: Location of the source in a Google Cloud Source Repository.
      properties:
        branchName:
          description: Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        dir:
          description: Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
          type: string
        invertRegex:
          description: Only trigger a build if the revision regex does NOT match the revision regex.
          type: boolean
        projectId:
          description: ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
          type: string
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
          type: object
        tagName:
          description: Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
      type: object
    Results:
      description: Artifacts created by the build pipeline.
      properties:
        artifactManifest:
          description: Path to the artifact manifest. Only populated when artifacts are uploaded.
          type: string
        artifactTiming:
          $ref: "#/components/schemas/TimeSpan"
          description: Time to push all non-container artifacts.
        buildStepImages:
          description: List of build step digests, in the order corresponding to build step indices.
          items:
            type: string
          type: array
        buildStepOutputs:
          description: List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
          items:
            format: byte
            type: string
          type: array
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: "#/components/schemas/BuiltImage"
          type: array
        numArtifacts:
          description: Number of artifacts uploaded. Only populated when artifacts are uploaded.
          format: int64
          type: string
      type: object
    RetryBuildRequest:
      description: Specifies a build to retry.
      properties:
        id:
          description: Required. Build ID of the original build.
          type: string
        name:
          description: "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
          type: string
        projectId:
          description: Required. ID of the project.
          type: string
      type: object
    RunBuildTriggerRequest:
      description: Specifies a build trigger to run and the source to use.
      properties:
        projectId:
          description: Required. ID of the project.
          type: string
        source:
          $ref: "#/components/schemas/RepoSource"
          description: Source to build against this trigger.
        triggerId:
          description: Required. ID of the trigger.
          type: string
      type: object
    SMTPDelivery:
      description: SMTPDelivery is the delivery configuration for an SMTP (email) notification.
      properties:
        fromAddress:
          description: This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.
          type: string
        password:
          $ref: "#/components/schemas/NotifierSecretRef"
          description: The SMTP sender's password.
        port:
          description: The SMTP port of the server.
          type: string
        recipientAddresses:
          description: This is the list of addresses to which we send the email (i.e. in the `To:` of the email).
          items:
            type: string
          type: array
        senderAddress:
          description: This is the SMTP account/email that is used to send the message.
          type: string
        server:
          description: The address of the SMTP server.
          type: string
      type: object
    Secret:
      description: "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
      properties:
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
        secretEnv:
          additionalProperties:
            format: byte
            type: string
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
          type: object
      type: object
    SecretManagerSecret:
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      properties:
        env:
          description: Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
          type: string
        versionName:
          description: "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*"
          type: string
      type: object
    Secrets:
      description: Secrets and secret environment variables.
      properties:
        inline:
          description: Secrets encrypted with KMS key and the associated secret environment variable.
          items:
            $ref: "#/components/schemas/InlineSecret"
          type: array
        secretManager:
          description: Secrets in Secret Manager and associated secret environment variable.
          items:
            $ref: "#/components/schemas/SecretManagerSecret"
          type: array
      type: object
    SlackDelivery:
      description: "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks."
      properties:
        webhookUri:
          $ref: "#/components/schemas/NotifierSecretRef"
          description: The secret reference for the Slack webhook URI for sending messages to a channel.
      type: object
    Source:
      description: Location of the source in a supported storage service.
      properties:
        repoSource:
          $ref: "#/components/schemas/RepoSource"
          description: If provided, get the source from this location in a Cloud Source Repository.
        storageSource:
          $ref: "#/components/schemas/StorageSource"
          description: If provided, get the source from this location in Google Cloud Storage.
        storageSourceManifest:
          $ref: "#/components/schemas/StorageSourceManifest"
          description: If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      type: object
    SourceProvenance:
      description: Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
      properties:
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/FileHashes"
          description: Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
          readOnly: true
          type: object
        resolvedRepoSource:
          $ref: "#/components/schemas/RepoSource"
          description: A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
        resolvedStorageSource:
          $ref: "#/components/schemas/StorageSource"
          description: A copy of the build's `source.storage_source`, if exists, with any generations resolved.
        resolvedStorageSourceManifest:
          $ref: "#/components/schemas/StorageSourceManifest"
          description: A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StorageSource:
      description: Location of the source in an archive file in Google Cloud Storage.
      properties:
        bucket:
          description: Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
          type: string
      type: object
    StorageSourceManifest:
      description: Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      properties:
        bucket:
          description: Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: Google Cloud Storage object containing the source manifest. This object must be a JSON file.
          type: string
      type: object
    TimeSpan:
      description: Start and end times for a build execution phase.
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      type: object
    UpdateGitHubEnterpriseConfigOperationMetadata:
      description: Metadata for `UpdateGitHubEnterpriseConfig` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        githubEnterpriseConfig:
          description: "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
          type: string
      type: object
    UpdateWorkerPoolOperationMetadata:
      description: Metadata for the `UpdateWorkerPool` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        workerPool:
          description: "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
          type: string
      type: object
    Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      type: object
    Warning:
      description: A non-fatal problem encountered during the execution of the build.
      properties:
        priority:
          description: The priority for this warning.
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          type: string
        text:
          description: Explanation of the warning generated.
          type: string
      type: object
    WebhookConfig:
      description: WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
      properties:
        secret:
          description: Required. Resource name for the secret required as a URL parameter.
          type: string
        state:
          description: Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SECRET_DELETED
          type: string
      type: object
    WorkerConfig:
      description: Defines the configuration to be used for creating workers in the pool.
      properties:
        diskSizeGb:
          description: Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size.
          format: int64
          type: string
        machineType:
          description: Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
          type: string
      type: object
    WorkerPool:
      description: Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).
      properties:
        annotations:
          additionalProperties:
            type: string
          description: User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
          type: object
        createTime:
          description: Output only. Time at which the request to create the `WorkerPool` was received.
          format: google-datetime
          readOnly: true
          type: string
        deleteTime:
          description: Output only. Time at which the request to delete the `WorkerPool` was received.
          format: google-datetime
          readOnly: true
          type: string
        displayName:
          description: A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
          type: string
        etag:
          description: Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
          readOnly: true
          type: string
        name:
          description: Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
          readOnly: true
          type: string
        privatePoolV1Config:
          $ref: "#/components/schemas/PrivatePoolV1Config"
          description: Private Pool using a v1 configuration.
        state:
          description: Output only. `WorkerPool` state.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - RUNNING
            - DELETING
            - DELETED
          readOnly: true
          type: string
        uid:
          description: Output only. A unique identifier for the `WorkerPool`.
          readOnly: true
          type: string
        updateTime:
          description: Output only. Time at which the request to update the `WorkerPool` was received.
          format: google-datetime
          readOnly: true
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud Platform data
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud Platform data
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2
