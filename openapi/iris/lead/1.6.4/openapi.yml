openapi: 3.0.3
info:
  title: IRIS API
  description: |
    This is a generated connector for [IRIS Leads API v1.6.4](https://www.iriscrm.com/api) OpenAPI specification.
    Connect with the Leads API to interact with your lead data.  
    Includes management of fields, user assignments, status changes, tasks, appointments, email, text messaging, and document attachments.
    Create custom reports without limits using the data already housed within your CRM.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials. 
  
    Create a [IRIS account](https://www.iriscrm.com) and obtain tokens by following [this guide](https://www.iriscrm.com/api/#section/Generate-an-API-token).
  x-ballerina-display:
    label: IRIS Lead
    iconPath: "icon.png"
  version: 1.6.4
  contact:
    email: "support@iriscrm.com"
  x-logo:
    url: 'logo.png'

tags:
  - name: "E-Signature"
    description: "Connect with the E-Signature API to create workflows that send specific documents for e-signature documents.<br/><br/>Create field mappings between Lead fields to populate their respective PDF documents.<br/><br/>Receive notifications when documents are generated, opened, and signed by recipients."
  - name: "Helpdesk"
    description: "Connect with the Helpdesk API to work with your ticket data.  Helpdesk tickets are organized by ticket types.<br/><br/>Ticket types have properties such as assigned users, expected time to completion (SLA), and visibility to help you segment tickets based on job descriptions.<br/><br/>Get detailed helpdesk ticket information, perform updates, and manage attached files with ease by using the Helpdesk API."
  - name: "Leads"
    description: "Connect with the Leads API to interact with your lead data.  Includes management of fields, user assignments, status changes, tasks, appointments, email, text messaging, and document attachments.<br/><br/>Create custom reports without limits using the data already housed within your CRM."

  - name: "Merchants"
    description: "Populate your data warehouse programmatically through this Merchants API and interact with your merchant services portfolio.  Data points include merchant demographics, deposits, transactions, retrievals, chargebacks, and statements across supported processors.<br/><br/>Each merchant account is accessible by users through a set of permissions controlled on the User Class level.<br/><br/>Segment your portfolio of merchants by filters such as processor, data source, and processing status."

  - name: "Residuals"
    description: "Populate your data warehouse programmatically through this Residuals API and interact with your monthly residuals income calculations, line items, and user compensation data.<br/><br/>Line items give you control with the ability to add income or expense calculations that are outside of any residual reports.<br/><br/>Receive instant notifications when new residual reports are published or when line items are added."

  - name: "Dispute responder"
    description: ""

  
  - name: "Subscriptions"
    description: "Connect with the Subscriptions API to create, view, and manage your event notification subscriptions.  A webhook listener URL is required from you to be able to create the subscription and receive notifications.<br/><br/>Learn about API updates and new endpoints by subscribing to the [api.updated](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1api.updated/get) event.<br/><br/>Receive alerts in real-time including lead status changes, e-signature document actions, and helpdesk ticket changes.<br/><br/>Subscription API responses provide you with detailed information on a silver platter to avoid sorting through data unnecessarily."

components:
  securitySchemes:
    Token:
      type: apiKey
      in: header
      name: X-API-KEY
      description: Represents API Key `X-API-KEY`
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthenticated"
    ForbiddenError:
      description: Not enough permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Access denied"
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not found"
    ValidationError:
      description: Validation exception
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation exception"
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unexpected server error"
  schemas:

    Links:
      type: object
      properties:
        first:
          type: string
          description: "An URL to the first page of the data set"
        last:
          type: string
          description: "An URL to the last page of the data set"
        prev:
          type: string
          description: "An URL to the previous page of the data set"
        next:
          type: string
          description: "An URL to the next page of the data set"
    Meta:
      type: object
      properties:
        current_page:
          type: integer
          description: "The current page number of a data set"
        from:
          type: integer
          description: "The current position of a data set "
        last_page:
          type: string
          description: "The last page of a data set"
        path:
          type: string
          description: "API path"
        per_page:
          type: integer
          description: "A number of records per page"
        to:
          type: integer
          description: "The last position in a data set"
        total:
          type: integer
          description: "Total number of records in a data set"
    File:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: filename.jpg
        size:
          type: integer
          example: 480118
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'File creation date (Y-m-d\TH:i:sP)'
        created_by:
          type: integer
          example: 1
    BriefMerchantInfo:
      type: object
      properties:
        mid:
          type: string
          description: "Merchant number"
        name:
          type: string
          description: "Merchant name"
        opened:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant open date"
        closed:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant closed date"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Merchant created date"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Merchant modified date"
        first_batch:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant first batch date"
        last_batch:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant last batch date"
        group:
          type: string
          description: "Group name"
        processor:
          type: string
          description: "Processor name"
        datasource:
          type: string
          description: "Data source name"
        sic_code:
          type: string
          description: "SIC Code"
        vim:
          type: string
          description: "Is VIM?"
        deactivated:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant deactivation date"
        status:
          type: string
          description: "Merchant status"
        active:
          type: string
          description: "Merchant active flag"
    MonetaryBatch:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Batch date"
        reference_number:
          type: string
          description: "Batch description"
        amount:
          type: string
          description: "Batch amount"
        count:
          type: string
          description: "A number of transactions"
        terminal_number:
          type: string
          description: "Batch terminal number"
        transactions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 123
                description: "Transaction ID"
              date:
                type: string
                format: date
                example: '01/21/2019'
                description: "Transaction date"
              type:
                type: string
                example: 'SALE'
                description: "Transaction type"
              amount:
                type: string
                example: "91.57"
                description: "Transaction amount"
              cardholder:
                type: string
                example: "3712*******1234"
                description: "Cardholder number"
              auth_code:
                type: string
                example: 550123
                description: "Transaction auth code"
              pos_entry_mode:
                type: string
                example: SWIPED
                description: "POS entry mode"
              invoice_number:
                type: string
                example: "11"
                description: "Invoice number"
              void_reject_chargeback:
                type: boolean
                example: false
                description: "Is a transaction rejected?"
    Adjustments:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
            example: '01/21/2019'
            description: "Adjustment date"
          type:
            type: string
            example: "Deposit adjustments"
            description: "Adjustment type"
          amount:
            type: string
            example: "-570.00"
            description: "Adjustment amount"
    Deposits:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
            example: '01/21/2019'
            description: "Deposit date"
          amount:
            type: string
            example: "1570.00"
            description: "Deposit amount"
          transactions:
            type: integer
            example: 3
            description: "Transactions count"
          batch:
            type: string
            example: "202101025856"
            description: "Deposit batch number"
    Chargeback:
      type: object
      properties:
        id:
          type: integer
          example: 123
          description: "Chargeback internal ID"
        merchant_id:
          type: string
          example: "48236605840"
          description: "Merchant ID"
        dba:
          type: string
          example: "Dummy Merchant DBA"
          description: "Merchant DBA"
        case_number:
          type: string
          example: "230880620"
          description: "Case number"
        chargeback_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Chargeback date"
        transaction_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Transaction date"
        respond_due:
          type: string
          format: date
          example: '01/21/2019'
          description: "Respond due date"
        amount:
          type: string
          example: "1570.00"
          description: "Amount"
        original_amount:
          type: string
          example: "10.00"
          description: "Original amount of transaction"
        currency:
          type: string
          description: "Transaction currency"
        reason:
          type: string
          description: "Chargeback reason"
        reason_code:
          type: string
          description: "Chargeback reason code"
        card_number:
          type: string
          description: "Cardholder number"
        reply_form:
          type: string
          description: "Reply form type. Affects reply options."
        cycle_indicator:
          type: string
          description: "Chargeback cycle indicator"
        transaction_id:
          type: string
          description: "Transaction ID"
        reference_number:
          type: string
          description: "Transaction ID"
        case_status:
          type: string
          description: "Case status"
        case_status_description:
          type: string
          description: "Status description"
        mcc:
          type: string
          description: "MCC code"
        dispute_jurisdiction:
          type: string
          description: "Dispute jurisdiction"
        card_product_type:
          type: string
          description: "Card product"
        process_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Process date"
        transaction_method:
          type: string
          description: "Transaction method"
        invoice_number:
          type: string
          description: "Invoice number"
        microfilm_number:
          type: string
          description: "Microfilm number"
        airline_ticket_number:
          type: string
          description: "Airline ticket number"
        order_number:
          type: string
          description: "Order number"
        tracking_number:
          type: string
          description: "Tracking number"
        last_status_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the last status update"
        updated_at:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the most recent update"
        case_action:
          type: string
          description: "Case action"
        action:
          type: string
          description: "Can the case be viewed of replied"
        foreign_amount:
          type: string
          example: "10.00"
          description: "Foreign amount of transaction"
        transaction_locator:
          type: string
          description: Transaction locator
        authorization_code:
          type: string
          example: "08572B"
          description: "Authorization code"
        type:
          type: string
          example: "First Chargeback"
          description: "Chargeback type"
    Retrieval:
      type: object
      properties:
        id:
          type: integer
          example: 123
          description: "Chargeback internal ID"
        merchant_id:
          type: string
          example: "48236605840"
          description: "Merchant ID"
        dba:
          type: string
          example: "Dummy Merchant DBA"
          description: "Merchant DBA"
        case_number:
          type: string
          example: "230880620"
          description: "Case number"
        retrieval_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Request date"
        transaction_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Transaction date"
        amount:
          type: string
          example: "10.00"
          description: "Amount"
        respond_due:
          type: string
          format: date
          example: '01/21/2019'
          description: "Respond due date"
        original_amount:
          type: string
          example: "10.00"
          description: "Original amount of transaction"
        currency:
          type: string
          description: "Transaction currency"
        reason:
          type: string
          description: "Retrieval case reason"
        reason_code:
          type: string
          description: "Retrieval case reason code"
        card_number:
          type: string
          description: "Cardholder number"
        transaction_id:
          type: string
          description: "Transaction ID"
        reference_number:
          type: string
          description: "Transaction ID"
        case_status:
          type: string
          description: "Case status"
        case_status_description:
          type: string
          description: "Status description"
        mcc:
          type: string
          description: "MCC code"
        dispute_jurisdiction:
          type: string
          description: "Dispute jurisdiction"
        card_product_type:
          type: string
          description: "Card product"
        transaction_method:
          type: string
          description: "Transaction method"
        invoice_number:
          type: string
          description: "Invoice number"
        microfilm_number:
          type: string
          description: "Microfilm number"
        airline_ticket_number:
          type: string
          description: "Airline ticket number"
        order_number:
          type: string
          description: "Order number"
        tracking_number:
          type: string
          description: "Tracking number"
        last_status_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the last status update"
        updated_at:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the most recent update"
        case_action:
          type: string
          description: "Case action"
        action:
          type: string
          description: "Can the case be viewed of replied"
        foreign_amount:
          type: string
          example: "10.00"
          description: "Foreign amount of transaction"
        transaction_locator:
          type: string
          description: Transaction locator
    ChargebackReplyDisputeRequest:
      type: object
      required:
        - selected_doc_types
        - user_note
        - file
      properties:
        selected_doc_types:
          type: string
          enum: [
              'sales_slip',
              'cancellation_policy',
              'order_form',
              'proof_of_delivery',
              'rental_agreement',
              'recurring_billing_agreement',
              'loyalty_transactions',
              'subsequent_purchases',
              'ticket_proof',
              'flight_manifest_proof',
              'cvv2_proof',
              'authorization_proof',
              'secure_code_proof',
              'other',
          ]
          description: Selected documents
        other_description:
          type: string
          description: Other document description
        compelling_doc:
          type: string
          description: Compelling document
          enum: [
              A,V,C
          ]
        selected_compelling:
          type: string
          description: Selected compelling
          enum: [
              'ch_in_possession'       ,
              'signed_delivery_form'   ,
              'address_verification'   ,
              'digital_goods_download' ,
              'delivery_to_ch'         ,
              'loyalty_transactions'   ,
              'subsequent_purchases'   ,
              'transport_proof'        ,
              'non_dispute_payments'   ,
              'auth_signer_by_ch'      ,
              'signed_order_form'      ,
              'legitimate_spend'       ,
              'recurring_transaction'  ,
              'member_of_ch_household' ,
              'flight_manifest'
          ]
        selected_digital_goods_04:
          type: string
          description: Digital goods compelling documents
          enum: [
            'purchaser_ip_and_location',
            'device_id_and_name',
            'purchaser_name_and_email',
            'same_device_and_card',
            'proof_of_profile_setup',
            'proof_of_app_access'
          ]
        download_date:
          type: string
          description: Download date
        download_time:
          type: string
          description: Download time
        purchaser_ip_addr:
          type: string
          description: Purchaser IP address
        geographical_location:
          type: string
          description: Physical location
        device_id:
          type: string
          description: PhDevice ID
        device_name:
          type: string
          description: Device ID
        purchaser_name:
          type: string
          description: Purchaser name
        purchaser_email:
          type: string
          description: Purchaser email
        arn_04:
          type: string
          description: ARN
        tran_date_04:
          type: string
          description: Transaction date
        arn_09:
          type: string
          description: ARN
        tran_date_09:
          type: string
          description: Transaction date
        arn_13:
          type: string
          description: ARN
        tran_date_13:
          type: string
          description: Transaction date
        ip_address:
          type: string
          description: IP address
        email_address:
          type: string
          description: Email address
        phone_number:
          type: string
          description: Phone number
        physical_address:
          type: string
          description: Physical address
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    ChargebackReplyCreditIssuedRequest:
      type: object
      required:
        - credit_date
        - credit_amount
        - user_note
        - file
      properties:
        credit_date:
          type: string
          description: Credit transaction date
        credit_amount:
          type: string
          description: Credit transaction amount
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyResponseRequest:
      type: object
      required:
        - user_note
        - file
      properties:
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyUnableRequest:
      type: object
      required:
        - user_note
        - file
      properties:
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyCreditIssuedRequest:
      type: object
      required:
        - credit_date
        - credit_amount
        - user_note
        - file
      properties:
        credit_date:
          type: string
          description: Credit transaction date
        credit_amount:
          type: string
          description: Credit transaction amount
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    ChargebackReplyResponse:
      allOf:
        - type: object
          properties:
            chargeback:
              type: object
              properties:
                id:
                  type: string
                  example: 1
                merchant_id:
                  type: string
                  example: "123456789"
                dba:
                  type: string
                  example: "Wild Coyote Hotel"
                cycle_indicator:
                  type: string
                  example: 'First chargeback'
                date:
                  type: string
                  example: "11/14/2020"
                transaction_date:
                  type: string
                  example: "11/14/2020"
                amount:
                  type: string
                  example: "1000.00"
                reason_code:
                  type: string
                reason:
                  type: string
                card_number:
                  type: string
                case_number:
                  type: string
                case_action:
                  type: string
                action:
                  type: string
                reply_form:
                  type: string
                case_status:
                  type: string
                case_status_description:
                  type: string
                last_status_date:
                  type: string
                respond_due:
                  type: string
                original_amount:
                  type: string
                updated_at:
                  type: string
                mcc:
                  type: string
                dispute_jurisdiction:
                  type: string
                card_product_type:
                  type: string
                process_date:
                  type: string
                transaction_method:
                  type: string
                invoice_number:
                  type: string
                microfilm_number:
                  type: string
                airline_ticket_number:
                  type: string
                order_number:
                  type: string
                tracking_number:
                  type: string
            items:
              type: object
              properties:
                reason:
                  type: string
                message_from_bank:
                  type: string
                merchant_due_date:
                  type: string
                financial_disposition_date:
                  type: string
                type:
                  type: string
        - $ref: "#/components/schemas/DisputeDetailsResponse"
    RetrievalsReplyResponse:
      allOf:
        - type: object
          properties:
            retrieval:
              type: object
              properties:
                id:
                  type: string
                merchant_id:
                  type: string
                  example: "123456789"
                dba:
                  type: string
                  example: "Wild Coyote Hotel"
                date:
                  type: string
                transaction_date:
                  type: string
                amount:
                  type: string
                reason_code:
                  type: string
                reason:
                  type: string
                card_number:
                  type: string
                case_number:
                  type: string
                case_action:
                  type: string
                action:
                  type: string
                case_status:
                  type: string
                case_status_description:
                  type: string
                last_status_date:
                  type: string
                respond_due:
                  type: string
                original_amount:
                  type: string
                updated_at:
                  type: string
                mcc:
                  type: string
                dispute_jurisdiction:
                  type: string
                card_product_type:
                  type: string
                foreign_amount:
                  type: string
                transaction_method:
                  type: string
                transaction_locator:
                  type: string
                invoice_number:
                  type: string
                microfilm_number:
                  type: string
                airline_ticket_number:
                  type: string
                order_number:
                  type: string
                tracking_number:
                  type: string
        - $ref: "#/components/schemas/DisputeDetailsResponse"
    DisputeDetailsResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            type: object
            properties:
              reference:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        auth_records:
          type: array
          items:
            type: object
            properties:
              reference:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        notes:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              added_at:
                type: string
        messages:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              description:
                type: string
              added_at:
                type: string
              viewed_on:
                type: string
        directories:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
              title:
                type: string
              files:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                    title:
                      type: string
                    url:
                      type: string
                      description: site url
                      example: "https://dev.iriscrm.com/retrievals/download-file/94900"
                    api_url:
                      type: string
                      description: api url
                      example: "https://dev.iriscrm.com/api/v1/merchants/333333333/retrievals/903729142148/files/94900"
    DisputeFile:
      type: object
      properties:
        name:
          type: string
          description: File name
          example: "Merchant Output Package_4/4/20.tif"
        directory:
          type: string
          description: Folder name
          example: Incoming Chargeback Documents
        content:
          type: string
          format: binary
          description: base64 encoded content



    SummaryResponse:
      type: object
      properties:
        processor_id:
          type: integer
          example: 1
        name:
          type: string
          example: Test Processor
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        created_by:
          type: integer
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        modified_by:
          type: integer
          example: 1
        merchants_count:
          type: integer
          example: 11
        sum_transactions:
          type: integer
          example: 1664667
        sum_sales_amount:
          type: number
          example: 0
        sum_income:
          type: number
          example: 0
        sum_expense:
          type: number
          example: 0
        sum_net:
          type: number
          example: 0
        sum_bps:
          type: number
          example: 0
        sum_agent_net:
          type: integer
          example: 0
    MerchantRow:
      type: object
      properties:
        merchant:
          type: string
          example: Merchant name
        transactions:
          type: integer
          example: 151182
        sales_amount:
          type: integer
          example: 15637576
        income:
          type: integer
          example: 499400
        expense:
          type: integer
          example: 454000
        net:
          type: integer
          example: 45400
        bps:
          type: integer
          example: 0.29
        users:
          type: boolean
          example: true
        percentage:
          type: integer
          example: 0
        agent_net:
          type: integer
          example: 0
        mid:
          type: integer
          example: 12312312312

    ResidualsDetails:
      type: object
      properties:
        MID:
          type: string
          example: "12312312312"
        DBA:
          type: string
          example: "Test Merchant"


    LineItems:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [
            agent,
            merchant
          ]
          example: "agent"
        item_id:
          type: integer
          example: 10100101
        user:
          type: object
          properties:
            user_id:
              type: integer
              example: 1
            username:
              type: string
              example: john79
            full_name:
              type: string
              example: John Doe
            class:
              type: string
              example: Sales Manager
        merchant:
          type: object
          properties:
            mid:
              type: string
              example: 1231323
            dba:
              type: string
              example: Test Company
        related_mid:
          type: integer
          example: 10100101
        related_dba:
          type: string
          example: 'Merchant DBA'
        description:
          type: string
        income:
          type: integer
          example: 499400
        expense:
          type: integer
          example: 454000
        percentage:
          type: integer
          example: 0
        agent_net:
          type: integer
          example: 45400
        is_recurring:
          type: boolean
          example: true
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Created date of line item"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Last update date of line item"
        agents:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
              username:
                type: string
                example: john79
              full_name:
                type: string
                example: John Doe
              agent_net:
                type: integer
                example: 45400
              percentage:
                type: integer
                example: 0
        recurring_start_date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Date of start recurring line item"
        recurring_payment_count:
          type: integer
          example: 100
          description: "Count of payments what was already done"
        recurring_max_payment_count:
          type: integer
          example: 100
          description: "Count of payments which will be done (this will be null if there is no limit)"
        recurring_period:
          type: string
          enum:
          - weekly
          - monthly
          - quarterly
          - yearly
          example: weekly
    ResidualTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 21
        name:
          type: string
          example: Test template
        creator_id:
          type: integer
          example: 1
        creator_name:
          type: string
          example: Jane Doe
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T12:04:40+05:00'
          description: "Created date of template"
        revision:
          type: integer
          example: 2
        rules:
          type: array
          items:
            $ref: "#/components/schemas/TemplateRules"

    ResidualTemplateAssigned:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: janedoe
        full_name:
          type: string
          example: Jane Doe
        templates:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: test template
              version:
                type: integer
                example: 2
              processor_id:
                type: integer
                example: 12
              rules:
                type: array
                items:
                  $ref: "#/components/schemas/TemplateRules"

    TemplateRules:
      type: object
      properties:
        column:
          type: string
          example: Agent Net
        rule:
          type: string
          example: decrease
        value:
          type: integer
          example: 100
        field:
          type: string
          example: "Income 3"


    BriefLeadInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Lead Id"

        
        mid:
          type: integer
          description: "Lead merchant Id"
        
        name:
          type: string
          description: "Lead name"
        group:
          $ref: "#/components/schemas/BriefGroupInfo"
        category:
          $ref: "#/components/schemas/BriefCategoryInfo"
        status:
          $ref: "#/components/schemas/BriefStatusInfo"
        campaign:
          $ref: "#/components/schemas/BriefCampaignInfo"
        source:
          $ref: "#/components/schemas/BriefSourceInfo"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Lead creation date (Y-m-d\TH:i:sP)'
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Lead modification date (Y-m-d\TH:i:sP)'
    BriefApplicationInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Application Id"
        name:
          type: string
          description: "Application name"
        e-sign:
          type: string
          description: "Is E-Sign available?"
    BriefCampaignInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Campaign Id"
        name:
          type: string
          description: "Campaign name"
    BriefSourceInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Source Id"
        name:
          type: string
          description: "Source name"
    BriefGroupInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Group Id"
        name:
          type: string
          description: "Group name"
    BriefCategoryInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Status category Id"
        name:
          type: string
          description: "Status category name"
    BriefStatusInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Status Id"
        name:
          type: string
          description: "Status name"
    CategoryWithStatuses:
      type: object
      properties:
        id:
          type: integer
          description: "Status category Id"
        name:
          type: string
          description: "Status category name"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/BriefStatusInfo"
    BriefTabInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Tab Id"
        name:
          type: string
          description: "Tab name"
    BriefUserInfo:
      type: object
      properties:
        id:
          type: integer
          description: "User Id"
          example: 123
        name:
          type: string
          description: "User name"
          example: "John Doe"
    BriefUserInfoWithClass:
      type: object
      properties:
        id:
          type: integer
          description: "User Id"
          example: 1
        username:
          type: string
          description: "User username"
          example: "manager1"
        full_name:
          type: string
          description: "User name"
          example: "John Doe"
        email:
          type: string
          description: "User email"
          example: example@iriscrm.com
        status:
          type: string
          description: "User status"
          example: "active"
        class:
          type: string
          description: "User class"
          example: "Manager"
    LeadField:
      type: object
      required:
        - tab
        - label
        - type
        - value
      properties:
        id:
          type: integer
          description: "Field Id"
          example: 1
          readOnly: true
        tab:
          type: integer
          description: "Field tab Id"
          example: 1
        label:
          type: string
          description: "Field label"
          example: "New Field"
        type:
          type: string
          description: "Field type"
          example: "Select"
          enum: [
            'DateCreate',
            'GoogleMaps',
            'jQDate',
            'Number',
            'Txt',
            'TxtArea',
            'TxtDollar',
            'TxtBalance',
            'TxtSIC',
            'TxtPercent',
            'TxtRouting',
            'TxtSecure',
            'Checkbox',
            'Select',
            'SelectRed',
            'Label',
            'Packages',
            'PhoneMask',
            'PrFormats',
            'QuickEmail',
            'QuickFax'
          ]
        length:
          type: integer
          description: "Field size"
          example: 10
        default:
          type: string
          description: "Field default value"
          example: "Some Value"
        alignment:
          type: string
          description: "Field alignment"
          enum: [
            "",
            'left',
            'middle',
            'right',
            'left_column',
            'right_column',
            'float_left_whole_row',
            'float_left',
            'float_middle'
          ]
          example: "left"
        searchable:
          type: integer
          description: "Searchable field"
          enum: [
            0,
            1
          ]
          example: 1
        special:
          type: string
          description: "Field special value"
          example: "dba"
          enum: [
            "",
                        "mid",
                        "dba",
            "sales_number",
            "busaddress",
            "buscity",
            "busstate",
            "buszipcode",
            "bustype",
            "busproducts",
            "busmarkettype",
            "busstartdate",
            "sic",
            "taxid",
            "processor",
            "owner_fname",
            "owner_lname",
            "owner_title",
            "owner_ssn",
            "phone",
            "cellphone",
            "email",
            "contact",
            "contact_1",
            "contact_2",
            "avgtckt",
            "volume",
            "bank_name_on_account",
            "bank_account_type",
            "bank_account_owner_type",
            "aba_code",
            "account_number",
            "bank_name",
            "bank_city",
            "bank_state",
            "bank_zip",
            "LMS_FScore",
            "LMS_RefNum",
            "LR_MONTHLY_PAYMENT",
            "LR_EQUIPMENT",
            "LR_WIRE_TRANFER",
            "LR_PACK_FEE",
            "LR_CANCELLATION",
            "leadID"
          ]
        options:
          type: object
          properties:
            dropdown:
              type: object
              description: Add new list item
              properties:
                key:
                  type: string
                  example: 'key'
                  description: Key
                value:
                  type: string
                  example: 'Option Value'
                  description: Value
            dupecheck:
              type: boolean
              description: Enable dupecheck
              example: true
            contactid:
              type: string
              description: Id of contact field
              example: 1
            mask:
              type: string
              description: Field mask
              enum: [
                'validateSSN',
                'validateDate',
                'validateDate2',
                'validateZip5',
                'validateZip9'
              ]
            copy:
              type: object
              description: Copy button properties
              properties:
                title:
                  type: string
                  description: Button label
                  example:
                from:
                  type: object
                  description: Copy from
                  example:
                    1: 1
                    2: 2
                to:
                  type: object
                  description: Copy to
                  example:
                    1: 1
                    2: 2
            hyperlink:
              type: boolean
              description: Enable hyperlink
              example: true
            sms:
              type: boolean
              description: Enable SMS
              example: true
            dialer:
              type: boolean
              description: Enable dialer
              example: true
            googlemaps:
              type: object
              description: Google Maps search properties
              example:
                1: 1
                2: 2
            zipcode_autocomplete:
              type: object
              description: ZIP Code autofill properties
              properties:
                city:
                  type: object
                  description: City fields
                  example:
                    1: 1
                    2: 2
                state:
                  type: object
                  description: State fields
                  example:
                    1: 1
                    2: 2
                zipcode:
                  type: object
                  description: Zipcode fields
                  example:
                    1: 1
                    2: 2
        order:
          type: integer
          example: 1
          readOnly: true
        readOnly:
          type: boolean
          description: Whether the field is read only
          example: false
          readOnly: true
        required:
          type: boolean
          description: Whether the field is required
          example: true
          readOnly: true
    LeadFieldOrder:
      type: object
      required:
        - value
      properties:
        value:
          type: integer
          description: "New order position of lead field"
          example: 1
        type:
          type: string
          enum: [
            "increment",
            "decrement"
          ]
          description: "Type of changing order position"
          example: "increment"
          default: null
    LeadFieldTab:
      type: object
      required:
      - position
      - class
      - name
      - order
      properties:
        id:
          type: integer
          description: "Tab Id"
          example: 1
          readOnly: true
        active:
          type: integer
          description: "Active tab"
          enum: [
            0,
            1
          ]
          example: 1
        position:
          type: integer
          description: "Tab position"
          example: 1
          enum: [1 = left, 2 = bottom right, 3 = middle right, 4 = top right]
        class:
          type: string
          description: "Tab class"
          example: "documents"
          enum: [''' - empty string for TAB', 'set', 'documents', 'altdocs', 'notes']
        name:
          type: string
          description: "Tab class"
          example: "New tab"
        order:
          type: integer
          description: "Tab order"
          example: 1
    ApplicationField:
      type: object
      required:
      - from
      properties:
        id:
          type: integer
          description: "Application field Id"
          example: 1
          readOnly: true
        from:
          type: integer
          description: "Application field from field Id"
          example: 1
        record:
          type: integer
          description: "Application field record"
          example: 1
        to:
          type: string
          description: "Name of mapped field"
          example: "Test"
        toAlt:
          type: string
          description: "Alt of mapped field"
          example: "Alt test"
        toType:
          type: string
          description: "Type of mapped field"
          example: "Text"
        special:
          type: string
          description: "Special type of mapped field"
          example: "chk"
          default: null
          enum: [
            null,
            'chk',
            'd2t',
            'salesrep',
            'salesrep_position',
            'salesrep_email',
            'salesrep_phone',
            'salesrep_mobile',
            'salesrep_fax',
            'salesrep_ext',
            'leading_comma',
            'date_mdY',
            'date_mdy',
          ]
        info:
          readOnly: true
          type: array
          items:
            type: object
            properties:
              field_name:
                type: string
                description: "Field name"
                example: "Business Address"
              field_type:
                type: string
                description: "Field type"
                enum: [
                  Text,
                  Checkbox
                ]
                example: Text
              left:
                type: integer
                description: "Padding from left"
                example: 19.962399999999999
              right:
                type: integer
                description: "Padding from right"
                example: 303.43799999999999
              top:
                type: integer
                description: "Padding from top"
                example: 686.60500000000002
              bottom:
                type: integer
                description: "Padding from bottom"
                example: 673.24699999999996
              field_height:
                type: integer
                description: "Height of field"
                example: 13.35797
              field_width:
                type: integer
                description: "Width of field"
                example: 283.47559999999999
              page_number:
                type: integer
                description: "Page number"
                example: 1
              page_height:
                type: integer
                description: "Page height"
                example: 792
              page_width:
                type: integer
                description: "Page width"
                example: 612
              page_rotation:
                type: integer
                description: "Page rotation"
                example: 0
              export_value:
                type: string
                description: "Export value"
                example: Yes
              tooltip:
                type: string
                description: "Field tooltip"
                example: Test
              duplicates:
                type: array
                items:
                  type: object
                  properties:
                    instance:
                      type: integer
                      description: "Activity Id"
                      example: 2
                    left:
                      type: integer
                      description: "Padding from left"
                      example: 542.962399999999999
                    right:
                      type: integer
                      description: "Padding from right"
                      example: 596.43799999999999
                    top:
                      type: integer
                      description: "Padding from top"
                      example: 107.60500000000002
                    bottom:
                      type: integer
                      description: "Padding from bottom"
                      example: 95.24699999999996
                    height:
                      type: integer
                      description: "Height of field"
                      example: 11.35797
                    width:
                      type: integer
                      description: "Width of field"
                      example: 53.47559999999999
                    page_number:
                      type: integer
                      description: "Page number"
                      example: 4
    StatusActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        changedBy:
          type: integer
          description: "User Id"
          example: 1
        changedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Deleted date (Y-m-d\TH:i:sP)'
        oldStatus:
          type: string
          example: 'Old'
          description: 'Old status'
        old_status_id:
          type: integer
          description: "Old Status Id"
          example: 1
        newStatus:
          type: string
          example: 'New'
          description: 'New status'
        new_status_id:
          type: integer
          description: "New Status Id"
          example: 2
    CampaignActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        newValue:
          type: string
          description: "New value of activity"
          example: "Test"
        assignedBy:
          type: integer
          description: "User Id"
          example: 1
        assignedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Assigned date (Y-m-d\TH:i:sP)'
    SourceActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        newValue:
          type: string
          description: "New value of activity"
          example: "Test"
        assignedBy:
          type: integer
          description: "User Id"
          example: 1
        assignedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Assigned date (Y-m-d\TH:i:sP)'
    LinksActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        status:
          type: string
          enum: [
            'Linked',
            'Unlinked'
          ]
          description: "Status of link"
          example: "Linked"
        lead:
          type: string
          description: "Lead Id"
          example: "123"

        
        merchant:
          type: string
          description: "Merchant Id"
          example: "123"
        
        linkedBy:
          type: integer
          description: "User Id"
          example: 1
        linkedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Linking date (Y-m-d\TH:i:sP)'
    DeletionActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        deletedId:
          type: integer
          description: "User Id"
          example: 1
        deletedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of deletion (Y-m-d\TH:i:sP)'
        undeletedId:
          type: integer
          description: "User Id"
          example: 1
        undeletedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of undeletion (Y-m-d\TH:i:sP)'
    DuplicateActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        oldLeadId:
          type: integer
          description: "Old lead Id"
          example: 1
        newLeadId:
          type: integer
          description: "New lead Id"
          example: 1
        duplicatedBy:
          type: integer
          description: "User Id"
          example: "1"
        duplicatedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of duplication (Y-m-d\TH:i:sP)'
    BriefEmailTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Email template title"
    BriefSmsTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "SMS template title"
    LeadAppointment:
      type: object
      properties:
        id:
          type: integer
          description: Appointment Id
        user:
          deprecated: true
          $ref: "#/components/schemas/BriefUserInfo"
        set_for:
          deprecated: true
          $ref: "#/components/schemas/BriefUserInfo"
        set_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment creation date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        set_by:
          $ref: "#/components/schemas/BriefUserInfo"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment modification date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        modified_by:
          $ref: "#/components/schemas/BriefUserInfo"
        text:
          type: string
          description: Appointment description
        date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        date_end:
          type: string
          format: date-time
          example: '2019-01-02T12:04:40+05:00'
          description: Appointment end date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        done:
          type: string
          description: Is appointment done?
          enum: [Yes, No]
          example: No
        confirmed:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment confirmed date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        confirmed_by:
          $ref: "#/components/schemas/BriefUserInfo"
        seen:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment seen date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        seen_by:
          $ref: "#/components/schemas/BriefUserInfo"
        rescheduled:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment rescheduled date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        rescheduled_by:
          $ref: "#/components/schemas/BriefUserInfo"
        rescheduled_count:
          type: integer
          example: 0
    FileLabel:
      type: object
      properties:
        id:
          type: integer
          description: Label Id
          example: 1
        order:
          type: integer
          description: Label display order
          example: 1
        name:
          type: string
          description: "Label name"
          example: Default


    Ticket:
      type: object
      properties:
        id:
          type: integer
          description: "Ticket id"
          readOnly: true
          example: 1
        subject:
            type: string
            description: "Ticket subject"
            example: "Ticket subject"
        description:
          type: string
          description: "Ticket description"
          example: "Ticket description"
        status:
          type: object
          properties:
            id:
              type: integer
              description: "Status id"
              example: 1
            name:
              type: string
              description: "Status name"
              example: "New"
        type:
          type: object
          properties:
            id:
              type: integer
              description: "Type id"
              example: 1
            name:
              type: string
              description: "Ticket type"
              example: "Test ticket type"
        group:
          type: object
          properties:
            id:
              type: integer
              description: "Group id"
              example: 1
            name:
              type: string
              description: "Group name"
              example: "Test group"
        priority:
          type: object
          properties:
            id:
              type: integer
              description: "Priority id"
              example: 1
            name:
              type: string
              description: "Priority name"
              example: "Medium"
        lead_id:
          type: integer
          description: "Assigned Lead ID"
          example: 3421
        
        mid:
          type: integer
          description: "Assigned Merchant ID"
          example: 10204324
        merchantVisible:
          type: boolean
          description: "Indicates if the ticket is visible to Merchant users"
          example: true

        
    TicketCreatedBlock:
      type: object
      properties:
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket created date"
        created_by:
          type: integer
          description: "Ticket creator id"
          example: 1

    BriefTicketInfo:
      allOf:
        - $ref: "#/components/schemas/Ticket"
        - $ref: "#/components/schemas/TicketCreatedBlock"
        - type: object
          properties:
            modified:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket modified date"
            modified_by:
              type: integer
              description: "Id of user who made last change"
              example: 1
            resolved:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket resolved date"
            resolved_by:
              type: integer
              description: "Id of user who made last change"
              example: 1
            due_date:
              type: string
              format: date
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket due date"
            due:
              type: string
              example: '7 days'
              description: "Ticket SLA"
            only_business_days:
              type: boolean
              example: true
              description: "Calculate only business days"
            last_comment:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket last comment date"
            files_count:
              type: integer
              description: "Count of ticket files"
              example: 12
    BriefTicketTypeInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Ticket type id"
          example: 1
        name:
          type: string
          description: "Ticket type name"
          example: "Ticket type name"
        description:
          type: string
          description: "Ticket type description"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
        daysToResolve:
          type: integer
          description: "Days to Resolve"
          example: 10
        only_business_days:
          type: boolean
          description: "Calculate only business days"
          example: true
        status:
          type: object
          properties:
            id:
              type: integer
              description: "Status id"
              example: 1
            name:
              type: string
              description: "Status name"
              example: "New"
        priority:
          type: object
          properties:
            id:
              type: integer
              description: "Priority id"
              example: 1
            name:
              type: string
              description: "Priority name"
              example: "Medium"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket type created date"
        createdBy:
          type: integer
          description: "Ticket type creator id"
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket type modified date"
        modifiedBy:
          type: integer
          description: "Id of user who made last change"
          example: 1
        order:
          type: integer
          description: "Ticket type order"
          example: 1111
        permissions:
          type: array
          items:
            type: integer
            example: 1
        due_date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket due date"
        assignees:
          type: object
          properties:
            everyTime:
              type: array
              items:
                type: integer
                example: 2
            roundRobin:
              type: array
              items:
                type: integer
                example: 3
    TicketTypeRequest:
      type: object
      properties:
        name:
          type: string
          description: "Ticket type name"
          example: "Ticket type name"
        description:
          type: string
          description: "Ticket type description"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
        daysToResolve:
          type: integer
          description: "Days to Resolve"
          example: 10
        only_business_days:
          type: boolean
          description: "Calculate only business days"
          example: true
        status:
          type: string
          description: "Status"
          enum: [active, inactive]
          example: active
        priority:
          type: integer
          description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
          enum: [0, 1, 2]
          example: 1
        permissions:
          type: array
          items:
            type: integer
            example: 1
        assignees:
          type: object
          properties:
            everyTime:
              type: array
              items:
                type: integer
                example: 2
            roundRobin:
              type: array
              items:
                type: integer
                example: 3
    BriefTicketComments:
      type: object
      properties:
        id:
          type: integer
          description: "Comment id"
          example: 1
        ticketId:
          type: integer
          description: "Ticket id"
          example: 2
        comment:
          type: string
          description: "Comment text"
          example: 'Comment text'
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Comment created date"
        createdBy:
          type: integer
          description: "Comment creator id"
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Comment modified date"
        modifiedBy:
          type: integer
          description: "Id of user who left comment"
          example: 1
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        preview_images:
          type: array
          items:
            $ref: "#/components/schemas/File"
        
        merchantVisible:
          type: boolean
          description: "Indicates if the comment is visible to Merchant users"
          example: true

        
    BriefTicketUsersInfo:
      type: object
      properties:
        id:
          type: integer
          description: "User id"
          example: 1
        name:
          type: string
          description: "User name"
          example: 1
        class:
          type: string
          description: "User class"
          example: 'Support'
    BriefTicketChecklistInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Checklist item Id"
          readOnly: true
          example: 1
        template_id:
          type: integer
          description: "Checklist template Id"
          readOnly: true
          example: 12
        name:
          type: string
          description: "Checklist item name"
          example: Test
        index:
          type: integer
          description: "Index in list"
          example: 0
        required:
          type: boolean
          description: "Flag is checklist are required"
          example: true
        fileRequired:
          type: boolean
          description: "Flag is checklist file are required"
          example: true
        commentRequiredToDoneTicket:
          type: boolean
          description: "Flag is comment are required to resolve ticket"
          example: true
        commentRequiredToDoneItem:
          type: boolean
          description: "Flag is checklist are required to resolve checklist item"
          example: true
        commentedAt:
          format: date-time
          readOnly: true
          example: '2019-01-01T12:04:40+05:00'
          description: "Datetime when user have commented checklist item"
        commentedBy:
          type: integer
          readOnly: true
          description: "User Id of user who have commented checklist item"
          example: 123
    ChecklistFullInfo:
      allOf:
        - $ref: "#/components/schemas/BriefTicketChecklistInfo"
        - type: object
          properties:
            completed:
              type: boolean
              description: "Flag is checklist are done"
              example: true
            completed_by:
              type: integer
              readOnly: true
              description: "User ID who compleated the checklist"
              example: 123
            completed_at:
              format: date-time
              readOnly: true
              example: '2019-01-01T12:04:40+05:00'
              description: "Datetime when user have completed the checklist item"
            files:
              type: array
              items:
                $ref: "#/components/schemas/File"
    CheckListRequest:
      type: object
      properties:
        index:
          type: integer
          description: "Checklist item index"
          example: 1
        files:
          type: array
          items:
            type: string
            example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
        attached_files:
          type: array
          items:
            type: integer
            description: "IDs of existing files"
            example: 123
        completed:
          type: boolean
          description: "Flag checklist are item completed"
          example: true
        comment:
          type: string
          description: "Comment for checklist item"
          example: 'Test comment'

    TicketSubscriptionData:
      type: object
      properties:
        ticket_url:
          type: string
          example: "http://iris/helpdesk/ticket/1"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        preview_images:
          type: array
          items:
            $ref: "#/components/schemas/File"
        due_date:
          type: string
          format: date
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket due date"
        due:
          type: string
          example: '7 days'
          description: "Ticket SLA"
        only_business_days:
          type: boolean
          example: true
          description: "Calculate only business days"

    TicketDetail:
      type: object
      properties:
        general:
          allOf:
            - $ref: "#/components/schemas/BriefTicketInfo"
            - type: object
              properties:
                created_username:
                  type: string
                  example: John Doe
                modified_username:
                  type: string
                  example: Jane Doe
                resolved_username:
                  type: string
                  example: Jack Doe
          items:
            $ref: "#/components/schemas/File"
        checklist:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistFullInfo"
    TypeDetail:
      type: object
      properties:
        general:
          $ref: "#/components/schemas/BriefTicketTypeInfo"
        checklist:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistFullInfo"
    CommentSubscriptionData:
      type: object
      properties:
        ticket_url:
          type: string
          example: "http://iris/helpdesk/ticket/1"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        merchantVisible:
          type: boolean
          description: "Indicates if the comment is visible for Merchant users"
          example: true

    BriefSubscriptionInfo:
      type: object
      required:
        - url
        - events
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
          description: "Subscription Id"
        url:
          type: string
          description: Subscription URL
          example: https://example.com/hook
        events:
          type: array
          description: Subscription Events
          items:
            type: string
            enum: [
              'subscription.test',
              'api.updated',
              'lead.created',
              'lead.updated',
              'lead.deleted',
              'lead.restored',
              'lead.status.updated',
              'lead.note.added',
              'lead.document.uploaded',
              'lead.email.received',
              'lead.signature.generated',
              'lead.signature.opened',
              'lead.signature.completed',

                            'turboapp.submitted',
              'turboapp.updated',
              'turboapp.approved',
              'turboapp.declined',
              'residuals.report.published',
              'residuals.lineitem.added',
              'chargeback.added',
              'chargeback.updated',
              'chargeback.reminder',
              'retrieval.added',
              'retrieval.updated',
              'retrieval.reminder',
              
              'ticket.created',
              'ticket.updated',
              'ticket.resolved',
              'ticket.commented',
              'ticket.comment.edited',
              'ticket.checklist.updated',
            ]
        options:
          type: object
          description: "Options for each event"
          properties:
            lead.status.updated:
              type: object
              properties:
                previousStatuses:
                  type: array
                  description: "Statuses from which a lead should be updated to report the update (any if not specified)"
                  items:
                    type: integer
                    example: 1
                newStatuses:
                  type: array
                  description: "Statuses to which a lead should be updated to report the update (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.created:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses with which a created lead should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.note.added:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose added notes should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.document.uploaded:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose uploaded documents should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.email.received:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose received emails should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
        multiple_at_once:
          type: boolean
          description: "Report multiple items in one request"

    TestSubscription:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'subscription.test'
              description: "Event ID"
        data:
          type: object
          properties:
            message:
              type: string
              example: "Test event data from https://iriscrm.com"

    ApiUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'api.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            version:
              type: string
              example: 1.0.0
              description: "Version number"
            update:
              type: string
              example: 'required'
              enum: [
                'required',
                'optional'
              ]
              description: "Should users do an update of their API clients functional"
            details:
              type: array
              items:
                type: object
                properties:
                  description:
                    type: string
                    example: "Improving a change log."
                    description: "Description of update"
                  link:
                    type: string
                    example: "https://iriscrm.com/api#/paths/~1subscriptions~1sample~1api.updated/get"
                    description: "Link to endpoint documentation"
                  type:
                    type: string
                    example: "create"
                    enum: [
                      'create',
                      'update'
                    ]
                    description: "Type of API update"
            createdAt:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Date and time of creation (ISO 8601)"

    LeadCreatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.created'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              $ref: "#/components/schemas/FullLeadSubscription"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                $ref: "#/components/schemas/FullLeadSubscription"

    LeadUpdatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/FullLeadSubscription"
                - type: object
                  properties:
                    updated_at:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    updated_by:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/FullLeadSubscription"
                  - type: object
                    properties:
                      updated_at:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      updated_by:
                        $ref: "#/components/schemas/UserStructure"

    LeadDeletedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.deleted'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    deletedBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      deletedBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadRestoredEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.restored'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    restoredAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    restoredBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      restoredAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      restoredBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadStatusUpdatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.status.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/FullLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    previousStatus:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Status ID"
                        name:
                          type: string
                          example: "Status One"
                          description: "Status Name"
                    newStatus:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                          description: "Status ID"
                        name:
                          type: string
                          example: "Status Two"
                          description: "Status Name"
                    statusUpdatedAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    statusUpdatedBy:
                      $ref: "#/components/schemas/UserStructure"
                    salesRep:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/FullLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      previousStatus:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Status ID"
                          name:
                            type: string
                            example: "Status One"
                            description: "Status Name"
                      newStatus:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                            description: "Status ID"
                          name:
                            type: string
                            example: "Status Two"
                            description: "Status Name"
                      statusUpdatedAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      statusUpdatedBy:
                        $ref: "#/components/schemas/UserStructure"
                      salesRep:
                        $ref: "#/components/schemas/UserStructure"

    LeadNoteAddedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.note.added'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    note:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Note ID"
                        name:
                          type: string
                          example: "Note text"
                          description: "Note text"
                        pinned:
                          type: boolean
                          example: true
                          description: "Whether The Note Is Pinned"
                        images:
                          type: array
                          items:
                            type: string
                            example: "http://dummy.url/fake.jpeg"
                        createdAt:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: "Date and time of creation (ISO 8601)"
                        createdBy:
                          $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    properties:
                      note:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Note ID"
                          name:
                            type: string
                            example: "Note text"
                            description: "Note text"
                          pinned:
                            type: boolean
                            example: true
                            description: "Whether The Note Is Pinned"
                          images:
                            type: array
                            items:
                              type: string
                              example: "http://dummy.url/fake.jpeg"
                          createdAt:
                            type: string
                            format: date-time
                            example: '2019-01-01T12:04:40+05:00'
                            description: "Date and time of creation (ISO 8601)"
                          createdBy:
                            $ref: "#/components/schemas/UserStructure"

    LeadDocumentUploadedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.document.uploaded'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    document:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Document ID"
                        label:
                          type: string
                          example: "Label"
                          description: "Document label"
                        filename:
                          type: string
                          example: "file.zip"
                          description: "Filename"
                        file:
                          type: string
                          example: "http://dummy.url/file.zip"
                          description: "File url"
                        uploadedAt:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: "Date and time of uploading (ISO 8601)"
                        uploadedBy:
                          $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    properties:
                      document:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Document ID"
                          label:
                            type: string
                            example: "Label"
                            description: "Document label"
                          filename:
                            type: string
                            example: "file.zip"
                            description: "Filename"
                          file:
                            type: string
                            example: "http://dummy.url/file.zip"
                            description: "File url"
                          uploaded_at:
                            type: string
                            format: date-time
                            example: '2019-01-01T12:04:40+05:00'
                            description: "Date and time of uploading (ISO 8601)"
                          uploaded_by:
                            $ref: "#/components/schemas/UserStructure"

    LeadEmailReceivedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.email.received'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              type: object
              description: "'lead' property is passed when 'Multiple at once' feature is disabled"
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Lead ID"
                lead_url:
                  type: string
                  example: "http://iris/lead/view/1"
                  description: "Lead URL"
                name:
                  type: string
                  example: "Super Lead"
                  description: "Lead Name"
                emailAddress:
                  type: string
                  example: "lead@email.com"
                  description: "Lead Default Email"
                contact:
                  type: string
                  example: "John Doe"
                  description: "Lead Default Contact Name"
                phone:
                  type: string
                  example: "555-555-5555"
                  description: "Lead Default Contact Phone Number"
                address:
                  type: object
                  properties:
                    address:
                      type: string
                      example: "86th street, apt. 1"
                      description: "Lead Default Address"
                    city:
                      type: string
                      example: "Brooklyn"
                      description: "Lead Default City"
                    state:
                      type: string
                      example: "NY"
                      description: "Lead Default State"
                    zip:
                      type: string
                      example: "10001"
                      description: "Lead Default ZIP"
                email:
                  type: object
                  properties:
                    from:
                      type: string
                      example: "John Doe <john@doe.com>"
                      description: "Sent from (name and email)"
                    to:
                      type: string
                      example: "jack@sparrow.com"
                      description: "Sent to(email)"
                    subject:
                      type: string
                      example: "Subject"
                      description: "Email subject"
                    bodyText:
                      type: string
                      example: "Pure text"
                      description: "Email message without html"
                    bodyHtml:
                      type: string
                      example: "<html>Html content</html>"
                      description: "Email message including html"
                    sentAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of receiving the email (ISO 8601)"
                assignedUsers:
                  $ref: "#/components/schemas/UserListStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Lead ID"
                  lead_url:
                    type: string
                    example: "http://iris/lead/view/1"
                    description: "Lead URL"
                  name:
                    type: string
                    example: "Super Lead"
                    description: "Lead Name"
                  emailAddress:
                    type: string
                    example: "lead@email.com"
                    description: "Lead Default Email"
                  contact:
                    type: string
                    example: "John Doe"
                    description: "Lead Default Contact Name"
                  phone:
                    type: string
                    example: "555-555-5555"
                    description: "Lead Default Contact Phone Number"
                  address:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "86th street, apt. 1"
                        description: "Lead Default Address"
                      city:
                        type: string
                        example: "Brooklyn"
                        description: "Lead Default City"
                      state:
                        type: string
                        example: "NY"
                        description: "Lead Default State"
                      zip:
                        type: string
                        example: "10001"
                        description: "Lead Default ZIP"
                  email:
                    type: object
                    properties:
                      from:
                        type: string
                        example: "John Doe <john@doe.com>"
                        description: "Sent from (name and email)"
                      to:
                        type: string
                        example: "jack@sparrow.com"
                        description: "Sent to(email)"
                      subject:
                        type: string
                        example: "Subject"
                        description: "Email subject"
                      bodyText:
                        type: string
                        example: "Pure text"
                        description: "Email message without html"
                      bodyHtml:
                        type: string
                        example: "<html>Html content</html>"
                        description: "Email message including html"
                      sentAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of receiving the email (ISO 8601)"
                  assignedUsers:
                    $ref: "#/components/schemas/UserListStructure"

    
    TurboAppSubmited:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.submitted'
              description: "Event ID"
        data:
          type: object
          properties:
            applications:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Application ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  submission_id:
                    type: string
                    example: "sajjcjasdhrccer"
                    description: "Application submission identifier"
                  dba:
                    type: string
                    example: "Company name"
                    description: "Merchant name"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  createdAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of creation (ISO 8601)"
                  createdBy:
                    $ref: "#/components/schemas/UserStructure"
                  finishedAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of submission (ISO 8601)"
                  finishedBy:
                    $ref: "#/components/schemas/UserStructure"
    TurboAppUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Approved"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  updatedAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account update (ISO 8601)"
    TurboAppApproved:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.approved'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  processor:
                    type: string
                    example: "Processor Name"
                    description: "Processor name"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  contact_address:
                    type: string
                    example: '47 W 13th St, New York, NY 10011, USA'
                  contact_phone:
                    type: string
                    example: '111-111-1111'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  co_name:
                    type: string
                    example: 'Jon Doe'
                  approved_at:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account approve (ISO 8601)"
                  legal_name:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Approved"
                  entitlements:
                    type: object
                    properties:
                      card_type:
                        type: string
                        example: 'Card type'
                      srv:
                        type: string
                        example: 'SRV'
                      proc_flag:
                        type: string
                        example: 'Flag'
                  users:
                    type: array
                    items:
                      type: string
                      example: 'John Doe (Sales Reps)'
                  date_submitted:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account submit (ISO 8601)"
                  date_decision:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of decision (ISO 8601)"
                  mcc_code:
                    type: string
                    example: '5441'
                    description: "MCC code"
                  annual_sales:
                    type: string
                    example: '$100000'
                    description: "Annual sales"
                  average_ticket:
                    type: string
                    example: '$100000'
                    description: "Average ticket"
                  tier:
                    type: string
                    example: 'Tier 1'
                  tier_status:
                    type: string
                    example: 'N/A'
    TurboAppDeclined:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.declined'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  processor:
                    type: string
                    example: "Processor Name"
                    description: "Processor name"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Declined"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Declined"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  contact_address:
                    type: string
                    example: '47 W 13th St, New York, NY 10011, USA'
                  contact_phone:
                    type: string
                    example: '111-111-1111'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  co_name:
                    type: string
                    example: 'Jon Doe'
                  declined_at:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account was declined (ISO 8601)"
                  legal_name:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Declined"
                  entitlements:
                    type: object
                    properties:
                      card_type:
                        type: string
                        example: 'Card type'
                      srv:
                        type: string
                        example: 'SRV'
                      proc_flag:
                        type: string
                        example: 'Flag'
                  users:
                    type: array
                    items:
                      type: string
                      example: 'John Doe (Sales Reps)'
                  date_submitted:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account submit (ISO 8601)"
                  date_decision:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of decision (ISO 8601)"
                  mcc_code:
                    type: string
                    example: '5441'
                    description: "MCC code"
                  annual_sales:
                    type: string
                    example: '$100000'
                    description: "Annual sales"
                  average_ticket:
                    type: string
                    example: '$100000'
                    description: "Average ticket"
                  tier:
                    type: string
                    example: 'Tier 1'
                  tier_status:
                    type: string
                    example: 'N/A'

    ReportPublished:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'residuals.report.published'
              description: "Event ID"
        data:
          type: object
          properties:
            reports:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  month:
                    type: integer
                    example: 3
                  year:
                    type: integer
                    example: 2019
                  sys_prin:
                    type: integer
                    example: 34212312312
                  created:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Ticket created date"
                  created_by:
                    $ref: "#/components/schemas/UserStructure"
                  added_merchants_count:
                    type: integer
                    example: 34212312312
                  rows_count:
                    type: integer
                    example: 123
                  revision:
                    type: integer
                    example: 2
                  deactivated_merchants_count:
                    type: integer
                    example: 1
                  processor_id:
                    type: integer
                    example: 1
                  processor_name:
                    type: string
                    example: Test Processor
                  sum_transactions:
                    type: integer
                    example: 1664667
                  sum_volume:
                    type: number
                    example: 0
                  sum_net:
                    type: number
                    example: 0
                  sum_agent_net:
                    type: integer
                    example: 0
    LineItemAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'residuals.lineitem.added'
              description: "Event ID"
        data:
          type: object
          properties:
            line_items:
              type: array
              items:
                $ref: "#/components/schemas/LineItems"
    

    TicketCreated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.created'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Ticket"
                  - $ref: "#/components/schemas/TicketCreatedBlock"
                  - $ref: "#/components/schemas/TicketSubscriptionData"

    TicketUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Ticket"
                  - $ref: "#/components/schemas/TicketCreatedBlock"
                  - $ref: "#/components/schemas/TicketSubscriptionData"
                  - type: object
                    properties:
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                      last_comment:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket last comment date"
    TicketResolved:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.resolved'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket created date"
                      created_by:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                      last_comment:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket last comment date"
                      resolved:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket resolved date"
                      resolved_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/Ticket"
                  - $ref: "#/components/schemas/TicketSubscriptionData"
    TicketCommented:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.commented'
              description: "Event ID"
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        description: "Comment id"
                        example: 1
                      ticketId:
                        type: integer
                        description: "Ticket id"
                        example: 2
                      comment:
                        type: string
                        description: "Comment text"
                        example: 'Comment text'
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment created date"
                      createdBy:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/CommentSubscriptionData"
    SubscriptionCommentEdited:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.comment.edited'
              description: "Event ID"
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        description: "Comment id"
                        example: 1
                      ticketId:
                        type: integer
                        description: "Ticket id"
                        example: 2
                      comment:
                        type: string
                        description: "Comment text"
                        example: 'Comment text'
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment created date"
                      createdBy:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/CommentSubscriptionData"
    # ChecklistUpdated:
    #   type: object
    #   properties:
    #     hook:
    #       type: object
    #       properties:
    #         requestId:
    #           type: integer
    #           example: 1
    #           description: "Request ID"
    #         event:
    #           type: string
    #           example: 'ticket.checklist.updated'
    #           description: "Event ID"
    #     data:
    #       type: object
    #       properties:
    #         tickets:
    #           type: array
    #           items:
    #             type: object
    #             properties:
    #               ticket:
    #                 allOf:
    #                   - $ref: "#/components/schemas/BriefTicketInfo"
    #                   - $ref: "#/components/schemas/TicketSubscriptionData"
    #                   - type: object
    #                     properties:
    #                       files:
    #                         type: array
    #                         items:
    #                           $ref: "#/components/schemas/File"
    #               checklist:
    #                 type: array
    #                 items:
    #                   allOf:
    #                     - $ref: "#/components/schemas/BriefTicketChecklistInfo"
    #                     - type: object
    #                       properties:
    #                         fileId:
    #                           type: integer
    #                           description: "Checklist file Id"
    #                           readOnly: true
    #                           example: 123
    #                         completed:
    #                           type: boolean
    #                           description: "Flag is checklist are done"
    #                           example: true
    #                         completed_by:
    #                           type: integer
    #                           readOnly: true
    #                           description: "User ID who compleated the checklist"
    #                           example: 123
    #                         completed_at:
    #                           format: date-time
    #                           readOnly: true
    #                           example: '2019-01-01T12:04:40+05:00'
    #                           description: "Datetime when user have completed the checklist item"
    #                         comment:
    #                           type: string
    #                           description: "Comment text"
    #                           example: 'Test comment'
    #                         file:
    #                           $ref: "#/components/schemas/File"
    UserStructure:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "User ID"
        name:
          type: string
          example: "John Doe"
          description: "User Name"
        userClass:
          type: string
          example: "Super Admin"
          description: "User Class"

    UserListStructure:
      type: array
      items:
        $ref: "#/components/schemas/UserStructure"

    SignatureGenerated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.generated'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"
    SignatureOpened:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.opened'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"
    SignatureSigned:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.completed'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"

    ShortLeadSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Lead ID"
        lead_url:
          type: string
          example: "http://iris/lead/view/1"
          description: "Lead URL"
        name:
          type: string
          example: "Super Lead"
          description: "Lead Name"
        email:
          type: string
          example: "lead@email.com"
          description: "Lead Default Email"
        contact:
          type: string
          example: "John Doe"
          description: "Lead Default Contact Name"
        phone:
          type: string
          example: "555-555-5555"
          description: "Lead Default Contact Phone Number"
        address:
          type: object
          properties:
            address:
              type: string
              example: "86th street, apt. 1"
              description: "Lead Default Address"
            city:
              type: string
              example: "Brooklyn"
              description: "Lead Default City"
            state:
              type: string
              example: "NY"
              description: "Lead Default State"
            zip:
              type: string
              example: "10001"
              description: "Lead Default ZIP"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"

    FullLeadSubscription:
      allOf:
        - $ref: "#/components/schemas/ShortLeadSubscription"
        - type: object
          properties:
            id:
              type: integer
              example: 1
              description: "Lead ID"
            lead_url:
              type: string
              example: "http://iris/lead/view/1"
              description: "Lead URL"
            name:
              type: string
              example: "Super Lead"
              description: "Lead Name"
            email:
              type: string
              example: "lead@email.com"
              description: "Lead Default Email"
            contact:
              type: string
              example: "John Doe"
              description: "Lead Default Contact Name"
            phone:
              type: string
              example: "555-555-5555"
              description: "Lead Default Contact Phone Number"
            address:
              type: object
              properties:
                address:
                  type: string
                  example: "86th street, apt. 1"
                  description: "Lead Default Address"
                city:
                  type: string
                  example: "Brooklyn"
                  description: "Lead Default City"
                state:
                  type: string
                  example: "NY"
                  description: "Lead Default State"
                zip:
                  type: string
                  example: "10001"
                  description: "Lead Default ZIP"
            group:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Group ID"
                name:
                  type: string
                  example: "Group"
                  description: "Group Name"
            category:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Status category ID"
                name:
                  type: string
                  example: "Status category"
                  description: "Status category Name"
            status:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Status ID"
                name:
                  type: string
                  example: "Status"
                  description: "Status Name"
            campaign:
              type: object
              properties:
                id:
                  type: integer
                  nullable: true
                  example: 1
                  description: "Campaign ID"
                name:
                  type: string
                  nullable: true
                  example: "Campaign"
                  description: "Campaign Name"
            source:
              type: object
              properties:
                id:
                  type: integer
                  nullable: true
                  example: 1
                  description: "Source ID"
                name:
                  type: string
                  nullable: true
                  example: "Source"
                  description: "Source Name"
            createdAt:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Date and time of creation (ISO 8601)"
            createdBy:
              $ref: "#/components/schemas/UserStructure"

    SignatureSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hash:
          type: string
          example: f432f013
        url:
          type: string
          example: "https://iriscrm.com/sign/f432f013"
        status:
          type: string
          example: Generated
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Signature created date"
        created_by:
          $ref: "#/components/schemas/UserStructure"
        multi_signer:
          type: boolean
          example: false
        completed:
          type: boolean
          example: false
        signers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Tom Sawyer
              email:
                type: string
                example: tomsawyer@example.com
    ApplicationSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: App name
        group_id:
          type: integer
          example: 1
        group_name:
          type: string
          example: Group name

    
    ChargebackAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.added'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                $ref: '#/components/schemas/ChargebackReplyResponse'
    ChargebackUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                $ref: '#/components/schemas/ChargebackReplyResponse'
    ChargebackReminder:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.reminder'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ChargebackReplyResponse'
                  - type: object
                    properties:
                      due_in:
                        type: integer
                        example: 7
                        description: "Case due in days"
    RetrievalAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.added'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                $ref: '#/components/schemas/RetrievalsReplyResponse'
    RetrievalUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                $ref: '#/components/schemas/RetrievalsReplyResponse'
    RetrievalReminder:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.reminder'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/RetrievalsReplyResponse'
                  - type: object
                    properties:
                      due_in:
                        type: integer
                        example: 7
                        description: "Case due in days"
    

security:
  - Token: []

paths:
  /merchants:
    get:
      operationId: getMerchants
      tags:
        - 'Merchants'
      summary: Get a list of merchants
      description: Return a list of merchants
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [mid, name, closed, opened, created, modified, first_batch, last_batch, processor, group, datasource, deactivated, vim, status, active]
          description: Sorting of merchants by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: group
          schema:
            type: string
          description: Filter merchants by a group name
        - in: query
          name: processor
          schema:
            type: string
          description: Filter merchants by a processor name
        - in: query
          name: datasource
          schema:
            type: string
          description: Filter merchants by a data source name
        - in: query
          name: mid
          schema:
            type: string
          description: Filter merchants by a partial merchant number
        - in: query
          name: name
          schema:
            type: string
          description: Filter merchants by a partial merchant name
        - in: query
          name: vim
          schema:
            type: string
            enum: [Yes, No]
          description: Filter merchants by a merchant vim field
        - in: query
          name: active
          schema:
            type: string
            enum: [Yes, No]
          description: Filter merchants by a merchant active field
        - in: query
          name: status
          schema:
            type: string
            enum: [Open, Closed]
          description: Filter merchants by a merchant status field
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [opened, closed, created, modified, first_batch, last_batch, deactivated]
          description: Filter merchants by a merchant specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 for created and modified properties (**Please note that `+` sign should be encoded to `%2B`**), for others properties you should use simple date format (Y-m-d).'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 for created and modified properties (**Please note that `+` sign should be encoded to `%2B`**), for others properties you should use simple date format (Y-m-d)'
      responses:
        200:
          description: A JSON array of merchants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/BriefMerchantInfo"
                        - type: object
                          properties:
                            leads:
                              type: array
                              description: "List of Lead IDs"
                              items:
                                type: integer
                                example: 1
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $page = 56; // int | Page number
            $sort_by = "mid"; // string | Sorting of merchants by the field value
            $sort_dir = "asc"; // string | Direction of sorting
            $group = "group name"; // string | Filter merchants by a group name
            $processor = "processor name"; // string | Filter merchants by a processor name
            $datasource = "datasource name"; // string | Filter merchants by a data source name
            $mid = "1234"; // string | Filter merchants by a partial merchant number
            $name = "test"; // string | Filter merchants by a partial merchant name
            $vim = "yes"; // string | Filter merchants by a merchant vim field
            $active = "yes"; // string | Filter merchants by a merchant active field
            $status = "open"; // string | Filter merchants by a merchant status field
            $date_filter = "opened"; // string | Filter merchants by a merchant specific date field
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Start date for date_filter filter in format ISO 8601(Y-m-d\\TH:i:sP) for created and modified properties, for others properties you should use simple date format (Y-m-d).
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | End date for date_filter filter in format ISO 8601(Y-m-d\\TH:i:sP) for created and modified properties, for others properties you should use simple date format (Y-m-d)

            try {
                $result = $apiInstance->merchantsGet($page, $sort_by, $sort_dir, $group, $processor, $datasource, $mid, $name, $vim, $active, $status, $date_filter, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}:
    get:
      operationId: getMerchantInformation
      tags:
        - "Merchants"
      summary: Get detailed merchant information
      description: Finds a merchant by its number and returns merchant and account demographics from the processor
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      responses:
        200:
          description: Detailed merchant account information
          content:
            application/json:
              schema:
                type: object
                properties:
                  general:
                    $ref: '#/components/schemas/BriefMerchantInfo'
                  account_information:
                    type: array
                    items:
                      type: string
                  leads:
                    type: array
                    description: A list of linked lead Id's. First from this list is always used as a primary lead.
                    items:
                      type: integer
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberGet($merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: updateMerchantInformation
      tags:
        - "Merchants"
      summary: "Update an existing merchant"
      description: "Update an existing merchant"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        description: Merchant changes (send only fields you want to change)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Merchant name
                  example: Test Name
                opened:
                  type: string
                  format: date
                  description: Merchant open date (YYYY-MM-DD)
                  example: "2015-10-23"
                closed:
                  type: string
                  format: date
                  description: Merchant closed date (YYYY-MM-DD)
                  example: "2018-05-03"
                processor:
                  type: string
                  description: Processor name
                  example: Test
                datasource:
                  type: string
                  description: Data source name
                  example: Test
                group:
                  type: string
                  description: Group name
                  example: Test
                vim:
                  type: string
                  description: Is VIM?
                  enum: [Yes, No]
                  example: Yes
                status:
                  type: string
                  description: Merchant status
                  enum: [Closed, Open]
                  example: Closed
                active:
                  type: string
                  description: Merchant active flag
                  enum: [Yes, No]
                  example: Yes
      responses:
        200:
          description: Merchant has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Merchant has been updated successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'name' => 'Test Name',
                  'opened' => '2015-10-23',
                  'closed' => '2018-05-03',
                  'processor' => 'Test',
                  'datasource' => 'Test',
                  'group' => 'Test',
                  'vim' => 'Yes',
                  'status' => 'Closed',
                  'active' => 'Yes',
                ];
                $result = $apiInstance->merchantsMerchantNumberPatch($body, $merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberPatch: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}/deposits/{year}/{month}/{day}:
    get:
      operationId: getDepositRecords
      tags:
        - "Merchants"
      summary: Get a list of deposits records and totals
      description: Find all deposit records using a month and year - or a date range.
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Start deposits year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Start deposits month
          required: true
        - in: path
          name: day
          schema:
            type: integer
            default: 1
          description: Start deposits day.
          required: true
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: '2019-01-01'
          description: Filter deposits by a date in format Y-m-d. Should be no more than 90 days from the start date.
      responses:
        200:
          description: A list of deposits
          content:
            application/json:
              schema:
                type: object
                properties:
                  deposits:
                    $ref: "#/components/schemas/Deposits"
                  adjustments:
                    $ref: "#/components/schemas/Adjustments"
                  totals:
                    type: object
                    properties:
                      total_paid_by_us:
                        type: string
                        example: "100.00"
                      monthly_total:
                        type: string
                        example: "1100.00"
                      adjustments:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: "Paid by Amex"
                            amount:
                              type: string
                              example: "1100.00"
                      deposits:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              example: "01/01/2021"
                            amount:
                              type: string
                              example: "1100.00"
                      per_card_type:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: "MC"
                            amount:
                              type: string
                              example: "41761.32"
                            count:
                              type: integer
                              example: 21
                      transactions_count:
                        type: integer
                        example: 21
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/transactions:
    get:
      operationId: getBatches
      tags:
        - "Merchants"
      summary: Get a list of batches and transactions
      description: Find all batches by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of batches and transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MonetaryBatch"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
                  adjustments:
                    $ref: "#/components/schemas/Adjustments"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberTransactionsGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberTransactionsGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}/chargebacks:
    get:
      operationId: getChargebacks
      tags:
        - "Merchants"
      summary: Get a list of chargeback cases
      description: Find all chargeback cases by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of chargeback cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Chargeback"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberChargebacksGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberChargebacksGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}/chargebacks/{caseNumber}:
    get:
      operationId: getChargebackCaseInformation
      tags:
        - "Merchants"
      summary: Get detailed chargeback case information
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      responses:
        200:
          description: Chargeback detail information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargebackReplyResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/dispute_reverse:
    post:
      operationId: disputeChargeback
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Dispute Chargeback Case
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case ID
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargebackReplyDisputeRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/credit_issued:
    post:
      operationId: ReplyToChargebackCaseCreditIssued
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Credit Issued
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargebackReplyCreditIssuedRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/accept:
    post:
      operationId: ReplyToChargebackCaseAcceptChargeback
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Accept Chargeback
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals:
    get:
      operationId: getRetrievalCases
      tags:
        - "Merchants"
      summary: Get a list of retrieval cases
      description: Find all retrieval cases by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of retrieval cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Retrieval"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberRetrievalsGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberRetrievalsGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}/retrievals/{caseNumber}:
    get:
      operationId: getDetailedRetrievalCaseInformation
      tags:
        - "Merchants"
      summary: Get detailed retrieval case information
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: A list of retrieval cases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrievalsReplyResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/response:
    post:
      operationId: ReplyToRetrievalCaseRetrievalResponse
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Retrieval Response
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Merchant has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/response_with_signature:
    post:
      operationId: ReplyToRetrievalCaseRetrievalResponseWithSignature
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Retrieval Response with Signature
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/unable_to_fulfill_request:
    post:
      operationId: ReplyToRetrievalCaseUnableToFulfillRetrievalCaseRequest
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Unable to Fulfill Retrieval Case Request
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/unable_to_locate_retrieval:
    post:
      operationId: ReplyToRetrievalCaseUnableToLocateRetrievalCase
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Unable to Locate Retrieval Case
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/credit_issued:
    post:
      operationId: ReplyToRetrievalCreditIssued
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval - Credit Issued
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyCreditIssuedRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/imprint_and_signature:
    post:
      operationId: ReplyToRetrievalCaseImprintAndSignature
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Imprint and Signature
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/responding_by_other_means:
    post:
      operationId: ReplyToRetrievalCaseRespondingByOtherMeans
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Responding by Other Means
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/add_notes_images:
    post:
      operationId: ReplyToRetrievalCaseAddUserNotesImages
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Add User Notes/Images
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: integer
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/statements:
    get:
      operationId: getStatements
      tags:
        - "Merchants"
      summary: Get a list of statements
      description: Return all statements by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of statements
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "Statement Id"
                        date:
                          type: string
                          example: 'March 2019'
                          description: "Statement date"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberStatementsGet($merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberStatementsGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/{merchantNumber}/statements/{statementId}:
    get:
      operationId: downloadStatement
      tags:
        - "Merchants"
      summary: Download a statement
      description: Download a statement
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: statementId
          schema:
            type: integer
          description: Statement Id
          required: true
      responses:
        200:
          description: Statement file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Statement file"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberStatementsStatementIdGet($merchant_number, $statement_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberStatementsStatementIdGet: ', $e->getMessage(), PHP_EOL;
            }
  /merchants/files:
    post:
      operationId: uploadAttachment
      tags:
        - "Merchants"
      summary: Upload an attachment to a chargeback or retrieval dispute case
      description: Upload an attachment to a chargeback or retrieval dispute case
      parameters:
        - in: query
          name: filename
          schema:
            type: string
            example: 'test_name.pdf'
          description: File name for validation
          required: true
      responses:
        200:
          description: Document
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  file_id:
                    type: string
                    example: "15dfd5e51a10145.dispute_file.pdf"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/files/{fileId}:
    get:
      operationId: downloadChargebackCaseFiles
      tags:
        - "Merchants"
      summary: Download chargeback case files
      description: Download a file(s) attached to the chargeback case
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: integer
          description: Chargeback case number
          required: true
        - in: path
          name: fileId
          schema:
            type: integer
          description: File Id (leave empty to get all case files)
          required: true
      responses:
        200:
          description: Files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DisputeFile"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /residuals/reports/summary/{year}/{month}:
    get:
      operationId: getResidualsSummaryData
      tags:
        - 'Residuals'
      summary: Get residuals summary data
      description: Get residuals summary data by year and month
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: processor
          schema:
            type: integer
            example: 12
          description: Get residuals summary only for specific processor
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of totals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SummaryResponse"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/reports/summary/rows/{processor_id}/{year}/{month}:
    get:
      operationId: getResiduals
      tags:
        - 'Residuals'
      summary: Get residuals summary with merchant rows
      description: Get residuals reports summary data with merchant rows for the processor by year and month
      parameters:
        - in: path
          name: processor_id
          schema:
            type: integer
          description: Processor ID
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: template
          schema:
            type: boolean
            example: false
          description: Flag for applying user templates (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page

      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MerchantRow"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/reports/details/{processor_id}/{year}/{month}:
    get:
      operationId: GetResidualsDetailsWithMerchantRows
      tags:
        - 'Residuals'
      summary: Get residuals details with merchant rows
      description: Get residuals reports calculation details for the processor by year and month
      parameters:
        - in: path
          name: processor_id
          schema:
            type: integer
          description: Processor ID
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualsDetails"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/lineitems/{year}/{month}:
    get:
      operationId: getResidualsLineItems
      tags:
        - 'Residuals'
      summary: Get residuals line items
      description: Get residuals line items by month and year
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Line Item year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Line Item month
          required: true
        - in: query
          name: created
          schema:
            type: string
            format: date
            example: '2019-01-31'
          description: Filter line items by a date (Y-m-d)
        - in: query
          name: dba
          schema:
            type: string
            example: Test Merchant
        - in: query
          name: username
          schema:
            type: string
            example: Jane Doe
        - in: query
          name: user_id
          schema:
            type: integer
            example: 1
        - in: query
          name: description
          schema:
            type: string
            example: Description from Line Item
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LineItems"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/templates/:
    get:
      operationId: getResidualsTemplates
      tags:
        - 'Residuals'
      summary: Get residuals templates
      description: Get a list of residuals templates with their respective rules
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter templates by name
        - in: query
          name: revision
          schema:
            type: string
          description: Filter templates by revision
        - in: query
          name: creator
          schema:
            type: integer
          description: Filter templates by creator
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualTemplate"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/templates/assigned/{year}/{month}:
    get:
      operationId: GetUsersWithAssignedResidualsTemplates
      tags:
        - 'Residuals'
      summary: Get a list of users with assigned residuals templates
      description: Get a list of users with assigned residuals templates by month and year
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: user
          schema:
            type: integer
          description: Filter templates by user
        - in: query
          name: processor
          schema:
            type: integer
          description: Filter templates by processor
        - in: query
          name: group
          schema:
            type: integer
          description: Filter templates by group
        - in: query
          name: class
          schema:
            type: integer
          description: Filter templates by user class
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualTemplateAssigned"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"


  /api/v1/leads:
    post:
      operationId: createLead
      tags:
      - "Leads"
      summary: Create a lead
      description: Create a lead
      requestBody:
        description: Lead details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - fields
              properties:
                campaign:
                  type: integer
                  description: Campaign Id
                  example: 1
                status:
                  type: integer
                  description: Status Id
                  example: 1
                source:
                  type: integer
                  description: Source Id
                  example: 1
                group:
                  type: integer
                  description: Group Id
                  example: 1
                users:
                  type: array
                  description: Ids of users to assign to a new lead
                  items:
                    type: integer
                  example: [1, 2]
                fields:
                  type: array
                  description: Lead fields
                  items:
                    type: object
                    required:
                    - id
                    - value
                    properties:
                      id:
                        type: string
                        description: Field Id
                        example: 1
                      record:
                        type: string
                        description: Record Id
                        example: 1
                      value:
                        type: string
                        description: Field value
                        example: Test
      responses:
        200:
          description: Lead has been created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  leadId:
                    type: integer
                    description: Lead Id
                    example: 1
                  message:
                    type: string
                    description: Result message
                    example: The lead (1) has been created successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'campaign' => 1,
              'status' => 1,
              'source' => 1,
              'group' => 1,
              'users' => [1, 2],
              'fields' => [
                [
                  'id' => 1,
                  'record' => 1,
                  'value' => 'Test',
                ],
              ],
            ];

            try {
                $result = $apiInstance->leadsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getLeads
      tags:
      - "Leads"
      summary: Get a list of leads
      description: Get a list of leads
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      - in: query
        name: sort_by
        schema:
          type: string
          enum: [
            id,
                        mid,
                        name,
            created,
            modified
          ]
        description: Sorting of leads by the field value
      - in: query
        name: sort_dir
        schema:
          type: string
          enum: [asc, desc]
          default: asc
        description: Direction of sorting
      - in: query
        name: group
        schema:
          type: integer
        description: Filter leads by a group id

      
      - in: query
        name: mid
        schema:
          type: integer
        description: Filter leads by a merchant id
      
      - in: query
        name: campaign
        schema:
          type: integer
        description: Filter leads by a campaign id
      - in: query
        name: source
        schema:
          type: integer
        description: Filter leads by a source id
      - in: query
        name: status
        schema:
          type: integer
        description: Filter leads by a status id
      - in: query
        name: category
        schema:
          type: integer
        description: Filter leads by a status category id
      - in: query
        name: user
        schema:
          type: integer
        description: Filter leads by a user id
      - in: query
        name: date_filter
        schema:
          type: string
          enum: [created, modified, last_note, last_status, last_task, last_task_due, last_appointment, last_appointment_due]
        description: Filtering leads by a date range depends on this filter
      - in: query
        name: start_date
        schema:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        description: Filter leads by a date in ISO 8601 format (Y-m-d\TH:i:sP) (**Please note that `+` sign should be encoded to `%2B`**)
      - in: query
        name: end_date
        schema:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        description: Filter leads by a date in ISO 8601 format (Y-m-d\TH:i:sP) (**Please note that `+` sign should be encoded to `%2B`**)
      - in: query
        name: email
        schema:
          type: string
        description: Filter leads by a email
      responses:
        200:
          description: A JSON array of leads
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefLeadInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $page = 56; // int | Page number
            $sort_by = "sort_by_example"; // string | Sorting of leads by the field value
            $sort_dir = "sort_dir_example"; // string | Direction of sorting
            $group = 56; // int | Filter leads by a group id
            $campaign = 56; // int | Filter leads by a campaign id
            $source = 56; // int | Filter leads by a source id
            $status = 56; // int | Filter leads by a status id
            $category = 56; // int | Filter leads by a status category id
            $user = 56; // int | Filter leads by a user id
            $date_filter = "date_filter_example"; // string | Filtering leads by a date range depends on this filter
            $start_date = new \DateTime("2013-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)
            $end_date = new \DateTime("2013-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)
            $email = "email_example"; // string | Filter leads by a email

            try {
              $result = $apiInstance->leadsGet($page, $sort_by, $sort_dir, $group, $campaign, $source, $status, $category, $user, $date_filter, $start_date, $end_date, $email);
              print_r($result);
            } catch (Exception $e) {
              echo 'Exception when calling LeadsApi->leadsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}:
    get:
      operationId: getDetailedLeadInformation
      tags:
      - "Leads"
      summary: Get detailed lead information
      description: Get detailed lead information
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      responses:
        200:
          description: Detailed lead information
          content:
            application/json:
              schema:
                type: object
                properties:
                  general:
                    $ref: '#/components/schemas/BriefLeadInfo'
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                          enum: [tab, set]
                          example: tab
                        record:
                          type: integer
                          description: Record Id
                        fields:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                description: Field Id
                              field:
                                type: string
                                description: Field name
                              value:
                                type: string
                                description: Field value
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: updateLead
      tags:
      - "Leads"
      summary: Update a lead
      description: Update a lead
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Lead changes (send only fields you want to change)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  type: integer
                  description: Campaign Id
                  example: 1
                status:
                  type: integer
                  description: Status Id
                  example: 1
                source:
                  type: integer
                  description: Source Id
                  example: 1
                group:
                  type: integer
                  description: Group Id
                  example: 1
                fields:
                  type: array
                  description: Lead fields
                  items:
                    type: object
                    required:
                    - id
                    - value
                    properties:
                      id:
                        type: string
                        description: Field Id
                        example: 1
                      record:
                        type: string
                        description: Record Id
                        example: 1
                      value:
                        type: string
                        description: Field value
                        example: Test
      responses:
        200:
          description: Lead has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The lead has been updated successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'campaign' => 1,
              'status' => 1,
              'source' => 1,
              'group' => 1,
              'users' => [1, 2],
              'fields' => [
                [
                  'id' => 1,
                  'record' => 1,
                  'value' => 'Test',
                ],
              ],
            ];

            try {
                $result = $apiInstance->leadsLeadIdPatch($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdPatch: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/records/{catId}/{recordId}:
    delete:
      operationId: deleteRecordFromALeadRecordSet
      tags:
        - "Leads"
      summary: Delete record from a lead record set
      description: The method allows deleting records from lead tabs with the type "set".
                   Values of `catId` and `recordId` can be obtained
                   by request [Get detailed lead information](#/paths/~1leads~1{leadId}/get)
                   (`details.id` = `catId`, `details.record` = `recordId`).
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: catId
          schema:
            type: integer
          description: Record category ID
          required: true
        - in: path
          name: recordId
          schema:
            type: integer
          description: Record ID
          required: true
      responses:
        200:
          description: The record has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The record has been deleted successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"

  /api/v1/leads/fields:
    post:
      operationId: createNewLeadField
      tags:
        - "Leads"
      summary: Create a new lead field
      description: Create a new lead field
      requestBody:
        description: LeadField data
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LeadField"
                - type: object
                  properties:
                    override:
                      type: boolean
                      description: Flag for overriding existing special field
                      example: true
      responses:
        200:
          description: Created field
          content:
            application/json:
              schema:
                summary: Created field attributes
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'tab' => 1,
              'label' => 'New Field',
              'type' => 'Select',
              'length' => 10,
              'default' => 'Some Value',
              'alignment' => 'left',
              'searchable' => 1,
              'special' => 'dba',
              'options' => [
                'dropdown' =>  [
                  'key' => 'key',
                  'value' => 'Option Value',
                ],
                'dupecheck' => true,
                'contactid' => 1,
                'mask' => 'validateSSN',
                'copy' => [
                  'title' => NULL,
                  'from' => [ 1, 2,],
                  'to' => [1, 2],
                ],
                'hyperlink' => true,
                'sms' => true,
                'dialer' => true,
                'googlemaps' => [1, 2],
                'zipcode_autocomplete' =>
                [
                  'city' => [1, 2],
                  'state' => [1, 2],
                  'zipcode' => [1, 2],
                ],
              ],
              'readOnly' => false,
              'required' => true,
              'override' => true,
            ];

            try {
                $result = $apiInstance->leadsFieldsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: GetAvailableLeadFields
      tags:
        - "Leads"
      summary: Get a list of available lead fields
      description: Get a list of available lead fields
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadField"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/fields/{fieldId}:
    get:
      operationId: getLeadField
      tags:
        - "Leads"
      summary: Get a lead field
      description: Get a lead field
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      responses:
        200:
          description: Get a lead field
          content:
            application/json:
              schema:
                summary: Lead field
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsFieldIdGet($field_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: updateLeadField
      tags:
        - "Leads"
      summary: Update a lead field
      description: Updation an lead field for current Lead
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      requestBody:
        description: LeadField data
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LeadField"
                - type: object
                  properties:
                    override:
                      type: boolean
                      description: Flag for overriding existing special field
                      example: true
      responses:
        200:
          description: Updated field attributes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'tab' => 1,
                  'label' => 'New Field',
                  'type' => 'Select',
                  'length' => 10,
                  'default' => 'Some Value',
                  'alignment' => 'left',
                  'searchable' => 1,
                  'special' => 'dba',
                  'options' => [
                    'dropdown' =>  [
                      'key' => 'key',
                      'value' => 'Option Value',
                    ],
                    'dupecheck' => true,
                    'contactid' => 1,
                    'mask' => 'validateSSN',
                    'copy' => [
                      'title' => NULL,
                      'from' => [ 1, 2,],
                      'to' => [1, 2],
                    ],
                    'hyperlink' => true,
                    'sms' => true,
                    'dialer' => true,
                    'googlemaps' => [1, 2],
                    'zipcode_autocomplete' =>
                    [
                      'city' => [1, 2],
                      'state' => [1, 2],
                      'zipcode' => [1, 2],
                    ],
                  ],
                  'readOnly' => false,
                  'required' => true,
                  'override' => true,
                ];
                $result = $apiInstance->leadsFieldsFieldIdPatch($field_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdPatch: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/fields/{fieldId}/order:
    patch:
      operationId: updateLeadFieldOrderPosition
      tags:
        - "Leads"
      summary: Update a lead field order position
      description: Update a lead field order position for the current Lead. You can send value equal to 0 and type 'increment' or 'decrement' to set the field as first or last in the field list.
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      requestBody:
        description: LeadFieldOrder data
        content:
          application/json:
            schema:
              summary: New field position values
              $ref: "#/components/schemas/LeadFieldOrder"
      responses:
        200:
          description: Updated Lead field order position
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Successful"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'value' => 1,
                  'type' => 'increment',
                ];
                $result = $apiInstance->leadsFieldsFieldIdOrderPatch($field_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdOrderPatch: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/fields/tabs:
    post:
      operationId: createLeadFieldTab
      tags:
        - "Leads"
      summary: Create a lead field tab
      description: Create a lead field tab
      requestBody:
        description: LeadFieldTab data
        content:
          application/json:
            schema:
              summary: New lead field tab attributes
              $ref: "#/components/schemas/LeadFieldTab"
      responses:
        200:
          description: Create a lead field tab
          content:
            application/json:
              schema:
                summary: New lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'active' => 1,
              'position' => 1,
              'class' => 'Document',
              'name' => 'New tab',
              'description' => 'New tab',
              'order' => 1,
            ];
            try {
                $result = $apiInstance->leadsFieldsTabsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getAllLeadFieldTabs
      tags:
        - "Leads"
      summary: Get a list of all lead field tabs
      description: Get a list of all lead field tabs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of all lead field tabs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadFieldTab"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsTabsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/fields/tabs/{tabId}:
    get:
      operationId: GetLeadFieldTab
      tags:
        - "Leads"
      summary: Get a lead field tab
      description: Get a lead field tab
      parameters:
        - in: path
          name: tabId
          schema:
            type: integer
          description: Lead field tab Id
          required: true
      responses:
        200:
          description: Lead field tab
          content:
            application/json:
              schema:
                summary: One lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsTabsTabIdGet($tab_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsTabIdGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: UpdateLeadFieldTab
      tags:
        - "Leads"
      summary: Update a lead field tab
      description: Update a lead field tab
      parameters:
        - in: path
          name: tabId
          schema:
            type: integer
          description: Lead field tab Id
          required: true
      requestBody:
        description: LeadFieldTab data
        content:
          application/json:
            schema:
              summary: New lead field tab attributes
              $ref: "#/components/schemas/LeadFieldTab"
      responses:
        200:
          description: Updated lead field tab
          content:
            application/json:
              schema:
                summary: One lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'active' => 1,
                  'position' => 1,
                  'class' => 'Document',
                  'name' => 'New tab',
                  'description' => 'New tab',
                  'order' => 1,
                ];
                $result = $apiInstance->leadsFieldsTabsTabIdPatch($tab_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsTabIdPatch: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/pricing_templates:
    get:
      operationId: getPricingTemplates
      tags:
        - "Leads"
      summary: Get pricing templates
      description: Get pricing templates
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
                10,
                25,
                50,
                100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of pricing templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Template Id
                        name:
                          type: string
                          description: Template name
                          example: "Pricing #1"
                        created_by:
                          type: integer
                          example: 1
                          description: Template creator
                        created_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Template modification date and time (ISO-8601)
                        modified_by:
                          type: integer
                          example: 1
                          description: Template modification date and time (ISO-8601)
                        modified_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Last template editor
                        fields_changed_by:
                          type: integer
                          example: 1
                          description: Last fields editor
                        fields_changed_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Last fileds modification date and time (ISO-8601)
                        values:
                          type: array
                          items:
                            type: object
                            properties:
                              field_id:
                                type: integer
                                example: 133
                              value:
                                type: string
                                example: Test


                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /api/v1/leads/{leadId}/notes:
    post:
      operationId: CreateLeadNote
      tags:
      - "Leads"
      summary: Create a lead note
      description: Create a lead note
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead note
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - tab
              - note
              - sticky
              properties:
                tab:
                  type: integer
                  description: Tab Id
                  example: 1
                note:
                  type: string
                  description: Note text
                  example: Test note
                sticky:
                  type: string
                  description: Pin to top?
                  enum: [Yes, No]
                  example: Yes
      responses:
        200:
          description: "Note has been added successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The note has been added successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'tab' => 1,
              'note' => 'Test note',
              'sticky' => 'Yes',
            ];

            try {
                $result = $apiInstance->leadsLeadIdNotesPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdNotesGet: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getLeadNotes
      tags:
      - "Leads"
      summary: Get lead notes
      description: Get lead notes
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of lead notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Note Id
                        sticky:
                          type: string
                          description: Pin note to top
                          enum: [Yes, No]
                          example: Yes
                        tab:
                          $ref: "#/components/schemas/BriefTabInfo"
                        text:
                          type: string
                          description: Note text
                        created:
                          type: string
                          description: Note creation date and time (ISO-8601)
                        modified:
                          type: string
                          description: Note modification date and time (ISO-8601)
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdNotesGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdNotesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/appointments:
    post:
      operationId: CreateLeadAppointment
      tags:
      - "Leads"
      summary: Create a lead appointment
      description: Create a lead appointment
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead appointment
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - date
              - date_end
              - text
              - set_by
              - set_for
              properties:
                date:
                  type: string
                  format: date-time
                  example: "2018-05-30T13:16:13+00:00"
                  description: Date in format ISO 8601 (Y-m-d\TH:i:sP)
                date_end:
                  type: string
                  format: date-time
                  example: "2018-05-30T13:26:13+00:00"
                  description: End date in format ISO 8601 (Y-m-d\TH:i:sP)
                text:
                  type: string
                  description: Task description
                set_by:
                  type: string
                  description: Task set by user (User Id)
                  example: 1
                set_for:
                  type: string
                  description: Task set for user (User Id)
                  example: 1
      responses:
        200:
          description: "Appointment has been created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Appointment has been created successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'date' => '2018-05-30T13:16:13+00:00',
              'date_end' => '2018-05-30T13:26:13+00:00',
              'text' => 'string',
              'set_by' => 1,
              'set_for' => 1,
            ];

            try {
                $result = $apiInstance->leadsLeadIdAppointmentsPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdAppointmentsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getLeadAppointments
      tags:
      - "Leads"
      summary: Get lead appointments
      description: Get lead appointments
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: set_for
        schema:
          type: integer
        description: Filter by the user for who appointment was created
      - in: query
        name: set_by
        schema:
          type: integer
        description: Filter by the user for who have created an appointment
      - in: query
        name: modified_by
        schema:
          type: integer
        description: Filter by the user for who have modified an appointment
      - in: query
        name: confirmed_by
        schema:
          type: integer
        description: Filter by the user for who have confirmed an appointment
      - in: query
        name: rescheduled_by
        schema:
          type: integer
        description: Filter by the user for who have rescheduled an appointment
      - in: query
        name: seen_by
        schema:
          type: integer
        description: Filter by the user for who have mark an appointment as seen
      - in: query
        name: rescheduled_count
        schema:
          type: integer
        description: Filter by the count of rescheduling
      - in: query
        name: done
        schema:
          type: boolean
        description: Filter by the done flag
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      - in: query
        name: sort_by
        schema:
          type: string
          enum: [
            'id',
            'set_for',
            'set_at',
            'set_by',
            'modified',
            'modified_by',
            'date',
            'date_end',
            'confirmed',
            'confirmed_by',
            'seen',
            'seen_by',
            'rescheduled',
            'rescheduled_by',
            'rescheduled_by'
          ]
        description: Sort appointments by columns
      - in: query
        name: sort_dir
        schema:
          type: string
          enum: [
            'asc',
            'desc'
          ]
        description: Sort direction
      - in: query
        name: date_filter
        schema:
          type: string
          enum: [
            'date',
            'set_at',
            'modified',
            'confirmed',
            'rescheduled',
            'seen'
          ]
        description: Filtering appointments by a date range depends on this filter
      - in: query
        name: start_date
        schema:
          type: string
          format: date
          example: '2019-01-01'
        description: Filter appointments by a date in format Y-m-d
      - in: query
        name: end_date
        schema:
          type: string
          format: date
          example: '2019-01-02'
        description: Filter leads by a date in format Y-m-d
      responses:
        200:
          description: A list of lead appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadAppointment"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdAppointmentsGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdAppointmentsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/applications/{applicationId}/populate:
    post:
      operationId: populatePdfDocument
      tags:
      - "Leads"
      summary: Populate PDF Document
      description: Populate a PDF document from a lead.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: applicationId
        schema:
          type: integer
        description: Application Id
        required: true
      responses:
        200:
          description: "Document populated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document populated successfully."
                  url:
                    type: string
                    example: "https://iriscrm.com/download/leadfile/1"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdApplicationsApplicationIdPopulatePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdApplicationsApplicationIdPopulatePost: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/tasks:
    post:
      operationId: createLeadTask
      tags:
      - "Leads"
      summary: Create a lead task
      description: Create a lead task
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead task
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - priority
              - date
              - date_end
              - text
              - set_by
              - set_for
              properties:
                priority:
                  type: string
                  description: Priority
                  enum: [Normal, Medium, High]
                  example: Normal
                date:
                  type: string
                  description: Date in ISO 8601 format (Y-m-d\TH:i:sP)
                  example: "2018-05-30T13:16:13+00:00"
                date_end:
                  type: string
                  description: End date in ISO 8601 format (Y-m-d\TH:i:sP)
                  example: "2018-05-30T13:26:13+00:00"
                text:
                  type: string
                  description: Task description
                set_by:
                  type: string
                  description: Task set by user (user Id)
                  example: 1
                set_for:
                  type: string
                  description: Task set for user (user Id)
                  example: 1
      responses:
        200:
          description: "Task has been created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task has been created successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'priority' => 'Normal',
              'date' => '2018-05-30T13:16:13+00:00',
              'date_end' => '2018-05-30T13:26:13+00:00',
              'text' => 'string',
              'set_by' => 1,
              'set_for' => 1,
            ];

            try {
                $result = $apiInstance->leadsLeadIdTasksPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdTasksPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getLeadTasks
      tags:
      - "Leads"
      summary: Get lead tasks
      description: Get lead tasks
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of lead tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Task Id
                        user:
                          $ref: "#/components/schemas/BriefUserInfo"
                        text:
                          type: string
                          description: Task description
                        date:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: Task Date and time in format ISO 8601 (Y-m-d\TH:i:sP)
                        confirmed:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: Task confirmed date and time in format ISO 8601 (Y-m-d\TH:i:sP)
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdTasksGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdTasksGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/users:
    post:
      operationId: assignUser
      tags:
      - "Leads"
      summary: Assign a user
      description: Assign a user
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead task
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - user
              properties:
                user:
                  type: integer
                  description: User Id
      responses:
        200:
          description: "User has been assigned successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User has been assigned successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'user' => 1
            ];

            try {
                $result = $apiInstance->leadsLeadIdUsersPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getAssignedUsers
      tags:
      - "Leads"
      summary: Get a list of assigned users
      description: Get a list of assigned users
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of assigned users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdUsersGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/users/{userId}:
    delete:
      operationId: unassignUserFromLead
      tags:
      - "Leads"
      summary: Unassign a user from a lead
      description: Unassign a user from a lead
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: userId
        schema:
          type: integer
        description: User Id
        required: true
      responses:
        200:
          description: "User has been unassigned successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User has been unassigned successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdUsersUserIdDelete($lead_id, $user_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersUserIdDelete: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/documents:
    # post:
    #   operationId: uploadDocument
    #   tags:
    #   - "Leads"
    #   summary: Upload a document
    #   description: Upload a document
    #   parameters:
    #   - in: path
    #     name: leadId
    #     schema:
    #       type: integer
    #     description: Lead Id
    #     required: true
    #   - in: query
    #     name: tab
    #     schema:
    #       type: integer
    #     description: Tab Id
    #     required: true
    #   - in: query
    #     name: label
    #     schema:
    #       type: integer
    #     description: Label Id
    #     required: true
    #   - in: query
    #     name: filename
    #     schema:
    #       type: string
    #     description: File name
    #     required: true
    #   requestBody:
    #     description: Payload data
    #     content:
    #       application/octet-stream:
    #         schema:
    #           type: string
    #           format: binary
    #   responses:
    #     200:
    #       description: Document has been uploaded successfully
    #       content:
    #         text/plain:
    #           schema:
    #             type: string
    #             example: The document has been uploaded successfully
    #     401:
    #       $ref: "#/components/responses/UnauthorizedError"
    #     403:
    #       $ref: "#/components/responses/ForbiddenError"
    #     404:
    #       $ref: "#/components/responses/NotFoundError"
    #     405:
    #       $ref: "#/components/responses/ValidationError"
    #   x-code-samples:
    #     - lang: 'PHP'
    #       source: |
    #         $tab = 1; // int | Tab Id
    #         $label = 2; // int | Label Id
    #         $filename = "filename_example"; // string | File name
    #         $body = 'file content';

    #         try {
    #             $result = $apiInstance->leadsLeadIdDocumentsPost($tab, $label, $filename, $lead_id, $body);
    #             print_r($result);
    #         } catch (Exception $e) {
    #             echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsPost: ', $e->getMessage(), PHP_EOL;
    #         }
    get:
      operationId: getAvailableDocuments
      tags:
      - "Leads"
      summary: Get a list of available documents
      description: Get a list of available documents
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of available documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead documents"
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Document Id
                        name:
                          type: string
                          description: Name
                        size:
                          type: string
                          description: Size
                        tab:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Tab name
                        label:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Label name
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdDocumentsGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/file_labels:
    get:
      operationId: getAvailableDocumentLabels
      tags:
        - "Leads"
      summary: Get a list of available document labels
      description: Get a list of all document labels available when uploading and downloading files
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available labels
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileLabel"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /api/v1/leads/{leadId}/documents/{documentId}:
    get:
      operationId: downoladDocument
      tags:
      - "Leads"
      summary: Download a document
      description: Download a document
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: documentId
        schema:
          type: integer
        description: Document Id
        required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdDocumentsDocumentIdGet($lead_id, $document_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsDocumentIdGet: ', $e->getMessage(), PHP_EOL;
            }
  /leads/{leadId}/signatures/{applicationId}/generate:
    post:
      operationId: generateEsignatureDocument
      tags:
      - "E-Signature"
      summary: Generate an e-signature document
      description: Generate a new electronic signature document and receive a signature-ready application URL.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: applicationId
        schema:
          type: integer
        description: Application Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expire:
                  type: boolean
                  example: true
                  description: Expire the previously generated application
      responses:
        200:
          description: New E-Sign application hash and link to signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Result message
                    example: "E-signature documented was generated successfully."
                  hash:
                    type: string
                    description: E-Sign hash
                  url:
                    type: string
                    example: "https://iriscrm.com/sign/91391fe5"
                    description: E-Sign URL
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdGeneratePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdGeneratePost: ', $e->getMessage(), PHP_EOL;
            }
  /leads/{leadId}/signatures/{applicationId}/send:
    post:
      operationId: sendEsignatureDocument
      tags:
        - "E-Signature"
      summary: Send an e-signature document
      description: Send an e-signature document using an email template for signature.
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: applicationId
          schema:
            type: integer
          description: Application Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipients:
                  type: array
                  minItems: 1
                  maxItems: 5
                  items:
                    type: object
                    properties:
                      fieldId:
                        type: integer
                        description: Lead Field Id with email address
                        example: 1
                      email:
                        description: Recipient Email
                        type: string
                        format: email
                        example: example@iriscrm.com
                      name:
                        description: Recipient Name
                        type: string
                        example: John Doe
                expire:
                  type: boolean
                  example: true
                  description: Expire the previously generated application
      responses:
        200:
          description: New E-Sign application hash and link to signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Result message
                    example: 'E-signature documented was generated and sent to email successfully.'
                  emailId:
                    type: integer
                    description: Id of email what was sent
                    example: 11
                  hash:
                    type: string
                    example: '91391fe5'
                    description: E-Sign hash
                  url:
                    type: string
                    example: "https://iriscrm.com/sign/91391fe5"
                    description: E-Sign URL
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdSendPost($lead_id, $application_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdSendPost: ', $e->getMessage(), PHP_EOL;
            }
  /leads/signatures/{applicationId}/download:
    get:
      operationId: DownloadEsignatureDocument
      tags:
        - "E-Signature"
      summary: Download an e-signature document
      description: Download an e-signature document.
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          description: Application Id
          required: true
      responses:
        200:
          description: E-Sign document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSignaturesApplicationIdDownloadGet($application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSignaturesApplicationIdDownloadGet: ', $e->getMessage(), PHP_EOL;
            }
  /leads/{leadId}/signatures:
    get:
      operationId: GetAllLeadEsignaturesDocuments
      tags:
      - "E-Signature"
      summary: Get a list of all lead e-signatures documents
      description: Get a list of all lead e-signatures documents
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        '200':
          description: A list with all lead e-signatures
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          example: Generated
                        url:
                          type: string
                          example: "https://iriscrm.com/sign/91391fe5"
                        templateId:
                          type: string
                          example: E-signature template
                        templateName:
                          type: string
                          example: E-signature name
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdGeneratePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdGeneratePost: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/emails/{templateId}:
    post:
      operationId: SendEmailToLeadWithTemplate
      tags:
      - "Leads"
      summary: Send an email to lead with template
      description: Send an email to lead with template
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: templateId
        schema:
          type: integer
        description: Template Id
        required: true
      requestBody:
        description: Payload data
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    fieldId:
                      type: integer
                      description: Lead Field Id with email address
                      example: 1
                    placeholders:
                      type: object
                      description: Object with template placeholders
                - type: object
                  properties:
                    email:
                      description: Recipient Email
                      type: string
                      format: email
                      example: example@iriscrm.com
                    name:
                      description: Recipient Name
                      type: string
                      example: John Doe
                    placeholders:
                      type: object
                      description: Object with template placeholders
      responses:
        200:
          description: Result of proccess
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Email has been sent successfully
                    example: Email has been sent successfully.
                  emailId:
                    type: string
                    description: Id of email what will be sended to lead
                    example: 1
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];

                $result = $apiInstance->leadsLeadIdEmailsTemplateIdPost($lead_id, $template_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdEmailsTemplateIdPost: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/emails/templates:
    get:
      operationId: getEmailTemplates
      tags:
        - "Leads"
      summary: Get a list of email templates
      description: Get list of available email templates for a lead email
      responses:
        200:
          description: A list of available email templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefEmailTemplate"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsEmailsTemplatesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsEmailsTemplatesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/mailbox/{emailId}/attachment/{attachmentId}:
    get:
      operationId: downloadMailboxEmailAttachment
      tags:
        - "Leads"
      summary: Download a mailbox email attachment
      description: Download a mailbox email attachment
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: emailId
          schema:
            type: integer
          description: Email Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Attachment"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet($lead_id, $email_id, $attachment_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/sms/{templateId}:
    post:
      operationId: sendSmsToLeadWithSelectedSmsTemplate
      tags:
      - "Leads"
      summary: Send an SMS to lead with selected SMS template
      description: Send an SMS to lead with selected SMS template.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: templateId
        schema:
          type: integer
        description: Template Id
        required: true
      requestBody:
        description: Payload data
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    fieldId:
                      type: integer
                      example: 1
                - type: object
                  properties:
                    phone:
                      type: string
                      example: '206-206-2623'
      responses:
        200:
          description: Result of proccess
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: SMS has been sent successfully.
                    example: SMS has been sent successfully.
                  receiver:
                    type: string
                    description: Phone number of SMS receiver.
                    example: '123-456-7890'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];
                $result = $apiInstance->leadsLeadIdSmsTemplateIdPost($lead_id, $template_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSmsTemplateIdPost: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/sms/templates:
    get:
      operationId: GetSmsTemplates
      tags:
        - "Leads"
      summary: Get list of SMS templates
      description: Get list of available SMS templates for sending SMS to a lead
      responses:
        200:
          description: A list of available SMS templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefSmsTemplate"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSmsTemplatesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSmsTemplatesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/campaign:
    get:
      operationId: GetAllLeadCampaignActivity
      tags:
      - "Leads"
      summary: Get a list of all lead campaign activity
      description: Get a list of all lead campaign activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CampaignActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityCampaignGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityCampaignGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/deletion:
    get:
      operationId: GetAllLeadDeletionActivity
      tags:
      - "Leads"
      summary: Get a list of all lead deletion activity
      description: Get a list of all lead deletion activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeletionActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityDeletionGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityDeletionGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/duplicates:
    get:
      operationId: GetAllLeadDuplicateActivity
      tags:
      - "Leads"
      summary: Get a list of all lead duplicate activity
      description: Get a list of all lead duplicate activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DuplicateActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityDuplicatesGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityDuplicatesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/links:
    get:
      operationId: GetAllLeadLinksActivity
      tags:
      - "Leads"
      summary: Get a list of all lead links activity
      description: Get a list of all lead links activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LinksActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityLinksGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityLinksGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/source:
    get:
      operationId: getAllLeadSourceActivity
      tags:
      - "Leads"
      summary: Get a list of all lead source activity
      description: Get a list of all lead source activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SourceActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivitySourceGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivitySourceGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/{leadId}/activity/status:
    get:
      operationId: getAllLeadStatusActivity
      tags:
      - "Leads"
      summary: Get a list of all lead status activity
      description: Get a list of all lead status activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StatusActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityStatusGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityStatusGet: ', $e->getMessage(), PHP_EOL;
            }
  /leads/applications:
    get:
      operationId: getAvailableApplications
      tags:
      - "E-Signature"
      summary: Get a list of available applications
      description: Get a list of available applications
      responses:
        200:
          description: A list of available applications
          content:
            application/json:
              schema:
                type: array
                description: "A list of lead applications"
                items:
                  $ref: "#/components/schemas/BriefApplicationInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsGet: ', $e->getMessage(), PHP_EOL;
            }
  /leads/applications/{appId}/mappings:
    post:
      operationId: createNewApplicationFieldMapping
      tags:
      - "E-Signature"
      summary: Create a new application field mapping
      description: Creation of new application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationField"
      responses:
        200:
          description: Created new application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'from' => 1,
              'record' => 1,
              'to' => 'Test',
              'toAlt' => 'Alt test',
              'toType' => 'Text',
              'special' => 'chk',
            ];

            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsPost($app_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getAvailableApplicationFieldMappings
      tags:
      - "E-Signature"
      summary: Get a list of available application field mappings
      description: Get a list of available application field mappings
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of available application field mappings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApplicationField"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsGet($app_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsGet: ', $e->getMessage(), PHP_EOL;
            }
  /leads/applications/{appId}/mappings/{mapId}:
    get:
      operationId: getApplicationFieldMappingList
      tags:
      - "E-Signature"
      summary: Get an application field mapping list
      description: Get an application field mapping list
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      responses:
        200:
          description: Application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdGet($app_id, $map_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: updateApplicationFieldMapping
      tags:
      - "E-Signature"
      summary: Update an application field mapping
      description: Update an application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationField"
      responses:
        200:
          description: Updated application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'from' => 1,
                  'record' => 1,
                  'to' => 'Test',
                  'toAlt' => 'Alt test',
                  'toType' => 'Text',
                  'special' => 'chk',
                ];

                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdPatch($app_id, $map_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdPatch: ', $e->getMessage(), PHP_EOL;
            }
    delete:
      operationId: deleteApplicationFieldMapping
      tags:
      - "E-Signature"
      summary: Delete an application field mapping
      description: Deletion of application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      responses:
        200:
          description: Updated application field mapping
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Mapping was successfully removed.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdDelete($app_id, $map_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdDelete: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/campaigns:
    get:
      operationId: getAvailableCampaigns
      tags:
      - "Leads"
      summary: Get a list of available campaigns
      description: Get a list of available campaigns
      responses:
        200:
          description: A list of available campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead campaigns"
                    items:
                      $ref: "#/components/schemas/BriefCampaignInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsCampaignsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsCampaignsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/groups:
    get:
      operationId: getAvailableGroups
      tags:
      - "Leads"
      summary: Get a list of available groups
      description: Get a list of available groups
      parameters:
        - in: query
          name: status
          schema:
            type: integer
          description: Status Id
      responses:
        200:
          description: A list of available groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead groups"
                    items:
                      $ref: "#/components/schemas/BriefGroupInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsGroupsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsGroupsGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/sources:
    get:
      operationId: getAvailableSources
      tags:
      - "Leads"
      summary: Get a list of available sources
      description: Get a list of available sources
      responses:
        200:
          description: A list of available sources
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead sources"
                    items:
                      $ref: "#/components/schemas/BriefSourceInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSourcesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSourcesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/statuses:
    get:
      operationId: getAvailableStatuses
      tags:
      - "Leads"
      summary: Get a list of available statuses
      description: Get a list of available statuses
      parameters:
        - in: query
          name: group
          schema:
            type: integer
          description: Group Id
      responses:
        200:
          description: A list of available statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead statuses"
                    items:
                      $ref: "#/components/schemas/CategoryWithStatuses"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsStatusesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsStatusesGet: ', $e->getMessage(), PHP_EOL;
            }
  /api/v1/leads/users:
    get:
      operationId: getAvailableUsers
      tags:
      - "Leads"
      summary: Get a list of available users
      description: Get a list of available users for assigning
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsUsersGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsUsersGet: ', $e->getMessage(), PHP_EOL;
            }

  /subscriptions:
    post:
      operationId: createSubscription
      tags:
        - "Subscriptions"
      summary: Create a subscription
      description: Create a subscription
      requestBody:
        description: Subscription details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BriefSubscriptionInfo"
      responses:
        200:
          description: Subscription has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefSubscriptionInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'url' => 'https://example.com/hook',
                  'events' => ['api.updated'],
                  'multiple_at_once' => true,
                ];
                $result = $apiInstance->subscriptionsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsPost: ', $e->getMessage(), PHP_EOL;
            }
    get:
      operationId: getSubscriptions
      tags:
      - "Subscriptions"
      summary: Return a list of subscriptions
      description: Return a list of subscriptions
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page Number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A JSON array of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefSubscriptionInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsGet($page);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/{subscriptionId}:
    get:
      operationId: getSubscriptionsById
      tags:
      - "Subscriptions"
      summary: Return a subscription by its id
      description: Return a subscription details
      parameters:
      - in: path
        name: subscriptionId
        schema:
          type: integer
        description: Subscription Id
        required: true
      responses:
        200:
          description: Subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BriefSubscriptionInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSubscriptionIdGet($subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdGet: ', $e->getMessage(), PHP_EOL;
            }
    patch:
      operationId: updateSubscription
      tags:
        - "Subscriptions"
      summary: Update a subscription
      description: Update a subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: integer
          description: Subscription Id
          required: true
      requestBody:
        description: Subscription details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BriefSubscriptionInfo"
      responses:
        200:
          description: Subscription has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefSubscriptionInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'url' => 'https://example.com/hook',
                  'events' => ['api.updated'],
                  'multiple_at_once' => true,
                ];
                $result = $apiInstance->subscriptionsSubscriptionIdPatch($body, $subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdPatch: ', $e->getMessage(), PHP_EOL;
            }
    delete:
      operationId: deleteSubscription
      tags:
        - "Subscriptions"
      summary: Delete a subscription
      description: Delete a subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: integer
          description: Subscription Id
          required: true
      responses:
        200:
          description: Subscription (1) has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Subscription deletion message
                    example: Subscription (1) has been deleted successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSubscriptionIdDelete($subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdDelete: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/subscription.test:
    get:
      operationId: testPayloadForCheckingServerResponse
      tags:
        - "Subscriptions"
      summary: Test payload for checking server response
      description: "Example use: stay aware of changes and additions to the API."
      responses:
        200:
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSubscription'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/api.updated:
    get:
      operationId: receiveNotificationWhenApiUpdated
      tags:
        - "Subscriptions"
      summary: Receive a notification when this API is updated
      description: "Example use: stay aware of changes and additions to the API."
      responses:
        200:
          description: API details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleApiUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleApiUpdatedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.created:
    get:
      operationId: receiveNotificationWhenLeadCreated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead is created in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: create a record in an external system when a lead is created in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadCreatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadCreatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadCreatedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.updated:
    get:
      operationId: receiveNotificationWhenLeadUpdated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's campaign, status, group, or field values are updated in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: update field information for a record in an external system when the corresponding information is updated in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadUpdatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadUpdatedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.deleted:
    get:
      operationId: receiveNotificationWhenLeadDeleted
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM is deleted
      description: "Example use: update the status, post a note, or delete a record in an external system when a lead is deleted in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadDeletedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadDeletedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadDeletedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.restored:
    get:
      operationId: receiveNotificationWhenLeadRestored
      tags:
        - "Subscriptions"
      summary: Receive a notification when a deleted lead is restored in this CRM
      description: "Example use: update the status, post a note, or restore a record in an external system when a deleted lead is restored in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadRestoredEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadRestoredGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadRestoredGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.status.updated:
    get:
      operationId: receiveNotificationWhenLeadStatusUpdated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's status is updated in this CRM, with the option to only receive a notification when a lead is moved to or from the status(es) specified here
      description: "Example use: update the status of a record in an external system after the lead's status is updated in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadStatusUpdatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadStatusUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadStatusUpdatedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.signature.generated:
    get:
      operationId: receiveNotificationWhenLeadEsignatureGenerated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is generated
      description: "Example use: update an external system when a user generates an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureGenerated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/lead.signature.opened:
    get:
      operationId: receiveNotificationWhenLeadEsignatureOpened
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is opened by the recipient
      description: "Example use: update an external system when a recepient clicks a link to open an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureOpened'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /subscriptions/sample/lead.signature.signed:
    get:
      operationId: receiveNotificationWhenLeadEsignatureSigned
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is signed by the recipient
      description: "Example use: update an external system when one or all recepients signed an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureSigned'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /subscriptions/sample/lead.note.added:
    get:
      operationId: receiveNotificationWhenLeadNoteAdded
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM has a note posted, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: add a note to a record in an external system when a note is posted on a lead in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadNoteAddedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadNoteAddedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadNoteAddedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.document.uploaded:
    get:
      operationId: receiveNotificationWhenLeadDocumentUploaded
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead document is uploaded
      description: "Example use: update the record in an external system after the lead's uploaded document in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadDocumentUploadedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadDocumentUploadedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadDocumentUploadedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/lead.email.received:
    get:
      operationId: receiveNotificationWhenLeadEmailReceived
      tags:
        - "Subscriptions"
      summary: Receive a notification when an email message is received on a lead in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: update the status of a lead when an email is received if it's in a certain status."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadEmailReceivedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadEmailReceivedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadEmailReceivedGet: ', $e->getMessage(), PHP_EOL;
            }

  
  /subscriptions/sample/turboapp.submitted:
    get:
      operationId: receiveNotificationWhenTurboAppSubmitted
      tags:
        - "Subscriptions"
      summary: Receive a notification when a TurboApp is submitted to a processor
      description: "Example use: create a record in an external system when a TurboApp is submitted."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppSubmited'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappSubmittedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappSubmittedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/turboapp.updated:
    get:
      operationId: receiveNotificationWhenTurboAppUpdated
      tags:
        - "Subscriptions"
      summary: Receive a notification when the underwriting status is updated
      description: "Example use: update the status of a merchant record in your system when TurboApp receives an underwriting update from the processor."
      responses:
        200:
          description: Application account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappUpdatedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/turboapp.approved:
    get:
      operationId: receiveNotificationWhenTurboAppApproved
      tags:
        - "Subscriptions"
      summary: Receive a notification when a merchant is approved
      description: "Example use: update the status of a record in your system when TurboApp receives an approval status from the processor."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppApproved'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappApprovedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappApprovedGet: ', $e->getMessage(), PHP_EOL;
            }
  /subscriptions/sample/turboapp.declined:
    get:
      operationId: receiveNotificationWhenTurboAppDeclined
      tags:
        - "Subscriptions"
      summary: Receive a notification when a merchant is declined
      description: "Example use: update the status of a record in your system when TurboApp receives a declined status by the processor."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppDeclined'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappDeclinedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappDeclinedGet: ', $e->getMessage(), PHP_EOL;
  

  /subscriptions/sample/ticket.created:
    get:
      operationId: receiveNotificationWhenTurboAppCreated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is created
      description: "Example use: receive an alert with ticket details every time a new ticket is created."
      responses:
        200:
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCreated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.updated:
    get:
      operationId: receiveNotificationWhenTicketUpdated
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is updated
      description: "Example use: receive an alert with ticket details every time a ticket is updated."
      responses:
        200:
          description: Ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.resolved:
    get:
      operationId: receiveNotificationWhenTicketResolved
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is resolved
      description: "Example use: receive an alert with ticket details every time a ticket is resolved."
      responses:
        200:
          description: Ticket resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResolved'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.commented:
    get:
      operationId: receiveNotificationWhenTicketCommented
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket comment is added
      description: "Example use: receive an alert when a user adds a comment to a ticket."
      responses:
        200:
          description: Ticket commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommented'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.comment.edited:
    get:
      operationId: receiveNotificationWhenTicketCommentEdited
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket comment is edited
      description: "Example use: receive an alert when a user edited a comment in a ticket."
      responses:
        200:
          description: Ticket comment edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCommentEdited'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  # /subscriptions/sample/ticket.checklist.updated:
  #   get:
  #     operationId: receiveNotificationWhenTicketChecklistUpdated
  #     tags:
  #       - "Subscriptions"
  #     summary: Receive a notification when a ticket's checklist is updated
  #     description: "Example use: receive an alert when a checklist item is updated on a ticket."
  #     responses:
  #       200:
  #         description: Ticket Checklist updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ChecklistUpdated'
  #       401:
  #         $ref: "#/components/responses/UnauthorizedError"
  #       403:
  #         $ref: "#/components/responses/ForbiddenError"
  #       404:
  #         $ref: "#/components/responses/NotFoundError"

    

  /subscriptions/sample/residuals.report.published:
    get:
      operationId: receiveNotificationWhenReportPublished
      tags:
        - "Subscriptions"
      summary: Receive a notification when a residuals report is published
      description: "Example use: update the status of a record in your system when a residuals report is published"
      responses:
        200:
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportPublished'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/residuals.lineitem.added:
    get:
      operationId: receiveNotificationWhenLineItemAdded
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a residuals line item is added
      description: "Example use: Trigger a workflow as soon as a line item is added"
      responses:
        200:
          description: Line item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItemAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.added:
    get:
      operationId: receiveNotificationWhenChargebackAdded
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a new chargeback case created
      description: "Example use: notify the responsible person when a new chargeback case created, so the reply can be submitted before the due date"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.updated:
    get:
      operationId: receiveNotificationWhenChargebackUpdated
      tags:
        - "Subscriptions"
      summary:  Receive a notification when chargeback case status changed
      description: "Example use: check the chargeback case updates to make sure the reply is in review or is it lost or won"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.reminder:
    get:
      operationId: receiveNotificationForChargebackReminder
      tags:
        - "Subscriptions"
      summary: Receive a notification in 7/3/1 days before the chargeback case due date
      description: "Example use: remind a client to post a reply for the chargeback case"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackReminder'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.added:
    get:
      operationId: receiveNotificationWhenRetrievalAdded
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a new retrieval case created
      description: "Example use: notify the responsible person when a new retrieval case created, so the reply can be submitted before the due date"
      responses:
        200:
          description: Retrieval case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.updated:
    get:
      operationId: receiveNotificationWhenRetrievalUpdated
      tags:
        - "Subscriptions"
      summary:  Receive a notification when retrieval case status changed
      description: "Example use: check the retrieval case updates to make sure the reply is in review or is it lost or won"
      responses:
        200:
          description: Retrieval case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.reminder:
     get:
       operationId: receiveNotificationForRetrievalReminder
       tags:
         - "Subscriptions"
       summary: Receive a notification in 7/3/1 days before the retrieval case due date
       description: "Example use: remind a client to post a reply for the retrieval case"
       responses:
         200:
           description: Retrieval case details
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/RetrievalReminder'
         401:
           $ref: "#/components/responses/UnauthorizedError"
         403:
           $ref: "#/components/responses/ForbiddenError"
         404:
           $ref: "#/components/responses/NotFoundError"
    
  /helpdesk:
    post:
      operationId: createNewTicket
      tags:
        - "Helpdesk"
      summary: Create a new ticket
      description: Create a new ticket
      requestBody:
        description: Ticket details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - subject
                - priority
                - assignType
                - assignTo
              properties:
                type:
                  type: integer
                  description: "Type id"
                  example: 1
                subject:
                  type: string
                  description: "Ticket subject"
                  example: "Ticket subject"
                description:
                  type: string
                  description: "Ticket description"
                  example: "Ticket description"
                priority:
                  type: integer
                  description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
                  enum: [0, 1, 2]
                  example: 1
                assignedUsers:
                  type: array
                  items:
                    type: integer
                    description: "Assigned user ID's"
                    example: 11
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                assignType:
                  type: string
                  enum: [lead, merchant, none]
                  example: lead
                assignTo:
                  type: integer
                  example: 123
                group_id:
                  type: integer
                  example: 123
                due_date:
                  type: string
                  format: date-time
                  example: '2020-10-20T12:04:40-05:00'
                  description: "Ticket due datetime"
                only_business_days:
                  type: boolean
                  description: "Calculate only business days"
                  example: true
                notify_assigned_users:
                  type: boolean
                  example: true
                  description: Notify assigned users
                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the ticket is visible to Merchant users"
                  example: true

                
                checklist:
                  type: array
                  items:
                    $ref: "#/components/schemas/CheckListRequest"
      responses:
        200:
          description: Ticket has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
    get:
      operationId: getHelpdeskTickets
      tags:
        - 'Helpdesk'
      summary: Get a list of helpdesk tickets
      description: 'Return a list of helpdesk tickets. </br>
        <span style="color: rgb(224, 157, 67)">By default, the endpoint returns only
        tickets assigned to the users. Set `assigned_to` query parameter to the empty string
        and `unassigned` to the 1 if You need to select <strong>ALL</strong> tickets</span>'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [
              id,
              status,
              subject,
              files,
              type,
              priority,
              last_comment,
              created,
              modified,
              resolved,
              mid,
              due
            ]
          description: Sorting of helpdesk tickets by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [last_comment, created, modified, resolved, status_updated, due]
          description: Filter tickets by the specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: group
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the specific ticket groups
        - in: query
          name: type
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the specific ticket types
        - in: query
          name: creator
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket creator
        - in: query
          name: modifier
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket modifier
        - in: query
          name: search
          schema:
            type: string
            example: Search criteia
          description: Search tickets by some criteria
        - in: query
          name: search_by
          schema:
            type: string
            example: description
            enum: [
              'all',
              'ticket_id',
              'name',
              'description',
                            'mid',
                            'dba',
              'comments',
              'attachments'
            ]
          description: Search tickets by some specific field
        - in: query
          name: resolver
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket resolver
        - in: query
          name: lid
          schema:
            type: number
            example: 1
          description: Filter tickets by the Lead ID

    
        - in: query
          name: mid
          schema:
            type: string
            example: 1
          description: Filter tickets by the Merchant ID

    
        - in: query
          name: hide_resolved
          schema:
            type: boolean
            example: 1
          description: Hide resolved ticket
        - in: query
          name: assigned_to
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the assigned users. For sending multiple users please send them in comma seperated format.
                       Please use an empty string to select all assigned tickets.
        - in: query
          name: unassigned
          schema:
            type: boolean
            example: 1
          description: Set this parameter to 1 if you need unassigned tickets also. For select only unassigned tickets
                       exclude `assigned_to` from the request
      responses:
        200:
          description: A JSON array of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/BriefTicketInfo"
                        - type: object
                          properties:
                            created_username:
                              type: string
                              example: John Doe
                            modified_username:
                              type: string
                              example: Jane Doe
                            resolved_username:
                              type: string
                              example: Jack Doe
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /helpdesk/{ticketId}/comment:
    post:
      operationId: addTicketComment
      tags:
        - "Helpdesk"
      summary: Add a ticket comment
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Post a comment
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: "Comment text"
                  example: 'Comment text'
                notify:
                  type: array
                  items:
                    type: integer
                    description: "User ID's what should be notified"
                    example: 11
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"

                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the comment is visible to Merchant users"
                  example: true

                
      responses:
        200:
          description: Comment was added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefTicketComments"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"

  /helpdesk/{ticketId}:
    get:
      operationId: getDetailedTicketInformation
      tags:
        - 'Helpdesk'
      summary: Get detailed ticked information
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      responses:
        200:
          description: A JSON array of tickets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    patch:
      operationId: updateTicket
      tags:
        - "Helpdesk"
      summary: Update a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Update a ticket
      requestBody:
        description: Ticket details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: integer
                  description: "Type id"
                  example: 1
                subject:
                  type: string
                  description: "Ticket subject"
                  example: "Ticket subject"
                description:
                  type: string
                  description: "Ticket description"
                  example: "Ticket description"
                status:
                  type: string
                  description: "Ticket status"
                  enum: [
                    new, open, in_progress, info_required, resolved
                  ]
                  example: resolved
                priority:
                  type: integer
                  description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
                  enum: [0, 1, 2]
                  example: 1
                assignedUsers:
                  type: array
                  items:
                    type: integer
                    description: "Assigned user ID's"
                    example: 11
                due_date:
                  type: string
                  format: date-time
                  example: '2020-10-20T12:04:40-05:00'
                  description: "Ticket due datetime"
                only_business_days:
                  type: boolean
                  description: "Calculate only business days"
                  example: true
                assignType:
                  type: string
                  enum: [lead, merchant, none]
                  example: lead
                assignTo:
                  type: integer
                  example: 123
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                group_id:
                  type: integer
                  example: 123

                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the ticket is visible to Merchant users"
                  example: true

                
                checklist:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/CheckListRequest"
                      - type: object
                        properties:
                          new_files:
                            type: array
                            items:
                              type: string
                              example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
                          attached_files:
                            type: array
                            items:
                              type: integer
                              example: 123
      responses:
        200:
          description: Ticket has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    delete:
      operationId: deleteTicket
      tags:
        - "Helpdesk"
      summary: Delete a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Delete a ticket
      responses:
        200:
          description: Ticket has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/{ticketId}/assignments:
    get:
      operationId: getTicketAssignmentLogs
      tags:
        - 'Helpdesk'
      summary: Get ticked assignment logs
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      responses:
        200:
          description: A JSON array of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    active:
                      type: boolean
                    source:
                      type: string
                    date:
                      type: string
                    user:
                      type: number
                    assigned_by:
                      type: number

        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /helpdesk/file:
    post:
      operationId: uploadAttachementToTicket
      tags:
        - "Helpdesk"
      summary: Upload an attachment to a ticket, comment, checklist, or ticket type
      description: Upload an attachment to a ticket, comment, checklist, or ticket type
      parameters:
        - in: query
          name: extension
          schema:
            type: string
            example: pdf
          description: File extension for validation
          required: true
        - in: query
          name: name
          schema:
            type: string
            example: pdf
          description: File name for validation
          required: true
      requestBody:
        description: Payload data
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Document
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  fileId:
                    type: string
                    example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/{ticketId}/download/{attachmentId}:
    get:
      operationId: downloadAttachmentFromTicket
      tags:
        - "Helpdesk"
      summary: Download an attachment from a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /helpdesk/types:
    post:
      operationId: createHelpdeskTicketType
      tags:
        - 'Helpdesk'
      summary: Create a new helpdesk ticket type
      description: Create a new helpdesk ticket type
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TicketTypeRequest"
                - type: object
                  properties:
                    checklist:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/BriefTicketChecklistInfo'
                          - type: object
                            properties:
                              files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    get:
      operationId: getHelpdeskTicketTypes
      tags:
        - 'Helpdesk'
      summary: Get a list of helpdesk ticket types
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [
              id,
              name,
              created,
              modified,
              status,
              order
            ]
          description: Sorting of helpdesk ticket types by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [created, modified]
          description: Filter ticket types by the specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
            example: active
          description: Status
        - in: query
          name: priority
          schema:
            type: integer
            enum: [0, 1, 2]
            example: 1
          description: 0 - Normal, 1 - Medium, 2 - Rush
        - in: query
          name: daysToResolve
          schema:
            type: number
            example: 1
          description: Days to resolve
        - in: query
          name: creator
          schema:
            type: number
            example: 1
          description: Creator
        - in: query
          name: modifier
          schema:
            type: number
            example: 1
          description: Filter ticket types by the ticket modifier
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefTicketTypeInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /helpdesk/types/{typeId}:
    get:
      operationId: getHelpdeskTicketType
      tags:
        - 'Helpdesk'
      summary: Get details for a helpdesk ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    patch:
      operationId: updateHelpdeskTicketType
      tags:
        - 'Helpdesk'
      summary: Update a helpdesk ticket type
      description: Update a helpdesk ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      requestBody:
        description: Ticket data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TicketTypeRequest"
                - type: object
                  properties:
                    checklist:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/BriefTicketChecklistInfo'
                          - type: object
                            properties:
                              files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
                              new_files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    delete:
      operationId: deleteTicketType
      tags:
        - 'Helpdesk'
      summary: Delete a ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      # requestBody:
      #   description: Ticket data
      #   content:
      #     application/json:
      #       schema:
      #         type: object
      #         properties:
      #           newType:
      #             type: integer
      #             description: New ticket type Id
      #             example: 1
      responses:
        200:
          description: Result message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ticket type was succesfuly deleted
                  movedTickets:
                    type: string
                    example: Count of moved tickets
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/types/{typeId}/download/{attachmentId}:
    get:
      operationId: downloadAttachmentFromTicketType
      tags:
        - "Helpdesk"
      summary: Download an attachment from a ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /helpdesk/users:
    get:
      operationId: getAvailableUsersToNotify
      tags:
        - 'Helpdesk'
      summary: Get a list of available users to notify and assign
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: role
          schema:
            type: string
            example: 1
          description: ID of user class
      responses:
        200:
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
