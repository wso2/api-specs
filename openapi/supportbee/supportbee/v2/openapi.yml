openapi: 3.0.0
info:
  title: SupportBee API
  description: |
    This is a generated connector for [SupportBee API v1](https://supportbee.com/api) OpenAPI specification.
    SupportBeeâ€™s support ticket system enables teams to organize, prioritize and collaborate on customer support emails.
  x-ballerina-init-description: >
    The connector initialization requires setting the API credentials. 
  
    Create a [SupportBee account](https://supportbee.com) and obtain tokens by following [this guide](https://supportbee.com/api#authentication).
  x-ballerina-display:
    label: SupportBee
    iconPath: "icon.png"
  version: "v2"
security:
- api_token: []
tags:
  - name: ticket
  - name: user
  - name: reply
  - name: label
  - name: comment
paths:
  /tickets:
    post:
      summary: "Creates a ticket for the company."
      description: "https://supportbee.com/api#create_ticket"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
      requestBody:
        description: The data required to create a ticket. 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CreateTicketRequest'
      tags:
        - "ticket"
      responses:
        201:
          description: "Created ticket"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CreatedTicket'
      operationId: "create_ticket"
    get:
      summary: "Returns 15 tickets of the company in the order of their last activity. Only tickets that are not archived are returned."
      description: "https://supportbee.com/api#fetching_tickets"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "query"
          name: "per_page"
          description: "Specifies the number of tickets to retrieve. Must be less than 100. Defaults to 15."
          schema:
            type: integer
          required: false
        - in: "query"
          name: "page"
          description: "Specifies the page of tickets to retrieve. Defaults to 1."
          schema:
            type: integer
          required: false
        - in: "query"
          name: "archived"
          description: "If true, retrieves only archived tickets. If false, it does not return any archived tickets. If any, includes archived tickets in the result. Defaults to false."
          schema:
            type: string
          required: false
        - in: "query"
          name: "spam"
          description: "If true, retrieved tickets contain tickets marked as spam. Defaults to false."
          schema:
            type: boolean
          required: false
        - in: "query"
          name: "trash"
          description: "If true, retrieved tickets contain tickets that are trashed. Defaults to false."
          schema:
            type: boolean
          required: false
        - in: "query"
          name: "replies"
          description: "If true, retrieved tickets contain only tickets with replies. If false, retrieved tickets contain only tickets without replies."
          schema:
            type: boolean
          required: false
        - in: "query"
          name: "max_replies"
          description: "Specifies the number of replies that a ticket must have. This cannot be used with replies = false."
          schema:
            type: integer
          required: false
        - in: "query"
          name: "assigned_user"
          description: "If me, retrieves only tickets assigned to the current user. If agent_id, retrieves only tickets assigned to the Agent with id agent_id. If any, retrieves tickets that are assigned to any user. If none, retrieves tickets that aren't assigned to any user."
          schema:
            type: string
          required: false
        - in: "query"
          name: "assigned_team"
          description: "If mine, retrieves only tickets assigned to the teams of the current user. If team_id, retrieves only tickets assigned to the team with id team_id. If none, retrieves tickets that aren't assigned to any team."
          schema:
            type: string
          required: false
        - in: "query"
          name: "starred"
          description: "If true, retrieves only the starred tickets of the current user. If false, retrieves only the non starred tickets assigned to the current user."
          schema:
            type: boolean
          required: false
        - in: "query"
          name: "label"
          description: "Set to label_name, retrieves only the tickets with the label label_name."
          schema:
            type: string
          required: false
        - in: "query"
          name: "since"
          description: "Can be used to retrieve tickets whose last activity timestamp is greater than the time specified in this parameter. The last activity timestamp of a ticket is updated whenever there is a new reply or a new comment on the ticket. To retrieve tickets sorted by creation time, instead of last activity, send the sort_by parameter along with the since parameter."
          schema:
            type: string
          required: false
        - in: "query"
          name: "until"
          description: "Can be used to retrieve tickets whose last activity timestamp is lesser than the time specified in this parameter. The last activity timestamp of a ticket is updated whenever there is a new reply or a new comment on the ticket. To retrieve tickets sorted by creation time, instead of last activity, send the sort_by parameter along with the until parameter."
          schema:
            type: string
          required: false
        - in: "query"
          name: "sort_by"
          description: "If last_activity, retrieves tickets sorted by last activity. If creation_time, retrieves tickets sorted by creation time. Defaults to last_activity."
          schema:
            type: string
          required: false
        - in: "query"
          name: "requester_emails"
          description: "Can be used to filter tickets by requester email addresses. Accepts a string of comma separated email addresses. For Example requester_emails=test1@example.com,test2@example.com"
          schema:
            type: string
          required: false
        - in: "query"
          name: "total_only"
          description: "Can be used in conjunction with any other parameters to return only the total number of tickets. Accepts any truthy value. For example total_only=true. Defaults to false."
          schema:
            type: boolean
          required: false
      tags:
        - "ticket"
      responses:
        200:
          description: "An object with a property tickets which is an array of Ticket objects."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Tickets'
      operationId: "list_tickets"
  /tickets/{id}:
    get:
      summary: "Retrieves the ticket specified by the id."
      description: "https://supportbee.com/api#show_ticket"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false 
        - in: "path"
          name: "id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "ticket"
      responses:
        200:
          description: "A ticket object"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TicketObject'
      operationId: "get_ticket"
    delete:
      summary: "Deletes a trashed ticket."
      description: "https://supportbee.com/api#delete_trashed_ticket"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false 
        - in: "path"
          name: "id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "ticket"
      responses:
        204:
          description: "An empty body if the ticket was successfully deleted."
      operationId: "delete_trashed_ticket"
  /tickets/{ticket_id}/archive:
    post:
      summary: "Archives an unarchived ticket specified by ticket_id."
      description: "https://supportbee.com/api#ticket_actions"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false 
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "ticket"
      responses:
        204:
          description: "An empty body if the ticket was successfully archived."
      operationId: "archive_ticket"
  /tickets/{ticket_id}/trash:
    post:
      summary: "Trashes' an un-trashed ticket specified by ticket_id."
      description: "https://supportbee.com/api#ticket_actions"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "ticket"
      responses:
        204:
          description: "An empty body if the ticket was successfully trashed."
      operationId: "trash_ticket"
  /tickets/{ticket_id}/user_assignment:
    post:
      summary: "Assign a ticket to a user. If the ticket is already assigned to a team, then the given user must be a member of that team."
      description: "https://supportbee.com/api#ticket_actions"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      requestBody:
        description: The data required to assign a ticket to a user. 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AssignUserRequest'
      tags:
        - "ticket"
      responses:
        201:
          description: "An object with a property user_assignment."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AssignedUserObject'
      operationId: "assign_user"
  /users/{id}:
    get:
      summary: "Retrieves the user specified by id."
      description: "https://supportbee.com/api#get_user"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "id"
          description: "The user ID"
          schema:
            type: string
          required: true
        - in: "query"
          name: "max_tickets"
          description: "Specify the maximum number of recent tickets you want to retrieve that this user created. If false returns all tickets."
          schema:
            type: string
          required: false
      tags:
        - "user"
      responses:
        200:
          description: "A user object"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/GetUserObject'
      operationId: "get_user"
  /users:
    get:
      summary: "Retrieves all users of the company."
      description: "https://supportbee.com/api#fetching_users"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "query"
          name: "with_invited"
          description: "If true, returns all the agents, including invited (unconfirmed) agents. Defaults to false."
          schema:
            type: boolean
          required: false
        - in: "query"
          name: "with_roles"
          description: "Specifies the role of the users you want to get. The role must be one of these: admin, agent, collaborator, customer. Several or all of these values can be used. Defaults to admin,agent,collaborator."
          schema:
            type: string
          required: false
        - in: "query"
          name: "type"
          description: "Specifies the type of the users you want to get. The type must be one of these: user, customer_group. Defaults to user."
          schema:
            type: string
          required: false
      tags:
        - "user"
      responses:
        200:
          description: "An object with a property users which is an array of User objects."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Users'
      operationId: "list_users"
  /tickets/{ticket_id}/replies:
    post:
      summary: "Posts a reply to the ticket with id ticket_id."
      description: "https://supportbee.com/api#create_reply"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      requestBody:
        description: The data required to create a ticket. 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CreateReplyRequest'
      tags:
        - "reply"
      responses:
        201:
          description: "Created reply"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CreatedReply'
      operationId: "create_reply"
    get:
      summary: "Retrieves all the replies of the ticket with id ticket_id."
      description: "https://supportbee.com/api#fetching_replies"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "reply"
      responses:
        200:
          description: "An object with a property replies which is an array of Reply objects."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Replies'
      operationId: "list_replies"
  /tickets/{ticket_id}/replies/{id}:
    get:
      summary: "Retrieves the reply for ticket specified by the ticket_id with id."
      description: "https://supportbee.com/api#create_reply"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
        - in: "path"
          name: "id"
          description: "The reply ID"
          schema:
            type: string
          required: true
      tags:
        - "reply"
      responses:
        200:
          description: "A reply object"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ReplyObject'
      operationId: "get_reply"
  /tickets/{ticket_id}/labels/{label_name}:
    post:
      summary: "Adds the label with {label_name} to the ticket with id ticket_id"
      description: "https://supportbee.com/api#adding_label"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
        - in: "path"
          name: "label_name"
          description: "The label name"
          schema:
            type: string
          required: true
      tags:
        - "label"
      responses:
        201:
          description: "Created reply"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CreatedLabel'
      operationId: "create_label"
    delete:
      summary: "Removes label from a ticket."
      description: "https://supportbee.com/api#adding_label"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
        - in: "path"
          name: "label_name"
          description: "The label name"
          schema:
            type: string
          required: true
      tags:
        - "label"
      responses:
        204:
          description: "An empty body if the label was successfully removed."
      operationId: "remove_label"
  /labels:
    get:
      summary: "Retrieves all the custom labels of a company."
      description: "https://supportbee.com/api#fetching_labels"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
      tags:
        - "label"
      responses:
        200:
          description: "An object with a property labels which is an array of Label objects."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Labels'
      operationId: "list_labels"
  /tickets/{ticket_id}/comments:
    post:
      summary: "Posts a comment to the ticket with id."
      description: "https://supportbee.com/api#create_comment"
      parameters: 
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      requestBody:
        description: The data required to create a comment. 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CreateCommentRequest'
      tags:
        - "comment"
      responses:
        201:
          description: "Created comment"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CreatedComment'
      operationId: "create_comment"
    get:
      summary: "Retrieves all the comments of the ticket with id."
      description: "https://supportbee.com/api#fetching_comments"
      parameters:
        - in: "header"
          name: "Accept"
          description: "All API requests must have a Accept header set to application/json."
          schema:
            type: string
            default: "application/json"
          required: false
        - in: "path"
          name: "ticket_id"
          description: "The ticket ID"
          schema:
            type: string
          required: true
      tags:
        - "comment"
      responses:
        200:
          description: "An object with a property comments which is an array of Comment objects."
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Comments'
      operationId: "list_comments"

components:
  schemas:
    CreateTicketRequest:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/TicketRequest'
      description: The data required to create a ticket. 
    CreatedTicket:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/Ticket'
      description: Created ticket.
    TicketObject:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/Ticket'
      description: A ticket object.
    TicketRequest:
      type: object
      properties:
        subject:
          type: string
          description: Specifies the subject of the ticket.
        requester_name:
          type: string
          description: Specifies the name of the requester of the ticket. 
        requester_email:
          type: string
          description: Specifies the email of the requester of the ticket.
        cc:
          type: array
          items:
            type: string
          description: Specifies the CC email addresses included in the ticket. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.
        bcc:
          type: array
          items:
            type: string
          description: Specifies the BCC email addresses included in the ticket. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.
        notify_requester:
          type: boolean
          description: If true, a copy of the ticket is sent to the requester and all email addresses in CC and BCC. An auto-response is not sent when this parameter is true (even if it's enabled in the settings). The sender name in this copy is taken from the forwarding address used to create the ticket.
        content:
          $ref: '#/components/schemas/Content'
        attachment_ids:
          type: array
          items:
              type: integer
          description: Specifies the attachment IDs of the ticket.
        forwarding_address_id:
          type: string
          description: This optional parameter lets you specify the email address/name to be used for sending out replies/auto-responses to the customer. You can find the forwarding address id by editing the desired forwarding address and copying the id from the URL once you are on the edit page (we are working on making this more straight forward). If you are using a SMTP server for delivering emails, it's important that you send this parameter and use the correct email address to avoid any delivery issues.
      description: The data required to create a ticket.
    Content:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the ticket.
        html:
          type: string
          description: Specifies the html content of the ticket.
        attachment_ids:
          type: array
          items:
              type: integer
          description: Specifies the attachment IDs of the ticket.
      description: Specifies the content of the ticket. Either text or html must be present.
    Tickets:
      type: object
      properties:
        total:
          type: integer
          description: Total tickets
        current_page:
          type: integer
          description: Current page count
        per_page:
          type: integer
          description: Per page count
        total_pages:
          type: integer
          description: Total pages count
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
          description: An array of Ticket objects.
      description: An object with a property tickets which is an array of Ticket objects.
    Ticket:
      type: object
      properties:
        id:
          type: integer
          description: Ticket ID 
        subject:
          type: string
          description: Subject of the ticket
        replies_count:
          type: integer
          description: Reply count for the ticket 
        comments_count:
          type: integer
          description: Comments count for the ticket
        last_activity_at:
          type: string
          description: Last activity at
        created_at:
          type: string
          description: Created at
        unanswered:
          type: boolean
          description: Unanswered status
        archived:
          type: boolean
          description: Archived status
        spam:
          type: boolean
          description: Spam status
        starred:
          type: boolean
          description: Starred status 
        summary:
          type: string
          description: Summary of the ticket
        source:
          $ref: '#/components/schemas/Source'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/CC'
          description: Specifies the CC email addresses included in the ticket.
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/BCC'
          description: Specifies the BCC email addresses included in the ticket. 
        current_user_assignee:
          $ref: '#/components/schemas/CurrentUserAssignee'
        current_team_assignee:
          $ref: '#/components/schemas/CurrentTeamAssignee'
        requester:
          $ref: '#/components/schemas/Requester'
        content:
          $ref: '#/components/schemas/TicketContent'
      description: Ticket object
    Source:
      type: object
      properties:
        email:
          type: string
          description: Email address
      description: Source of the ticket
    Picture:
      type: object
      properties:
        thumb20:
          type: string
          description: Thumb 20
        thumb24:
          type: string
          description: Thumb 24
        thumb32:
          type: string
          description: Thumb 32
        thumb48:
          type: string
          description: Thumb 48
        thumb64:
          type: string
          description: Thumb 64
        thumb128:
          type: string
          description: Thumb 128
      description: Picture object
    CC:
      type: object
      properties:
        id:
          type: integer
          description: Email ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        role:
          type: string
          description: Role
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: CC object
    BCC:
      type: object
      properties:
        id:
          type: integer
          description: Email ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        role:
          type: string
          description: Role
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: BCC object
    CurrentUserAssignee:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      description: Current user assignee
    CurrentTeamAssignee:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/Team'
      description: Current team assignee
    User:
      type: object
      properties:
        id:
          type: integer
          description: Email ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: User object
    Team:
      type: object
      properties:
        id:
          type: integer
          description: Email ID 
        name:
          type: string
          description: Name
        picture:
          $ref: '#/components/schemas/Picture'
      description: Team object
    Requester:
      type: object
      properties:
        id:
          type: integer
          description: Email ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        role:
          type: string
          description: Role
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: Requester object
    TicketContent:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the ticket.
        html:
          type: string
          description: Specifies the html content of the ticket.
        attachments:
          type: array
          items:
              $ref: '#/components/schemas/Attachment'
          description: Specifies the attachments of the ticket.
      description: Specifies the content of the ticket.
    Attachment:
      type: object
      properties:
        id:
          type: integer
          description: Attachment ID
        created_at:
          type: string
          description: Created at
        filename:
          type: string
          description: Filename
        content_type:
          type: string
          description: Content type
        url:
          $ref: '#/components/schemas/Url'
      description: Specifies the attachment object.
    Url:
      type: object
      properties:
        original:
          type: string
          description: Original URL
        thumb:
          type: string
          description: Thumbnail URL
      description: URL object
    AssignUserRequest:
      type: object
      properties:
        user_assignment:
          $ref: '#/components/schemas/UserAssignmentRequest'
      description: The data required to assign a ticket to a user. 
    UserAssignmentRequest:
      type: object
      properties:
        user_id:
          type: integer
          description: User ID
      description: The data required to assign a ticket to a user.
    AssignedUserObject:
      type: object
      properties:
        id:
          type: integer
          description: User assignment ID 
        created_at:
          type: string
          description: Created at
        ticket:
          $ref: '#/components/schemas/UserAssignmentTicket'
        assignee:
          $ref: '#/components/schemas/Assignee'    
      description: The assigned user object
    UserAssignmentTicket:
      type: object
      properties:
        id:
          type: integer
          description: User assignment ticket ID 
      description: User assignment ticket object
    Assignee:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      description: Assignee object
    GetUserObject:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserObject'
      description: Get user object
    UserObject:
      type: object
      properties:
        id:
          type: integer
          description: User ID 
        type:
          type: string
          description: User type
        email:
          type: string
          description: Email address
        first_name:
          type: string
          description: First name
        last_name:
          type: string
          description: Last name
        name:
          type: string
          description: Name
        role:
          type: string
          description: Role    
        agent:
          type: boolean
          description: Agent status
        two_factor_authentication_enabled:
          type: boolean
          description: Two factor authentication enabled
        picture:
          $ref: '#/components/schemas/Picture'
        can_members_access_group_tickets:
          type: boolean
          description: Can members access group tickets
        members_count:
          type: integer
          description: Members count
        active_tickets_count:
          type: integer
          description: Active tickets count   
      description: User object
    Users:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserObject'
          description: An array of User objects.
      description: An object with a property users which is an array of User objects.
    CreateReplyRequest:
      type: object
      properties:
        reply:
          $ref: '#/components/schemas/ReplyRequest'
      description: The data required to create a reply. 
    CreatedReply:
      type: object
      properties:
        reply:
          $ref: '#/components/schemas/Reply'
      description: Created reply.
    ReplyObject:
      type: object
      properties:
        reply:
          $ref: '#/components/schemas/Reply'
      description: A reply object.
    ReplyRequest:
      type: object
      properties:
        cc:
          type: array
          items:
            type: string
          description: Specifies the CC email addresses included in the reply. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.
        bcc:
          type: array
          items:
            type: string
          description: Specifies the BCC email addresses included in the reply. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.
        content:
          $ref: '#/components/schemas/ReplyRequestContent'
      description: The data required to create a reply.
    ReplyRequestContent:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the ticket.
        html:
          type: string
          description: Specifies the html content of the ticket.
        attachment_ids:
          type: array
          items:
              type: integer
          description: Specifies the attachment IDs of the ticket.
      description: Specifies the content of the reply. Either text or html must be present. 
    Replies:
      type: object
      properties:
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Reply'
          description: An array of Reply objects.
      description: An object with a property replies which is an array of Reply objects.
    Reply:
      type: object
      properties:
        id:
          type: integer
          description: Reply ID 
        created_at:
          type: string
          description: Created at
        summary:
          type: string
          description: Summary of the reply
        cc:
          type: array
          items:
            $ref: '#/components/schemas/CC'
          description: Specifies the CC email addresses included in the reply.
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/BCC'
          description: Specifies the BCC email addresses included in the reply. 
        ticket:
          $ref: '#/components/schemas/Ticket'
        replier:
          $ref: '#/components/schemas/Replier'
        content:
          $ref: '#/components/schemas/ReplyContent'
      description: Reply object
    Replier:
      type: object
      properties:
        id:
          type: integer
          description: Replier ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: Replier object
    ReplyContent:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the reply.
        html:
          type: string
          description: Specifies the html content of the reply.
        attachments:
          type: array
          items:
              $ref: '#/components/schemas/Attachment'
          description: Specifies the attachments of the reply.
      description: Specifies the content of the reply.
    CreatedLabel:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/Label'
      description: Created label.
    Labels:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelObject'
          description: An array of Label objects.
      description: An object with a property labels which is an array of Label objects.
    Label:
      type: object
      properties:
        id:
          type: integer
          description: Label ID.
        label:
          type: string
          description: Label name.
        ticket:
          type: integer
          description: Ticket ID.
      description: Label object.
    LabelObject:
      type: object
      properties:
        name:
          type: string
          description: Label name 
        color:
          type: string
          description: Label color 
      description: Label object.
    CreateCommentRequest:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/CommentRequest'
      description: The data required to create a comment.
    CreatedComment:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
      description: Created comment.
    CommentRequest:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CommentRequestContent'
      description: The data required to create a comment.
    CommentRequestContent:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the comment.
        html:
          type: string
          description: Specifies the html content of the comment.
        attachment_ids:
          type: array
          items:
              type: integer
          description: Specifies the attachment IDs of the comment.
      description: Specifies the content of the comment. Either text or html must be present.
    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment ID 
        created_at:
          type: string
          description: Created at
        ticket:
          $ref: '#/components/schemas/Ticket'
        commenter:
          $ref: '#/components/schemas/Commenter'
        content:
          $ref: '#/components/schemas/CommentContent'
      description: Comment object
    Commenter:
      type: object
      properties:
        id:
          type: integer
          description: Replier ID 
        email:
          type: string
          description: Email address
        name:
          type: string
          description: Name
        agent:
          type: boolean
          description: Agent status
        picture:
          $ref: '#/components/schemas/Picture'
      description: Commenter object
    CommentContent:
      type: object
      properties:
        text:
          type: string
          description: Specifies the text content of the comment.
        html:
          type: string
          description: Specifies the html content of the comment.
        attachments:
          type: array
          items:
              $ref: '#/components/schemas/Attachment'
          description: Specifies the attachments of the comment.
      description: Specifies the content of the comment.
    Comments:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          description: An array of Comment objects.
      description: An object with a property comments which is an array of Comment objects.

  securitySchemes:
    api_token:
      type: apiKey
      name: auth_token
      in: query
      description: Represents API Key `auth_token`
